{"version":3,"file":"common.d0e29d65a1839b4c.js","mappings":"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","names":["BingoService","constructor","firestore","this","optionsCollection","collection","localCardKey","loadingSubject","BehaviorSubject","loading$","asObservable","getOptions","next","from","getDocs","pipe","map","snapshot","docs","doc","data","option","tap","options","console","log","catchError","error","of","addOption","newOptionRef","setDoc","removeOption","optionRef","deleteDoc","getBingoCard","getLocalBingoCard","switchMap","localCard","generateBingoCard","saveBingoCard","card","localStorage","setItem","JSON","stringify","cardData","getItem","parse","newCard","createBingoCard","grid","shuffledOptions","shuffleArray","slice","i","row","j","push","marked","clickable","pop","array","length","Math","floor","random","static","__ngFactoryType__","i0","i1","_angular_core__WEBPACK_IMPORTED_MODULE_8__","jDH","factory","ɵfac","providedIn","_c0","MatProgressSpinner_ng_template_0_Template","rf","ctx","ctx_r0","_viewBox","_strokeCircumference","_circleStrokeWidth","_circleRadius","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","InjectionToken","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","diameter","BASE_SIZE","MatProgressSpinner","color","_color","_defaultColor","value","_elementRef","animationMode","defaults","_value","_diameter","_noopAnimations","_forceAnimations","mode","nativeElement","nodeName","toLowerCase","strokeWidth","v","max","min","size","_strokeWidth","viewBox","PI","_strokeDashOffset","ANIMATION_MODULE_TYPE","ɵcmp","type","selectors","viewQuery","_t","_determinateCircle","first","hostAttrs","hostVars","hostBindings","inputs","numberAttribute","exportAs","standalone","features","decls","vars","consts","template","circle_r2","dependencies","NgTemplateOutlet","styles","encapsulation","changeDetection","MatProgressSpinnerModule","ɵmod","ɵinj","imports","CommonModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./src/app/services/bingo.service.ts","./node_modules/@angular/material/fesm2022/progress-spinner.mjs"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Firestore, collection, doc, getDocs, setDoc, deleteDoc } from '@angular/fire/firestore';\nimport {Observable, from, of, tap, catchError, switchMap, BehaviorSubject} from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport {Card, Cell} from '../models/card.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BingoService {\n  private optionsCollection = collection(this.firestore, 'options'); // Firestore collection for options\n  private localCardKey = 'bingoCard'; // Local storage key for bingo card\n  private loadingSubject = new BehaviorSubject<boolean>(false);\n  loading$ = this.loadingSubject.asObservable();\n\n  constructor(private firestore: Firestore) { }\n\n  // Get all options from Firestore\n  getOptions(): Observable<string[]> {\n    this.loadingSubject.next(true);\n    return from(getDocs(this.optionsCollection)).pipe(\n      map(snapshot => snapshot.docs.map(doc => doc.data()['option'] as string)),\n      tap(options => {\n        console.log('Fetched options:', options); // Log fetched options\n        this.loadingSubject.next(false); // Set loading to false\n      }),\n      catchError(error => {\n        console.error('Error fetching options:', error);\n        this.loadingSubject.next(false); // Set loading to false on error\n        return of([]); // Return an empty array on error\n      })\n    );\n  }\n\n  // Add a new option to Firestore\n  addOption(option: string): Observable<void> {\n    this.loadingSubject.next(true);\n    const newOptionRef = doc(this.optionsCollection, option); // Use the option value as the document ID\n    console.log(`Adding option: ${option}`); // Debugging line\n    return from(setDoc(newOptionRef, { option })).pipe(\n      tap(() => {\n        console.log(`Option added: ${option}`); // Debugging line\n        this.loadingSubject.next(false);\n      }),\n      catchError(error => {\n        console.error('Error adding option:', error);\n        this.loadingSubject.next(false);\n        throw error;\n      })\n    );\n  }\n\n  // Remove an option from Firestore\n  // Remove an option from Firestore\n  removeOption(option: string): Observable<void> {\n    this.loadingSubject.next(true);\n    const optionRef = doc(this.optionsCollection, option);\n    console.log(`Removing option: ${option}`); // Debugging line\n    return from(deleteDoc(optionRef)).pipe(\n      tap(() => {\n        console.log(`Option removed: ${option}`); // Debugging line\n        this.loadingSubject.next(false);\n      }),\n      catchError(error => {\n        console.error('Error removing option:', error);\n        this.loadingSubject.next(false);\n        throw error;\n      })\n    );\n  }\n\n  // Generate a new bingo card\n  getBingoCard(): Observable<Card> {\n    return this.getLocalBingoCard().pipe(\n      switchMap(localCard => {\n        if (localCard) {\n          console.log('Loaded cached bingo card:', localCard);\n          return of(localCard);\n        } else {\n          console.log('No card found in cache. Generating new card.');\n          return this.generateBingoCard();\n        }\n      }),\n      catchError(error => {\n        console.error('Error fetching or generating bingo card:', error);\n        throw error;\n      })\n    );\n  }\n\n  // Save a bingo card locally\n  saveBingoCard(card: Card): void {\n    localStorage.setItem(this.localCardKey, JSON.stringify(card));\n  }\n\n  // Get the bingo card from local storage\n  getLocalBingoCard(): Observable<Card | null> {\n    const cardData = localStorage.getItem(this.localCardKey);\n    if (cardData) {\n      return of(JSON.parse(cardData) as Card);\n    } else {\n      return of(null); // or an empty card object\n    }\n  }\n\n  generateBingoCard(): Observable<Card> {\n    return this.getOptions().pipe(\n      switchMap(options => {\n        const newCard = this.createBingoCard(options);\n        this.saveBingoCard(newCard); // Save the new card to local storage\n        console.log('Generated and saved new bingo card:', newCard);\n        return of(newCard);\n      }),\n      catchError(error => {\n        console.error('Error generating bingo card:', error);\n        throw error;\n      })\n    );\n  }\n\n  private createBingoCard(options: string[]): Card {\n    const grid: Cell[][] = [];\n    const shuffledOptions = this.shuffleArray(options.slice());\n\n    for (let i = 0; i < 5; i++) {\n      const row: Cell[] = [];\n      for (let j = 0; j < 5; j++) {\n        if (i === 2 && j === 2) {\n          row.push({option: 'Free Space', marked: true, clickable: false});\n        } else {\n          row.push({option: shuffledOptions.pop() || '', marked: false, clickable: true});\n        }\n      }\n      grid.push(row);\n    }\n    return { grid };\n  }\n\n  private shuffleArray(array: string[]): string[] {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n}\n","import * as i0 from '@angular/core';\nimport { InjectionToken, ANIMATION_MODULE_TYPE, numberAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, ViewChild, NgModule } from '@angular/core';\nimport { NgTemplateOutlet, CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n/**\n * Base reference size of the spinner.\n */\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n */\nconst BASE_STROKE_WIDTH = 10;\nclass MatProgressSpinner {\n    // TODO: should be typed as `ThemePalette` but internal apps pass in arbitrary strings.\n    /**\n     * Theme color of the progress spinner. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color || this._defaultColor;\n    }\n    set color(value) {\n        this._color = value;\n    }\n    constructor(_elementRef, animationMode, defaults) {\n        this._elementRef = _elementRef;\n        this._defaultColor = 'primary';\n        this._value = 0;\n        this._diameter = BASE_SIZE;\n        this._noopAnimations =\n            animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n        this.mode =\n            _elementRef.nativeElement.nodeName.toLowerCase() === 'mat-spinner'\n                ? 'indeterminate'\n                : 'determinate';\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this._defaultColor = defaults.color;\n            }\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n    }\n    /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(v) {\n        this._value = Math.max(0, Math.min(100, v || 0));\n    }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() {\n        return this._diameter;\n    }\n    set diameter(size) {\n        this._diameter = size || 0;\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth ?? this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = value || 0;\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _circleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _viewBox() {\n        const viewBox = this._circleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _strokeCircumference() {\n        return 2 * Math.PI * this._circleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _strokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return (this._strokeCircumference() * (100 - this._value)) / 100;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _circleStrokeWidth() {\n        return (this.strokeWidth / this.diameter) * 100;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatProgressSpinner, deps: [{ token: i0.ElementRef }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatProgressSpinner, isStandalone: true, selector: \"mat-progress-spinner, mat-spinner\", inputs: { color: \"color\", mode: \"mode\", value: [\"value\", \"value\", numberAttribute], diameter: [\"diameter\", \"diameter\", numberAttribute], strokeWidth: [\"strokeWidth\", \"strokeWidth\", numberAttribute] }, host: { attributes: { \"role\": \"progressbar\", \"tabindex\": \"-1\" }, properties: { \"class\": \"\\\"mat-\\\" + color\", \"class._mat-animation-noopable\": \"_noopAnimations\", \"class.mdc-circular-progress--indeterminate\": \"mode === \\\"indeterminate\\\"\", \"style.width.px\": \"diameter\", \"style.height.px\": \"diameter\", \"style.--mdc-circular-progress-size\": \"diameter + \\\"px\\\"\", \"style.--mdc-circular-progress-active-indicator-width\": \"diameter + \\\"px\\\"\", \"attr.aria-valuemin\": \"0\", \"attr.aria-valuemax\": \"100\", \"attr.aria-valuenow\": \"mode === \\\"determinate\\\" ? value : null\", \"attr.mode\": \"mode\" }, classAttribute: \"mat-mdc-progress-spinner mdc-circular-progress\" }, viewQueries: [{ propertyName: \"_determinateCircle\", first: true, predicate: [\"determinateSpinner\"], descendants: true }], exportAs: [\"matProgressSpinner\"], ngImport: i0, template: \"<ng-template #circle>\\n  <svg [attr.viewBox]=\\\"_viewBox()\\\" class=\\\"mdc-circular-progress__indeterminate-circle-graphic\\\"\\n       xmlns=\\\"http://www.w3.org/2000/svg\\\" focusable=\\\"false\\\">\\n    <circle [attr.r]=\\\"_circleRadius()\\\"\\n            [style.stroke-dasharray.px]=\\\"_strokeCircumference()\\\"\\n            [style.stroke-dashoffset.px]=\\\"_strokeCircumference() / 2\\\"\\n            [style.stroke-width.%]=\\\"_circleStrokeWidth()\\\"\\n            cx=\\\"50%\\\" cy=\\\"50%\\\"/>\\n  </svg>\\n</ng-template>\\n\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<div class=\\\"mdc-circular-progress__determinate-container\\\" aria-hidden=\\\"true\\\" #determinateSpinner>\\n  <svg [attr.viewBox]=\\\"_viewBox()\\\" class=\\\"mdc-circular-progress__determinate-circle-graphic\\\"\\n       xmlns=\\\"http://www.w3.org/2000/svg\\\" focusable=\\\"false\\\">\\n    <circle [attr.r]=\\\"_circleRadius()\\\"\\n            [style.stroke-dasharray.px]=\\\"_strokeCircumference()\\\"\\n            [style.stroke-dashoffset.px]=\\\"_strokeDashOffset()\\\"\\n            [style.stroke-width.%]=\\\"_circleStrokeWidth()\\\"\\n            class=\\\"mdc-circular-progress__determinate-circle\\\"\\n            cx=\\\"50%\\\" cy=\\\"50%\\\"/>\\n  </svg>\\n</div>\\n<!--TODO: figure out why there are 3 separate svgs-->\\n<div class=\\\"mdc-circular-progress__indeterminate-container\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"mdc-circular-progress__spinner-layer\\\">\\n    <div class=\\\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left\\\">\\n      <ng-container [ngTemplateOutlet]=\\\"circle\\\"></ng-container>\\n    </div>\\n    <div class=\\\"mdc-circular-progress__gap-patch\\\">\\n      <ng-container [ngTemplateOutlet]=\\\"circle\\\"></ng-container>\\n    </div>\\n    <div class=\\\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right\\\">\\n      <ng-container [ngTemplateOutlet]=\\\"circle\\\"></ng-container>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-progress-spinner{display:block;overflow:hidden;line-height:0;position:relative;direction:ltr;transition:opacity 250ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-progress-spinner circle{stroke-width:var(--mdc-circular-progress-active-indicator-width)}.mat-mdc-progress-spinner._mat-animation-noopable,.mat-mdc-progress-spinner._mat-animation-noopable .mdc-circular-progress__determinate-circle{transition:none !important}.mat-mdc-progress-spinner._mat-animation-noopable .mdc-circular-progress__indeterminate-circle-graphic,.mat-mdc-progress-spinner._mat-animation-noopable .mdc-circular-progress__spinner-layer,.mat-mdc-progress-spinner._mat-animation-noopable .mdc-circular-progress__indeterminate-container{animation:none !important}.mat-mdc-progress-spinner._mat-animation-noopable .mdc-circular-progress__indeterminate-container circle{stroke-dasharray:0 !important}.cdk-high-contrast-active .mat-mdc-progress-spinner .mdc-circular-progress__indeterminate-circle-graphic,.cdk-high-contrast-active .mat-mdc-progress-spinner .mdc-circular-progress__determinate-circle{stroke:currentColor;stroke:CanvasText}.mdc-circular-progress__determinate-container,.mdc-circular-progress__indeterminate-circle-graphic,.mdc-circular-progress__indeterminate-container,.mdc-circular-progress__spinner-layer{position:absolute;width:100%;height:100%}.mdc-circular-progress__determinate-container{transform:rotate(-90deg)}.mdc-circular-progress--indeterminate .mdc-circular-progress__determinate-container{opacity:0}.mdc-circular-progress__indeterminate-container{font-size:0;letter-spacing:0;white-space:nowrap;opacity:0}.mdc-circular-progress--indeterminate .mdc-circular-progress__indeterminate-container{opacity:1;animation:mdc-circular-progress-container-rotate 1568.2352941176ms linear infinite}.mdc-circular-progress__determinate-circle-graphic,.mdc-circular-progress__indeterminate-circle-graphic{fill:rgba(0,0,0,0)}.mat-mdc-progress-spinner .mdc-circular-progress__determinate-circle,.mat-mdc-progress-spinner .mdc-circular-progress__indeterminate-circle-graphic{stroke:var(--mdc-circular-progress-active-indicator-color, var(--mat-app-primary))}.cdk-high-contrast-active .mat-mdc-progress-spinner .mdc-circular-progress__determinate-circle,.cdk-high-contrast-active .mat-mdc-progress-spinner .mdc-circular-progress__indeterminate-circle-graphic{stroke:CanvasText}.mdc-circular-progress__determinate-circle{transition:stroke-dashoffset 500ms cubic-bezier(0, 0, 0.2, 1)}.mdc-circular-progress__gap-patch{position:absolute;top:0;left:47.5%;box-sizing:border-box;width:5%;height:100%;overflow:hidden}.mdc-circular-progress__gap-patch .mdc-circular-progress__indeterminate-circle-graphic{left:-900%;width:2000%;transform:rotate(180deg)}.mdc-circular-progress__circle-clipper .mdc-circular-progress__indeterminate-circle-graphic{width:200%}.mdc-circular-progress__circle-right .mdc-circular-progress__indeterminate-circle-graphic{left:-100%}.mdc-circular-progress--indeterminate .mdc-circular-progress__circle-left .mdc-circular-progress__indeterminate-circle-graphic{animation:mdc-circular-progress-left-spin 1333ms cubic-bezier(0.4, 0, 0.2, 1) infinite both}.mdc-circular-progress--indeterminate .mdc-circular-progress__circle-right .mdc-circular-progress__indeterminate-circle-graphic{animation:mdc-circular-progress-right-spin 1333ms cubic-bezier(0.4, 0, 0.2, 1) infinite both}.mdc-circular-progress__circle-clipper{display:inline-flex;position:relative;width:50%;height:100%;overflow:hidden}.mdc-circular-progress--indeterminate .mdc-circular-progress__spinner-layer{animation:mdc-circular-progress-spinner-layer-rotate 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both}@keyframes mdc-circular-progress-container-rotate{to{transform:rotate(360deg)}}@keyframes mdc-circular-progress-spinner-layer-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}100%{transform:rotate(1080deg)}}@keyframes mdc-circular-progress-left-spin{from{transform:rotate(265deg)}50%{transform:rotate(130deg)}to{transform:rotate(265deg)}}@keyframes mdc-circular-progress-right-spin{from{transform:rotate(-265deg)}50%{transform:rotate(-130deg)}to{transform:rotate(-265deg)}}\"], dependencies: [{ kind: \"directive\", type: NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatProgressSpinner, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-progress-spinner, mat-spinner', exportAs: 'matProgressSpinner', host: {\n                        'role': 'progressbar',\n                        'class': 'mat-mdc-progress-spinner mdc-circular-progress',\n                        // set tab index to -1 so screen readers will read the aria-label\n                        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                        'tabindex': '-1',\n                        '[class]': '\"mat-\" + color',\n                        '[class._mat-animation-noopable]': `_noopAnimations`,\n                        '[class.mdc-circular-progress--indeterminate]': 'mode === \"indeterminate\"',\n                        '[style.width.px]': 'diameter',\n                        '[style.height.px]': 'diameter',\n                        '[style.--mdc-circular-progress-size]': 'diameter + \"px\"',\n                        '[style.--mdc-circular-progress-active-indicator-width]': 'diameter + \"px\"',\n                        '[attr.aria-valuemin]': '0',\n                        '[attr.aria-valuemax]': '100',\n                        '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                        '[attr.mode]': 'mode',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [NgTemplateOutlet], template: \"<ng-template #circle>\\n  <svg [attr.viewBox]=\\\"_viewBox()\\\" class=\\\"mdc-circular-progress__indeterminate-circle-graphic\\\"\\n       xmlns=\\\"http://www.w3.org/2000/svg\\\" focusable=\\\"false\\\">\\n    <circle [attr.r]=\\\"_circleRadius()\\\"\\n            [style.stroke-dasharray.px]=\\\"_strokeCircumference()\\\"\\n            [style.stroke-dashoffset.px]=\\\"_strokeCircumference() / 2\\\"\\n            [style.stroke-width.%]=\\\"_circleStrokeWidth()\\\"\\n            cx=\\\"50%\\\" cy=\\\"50%\\\"/>\\n  </svg>\\n</ng-template>\\n\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<div class=\\\"mdc-circular-progress__determinate-container\\\" aria-hidden=\\\"true\\\" #determinateSpinner>\\n  <svg [attr.viewBox]=\\\"_viewBox()\\\" class=\\\"mdc-circular-progress__determinate-circle-graphic\\\"\\n       xmlns=\\\"http://www.w3.org/2000/svg\\\" focusable=\\\"false\\\">\\n    <circle [attr.r]=\\\"_circleRadius()\\\"\\n            [style.stroke-dasharray.px]=\\\"_strokeCircumference()\\\"\\n            [style.stroke-dashoffset.px]=\\\"_strokeDashOffset()\\\"\\n            [style.stroke-width.%]=\\\"_circleStrokeWidth()\\\"\\n            class=\\\"mdc-circular-progress__determinate-circle\\\"\\n            cx=\\\"50%\\\" cy=\\\"50%\\\"/>\\n  </svg>\\n</div>\\n<!--TODO: figure out why there are 3 separate svgs-->\\n<div class=\\\"mdc-circular-progress__indeterminate-container\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"mdc-circular-progress__spinner-layer\\\">\\n    <div class=\\\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left\\\">\\n      <ng-container [ngTemplateOutlet]=\\\"circle\\\"></ng-container>\\n    </div>\\n    <div class=\\\"mdc-circular-progress__gap-patch\\\">\\n      <ng-container [ngTemplateOutlet]=\\\"circle\\\"></ng-container>\\n    </div>\\n    <div class=\\\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right\\\">\\n      <ng-container [ngTemplateOutlet]=\\\"circle\\\"></ng-container>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-progress-spinner{display:block;overflow:hidden;line-height:0;position:relative;direction:ltr;transition:opacity 250ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-progress-spinner circle{stroke-width:var(--mdc-circular-progress-active-indicator-width)}.mat-mdc-progress-spinner._mat-animation-noopable,.mat-mdc-progress-spinner._mat-animation-noopable .mdc-circular-progress__determinate-circle{transition:none !important}.mat-mdc-progress-spinner._mat-animation-noopable .mdc-circular-progress__indeterminate-circle-graphic,.mat-mdc-progress-spinner._mat-animation-noopable .mdc-circular-progress__spinner-layer,.mat-mdc-progress-spinner._mat-animation-noopable .mdc-circular-progress__indeterminate-container{animation:none !important}.mat-mdc-progress-spinner._mat-animation-noopable .mdc-circular-progress__indeterminate-container circle{stroke-dasharray:0 !important}.cdk-high-contrast-active .mat-mdc-progress-spinner .mdc-circular-progress__indeterminate-circle-graphic,.cdk-high-contrast-active .mat-mdc-progress-spinner .mdc-circular-progress__determinate-circle{stroke:currentColor;stroke:CanvasText}.mdc-circular-progress__determinate-container,.mdc-circular-progress__indeterminate-circle-graphic,.mdc-circular-progress__indeterminate-container,.mdc-circular-progress__spinner-layer{position:absolute;width:100%;height:100%}.mdc-circular-progress__determinate-container{transform:rotate(-90deg)}.mdc-circular-progress--indeterminate .mdc-circular-progress__determinate-container{opacity:0}.mdc-circular-progress__indeterminate-container{font-size:0;letter-spacing:0;white-space:nowrap;opacity:0}.mdc-circular-progress--indeterminate .mdc-circular-progress__indeterminate-container{opacity:1;animation:mdc-circular-progress-container-rotate 1568.2352941176ms linear infinite}.mdc-circular-progress__determinate-circle-graphic,.mdc-circular-progress__indeterminate-circle-graphic{fill:rgba(0,0,0,0)}.mat-mdc-progress-spinner .mdc-circular-progress__determinate-circle,.mat-mdc-progress-spinner .mdc-circular-progress__indeterminate-circle-graphic{stroke:var(--mdc-circular-progress-active-indicator-color, var(--mat-app-primary))}.cdk-high-contrast-active .mat-mdc-progress-spinner .mdc-circular-progress__determinate-circle,.cdk-high-contrast-active .mat-mdc-progress-spinner .mdc-circular-progress__indeterminate-circle-graphic{stroke:CanvasText}.mdc-circular-progress__determinate-circle{transition:stroke-dashoffset 500ms cubic-bezier(0, 0, 0.2, 1)}.mdc-circular-progress__gap-patch{position:absolute;top:0;left:47.5%;box-sizing:border-box;width:5%;height:100%;overflow:hidden}.mdc-circular-progress__gap-patch .mdc-circular-progress__indeterminate-circle-graphic{left:-900%;width:2000%;transform:rotate(180deg)}.mdc-circular-progress__circle-clipper .mdc-circular-progress__indeterminate-circle-graphic{width:200%}.mdc-circular-progress__circle-right .mdc-circular-progress__indeterminate-circle-graphic{left:-100%}.mdc-circular-progress--indeterminate .mdc-circular-progress__circle-left .mdc-circular-progress__indeterminate-circle-graphic{animation:mdc-circular-progress-left-spin 1333ms cubic-bezier(0.4, 0, 0.2, 1) infinite both}.mdc-circular-progress--indeterminate .mdc-circular-progress__circle-right .mdc-circular-progress__indeterminate-circle-graphic{animation:mdc-circular-progress-right-spin 1333ms cubic-bezier(0.4, 0, 0.2, 1) infinite both}.mdc-circular-progress__circle-clipper{display:inline-flex;position:relative;width:50%;height:100%;overflow:hidden}.mdc-circular-progress--indeterminate .mdc-circular-progress__spinner-layer{animation:mdc-circular-progress-spinner-layer-rotate 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both}@keyframes mdc-circular-progress-container-rotate{to{transform:rotate(360deg)}}@keyframes mdc-circular-progress-spinner-layer-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}100%{transform:rotate(1080deg)}}@keyframes mdc-circular-progress-left-spin{from{transform:rotate(265deg)}50%{transform:rotate(130deg)}to{transform:rotate(265deg)}}@keyframes mdc-circular-progress-right-spin{from{transform:rotate(-265deg)}50%{transform:rotate(-130deg)}to{transform:rotate(-265deg)}}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n                }] }], propDecorators: { color: [{\n                type: Input\n            }], _determinateCircle: [{\n                type: ViewChild,\n                args: ['determinateSpinner']\n            }], mode: [{\n                type: Input\n            }], value: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], diameter: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], strokeWidth: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }] } });\n/**\n * @deprecated Import Progress Spinner instead. Note that the\n *    `mat-spinner` selector isn't deprecated.\n * @breaking-change 16.0.0\n */\n// tslint:disable-next-line:variable-name\nconst MatSpinner = MatProgressSpinner;\n\nclass MatProgressSpinnerModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatProgressSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatProgressSpinnerModule, imports: [CommonModule, MatProgressSpinner, MatSpinner], exports: [MatProgressSpinner, MatSpinner, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatProgressSpinnerModule, imports: [CommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatProgressSpinnerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatProgressSpinner, MatSpinner],\n                    exports: [MatProgressSpinner, MatSpinner, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n"],"x_google_ignoreList":[1]}