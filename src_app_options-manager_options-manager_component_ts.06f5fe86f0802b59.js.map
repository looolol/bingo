{"version":3,"file":"src_app_options-manager_options-manager_component_ts.06f5fe86f0802b59.js","mappings":"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","names":["forkJoin","args","resultSelector","popResultSelector","sources","keys","argsArgArrayOrObject","result","Observable","subscriber","length","complete","values","Array","remainingCompletions","remainingEmissions","sourceIndex","hasValue","innerFrom","subscribe","createOperatorSubscriber","value","undefined","next","createObject","pipe","mapOneOrManyArgs","BaseControlValueAccessor","constructor","_renderer","_elementRef","this","onChange","_","onTouched","setProperty","key","nativeElement","registerOnTouched","fn","registerOnChange","setDisabledState","isDisabled","static","ɵfac","__ngFactoryType__","i0","ɵdir","type","BuiltInControlValueAccessor","ɵBuiltInControlValueAccessor_BaseFactory","features","NG_VALUE_ACCESSOR","InjectionToken","DEFAULT_VALUE_ACCESSOR","provide","useExisting","forwardRef","DefaultValueAccessor","multi","COMPOSITION_BUFFER_MODE","renderer","elementRef","_compositionMode","super","_composing","_isAndroid","userAgent","ɵgetDOM","getUserAgent","test","toLowerCase","writeValue","_handleInput","_compositionStart","_compositionEnd","selectors","hostBindings","rf","ctx","$event","target","isEmptyInputValue","isArray","hasValidLength","NG_VALIDATORS","NG_ASYNC_VALIDATORS","EMAIL_REGEXP","Validators","min","minValidator","control","parseFloat","isNaN","actual","max","maxValidator","required","requiredValidator","requiredTrue","requiredTrueValidator","email","emailValidator","minLength","minLengthValidator","minlength","requiredLength","actualLength","maxLength","maxLengthValidator","maxlength","pattern","patternValidator","nullValidator","regex","regexStr","charAt","RegExp","toString","requiredPattern","actualValue","compose","validators","composeAsync","isPresent","o","toObservable","ɵisPromise","from","mergeErrors","arrayOfErrors","res","forEach","errors","Object","executeValidators","map","validator","normalizeValidators","isValidatorFn","validate","c","presentValidators","filter","composeValidators","composeAsyncValidators","mergeValidators","controlValidators","dirValidator","getControlValidators","_rawValidators","getControlAsyncValidators","_rawAsyncValidators","makeValidatorsArray","hasValidator","includes","addValidators","currentValidators","current","validatorsToAdd","v","push","removeValidators","AbstractControlDirective","_onDestroyCallbacks","valid","invalid","pending","disabled","enabled","pristine","dirty","touched","status","untouched","statusChanges","valueChanges","path","_setValidators","_composedValidatorFn","_setAsyncValidators","_composedAsyncValidatorFn","asyncValidator","_registerOnDestroy","_invokeOnDestroyCallbacks","reset","hasError","errorCode","getError","ControlContainer","formDirective","NgControl","arguments","_parent","name","valueAccessor","AbstractControlStatus","cd","_cd","isTouched","_touched","isUntouched","isPristine","_pristine","isDirty","isValid","_status","isInvalid","isPending","isSubmitted","_submitted","submitted","NgControlStatus","hostVars","NgControlStatusGroup","VALID","INVALID","PENDING","DISABLED","ControlEvent","ValueChangeEvent","source","PristineChangeEvent","TouchedChangeEvent","StatusChangeEvent","FormSubmittedEvent","FormResetEvent","pickValidators","validatorOrOpts","isOptionsObj","pickAsyncValidators","asyncValidators","AbstractControl","_pendingDirty","_hasOwnPendingAsyncValidator","_pendingTouched","_onCollectionChange","computed","statusReactive","signal","pristineReactive","touchedReactive","_events","Subject","events","asObservable","_onDisabledChange","_assignValidators","_assignAsyncValidators","validatorFn","asyncValidatorFn","parent","untracked","set","updateOn","_updateOn","setValidators","setAsyncValidators","addAsyncValidators","removeAsyncValidators","hasAsyncValidator","clearValidators","clearAsyncValidators","markAsTouched","opts","changed","sourceControl","onlySelf","emitEvent","markAllAsTouched","_forEachChild","markAsUntouched","_updateTouched","markAsDirty","markAsPristine","_updatePristine","markAsPending","emit","disable","skipPristineCheck","_parentMarkedDirty","_updateValue","_updateAncestors","changeFn","enable","updateValueAndValidity","setParent","getRawValue","_setInitialStatus","shouldHaveEmitted","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","_updateTreeValidity","ctrl","_allControlsDisabled","obs","_asyncValidationSubscription","setErrors","unsubscribe","_updateControlsErrors","get","currPath","split","reduce","_find","root","x","changedControl","_initObservables","EventEmitter","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","newPristine","_registerOnCollectionChange","_setUpdateStrategy","slice","coerceToValidator","coerceToAsyncValidator","FormGroup","controls","_setUpControls","registerControl","addControl","options","removeControl","setControl","contains","controlName","hasOwnProperty","setValue","assertAllValuesPresent","isGroup","ɵRuntimeError","assertControlPresent","patchValue","_reduceChildren","acc","_syncPendingControls","subtreeUpdated","updated","child","cb","_reduceValue","condition","entries","initValue","CALL_SET_DISABLED_STATE","providedIn","factory","setDisabledStateDefault","setUpControl","dir","callSetDisabledState","setUpValidators","setUpViewChangePipeline","newValue","_pendingValue","_pendingChange","updateControl","setUpModelChangePipeline","emitModelEvent","viewToModelUpdate","_unregisterOnChange","setUpBlurPipeline","setUpDisabledChangeHandler","onDisabledChange","registerOnDisabledChange","_unregisterOnDisabledChange","cleanUpControl","validateControlPresenceOnChange","noop","cleanUpValidators","registerOnValidatorChange","onValidatorChange","isControlUpdated","updatedValidators","updatedAsyncValidators","emitModelToViewChange","setUpFormContainer","syncPendingControls","form","directives","formDirectiveProvider$1","NgForm","resolvedPromise$1","Promise","resolve","submittedReactive","_directives","Set","ngSubmit","ngAfterViewInit","then","container","_findContainer","add","getControl","delete","addFormGroup","group","removeFormGroup","getFormGroup","updateModel","onSubmit","method","onReset","resetForm","pop","inputs","outputs","exportAs","removeListItem","list","el","index","indexOf","splice","isFormControlState","formState","FormControl","defaultValue","_onChange","_applyFormState","nonNullable","initialValueIsDefault","emitViewToModelChange","formControlBinding$1","NgModel","resolvedPromise","valueAccessors","_changeDetectorRef","_registered","update","selectValueAccessor","defaultAccessor","builtinAccessor","customAccessor","isBuiltInAccessor","getPrototypeOf","ngOnChanges","changes","_checkForErrors","_checkName","oldName","previousValue","_getPath","_setUpControl","_updateDisabled","isPropertyUpdated","viewModel","change","model","isFirstChange","is","currentValue","ngOnDestroy","_isStandalone","_setUpStandalone","standalone","_checkParentType","markForCheck","disabledValue","booleanAttribute","controlPath","ChangeDetectorRef","ɵNgNoValidate","hostAttrs","formDirectiveProvider","FormGroupDirective","_submittedReactive","_updateDomValue","_checkFormPresent","_updateValidators","_updateRegistrations","_oldForm","removeListItem$1","_setUpFormContainer","_cleanUpFormContainer","addFormArray","removeFormArray","getFormArray","oldCtrl","newCtrl","isFormControl","cleanUpFormContainer","ɵInternalFormsSharedModule","ɵmod","ɵinj","FormsModule","withConfig","ngModule","providers","useValue","imports","DataSource","isDataSource","connect","ConnectableObservable","_ViewRepeaterOperation","REPLACED","INSERTED","MOVED","REMOVED","_VIEW_REPEATER_STRATEGY","_DisposeViewRepeaterStrategy","applyChanges","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","currentIndex","view","operation","previousIndex","insertContext","createEmbeddedView","templateRef","context","remove","move","detach","SelectionModel","selected","_selected","_selection","_multiple","initiallySelectedValues","_emitChanges","compareWith","_deselectedToEmit","_selectedToEmit","_markSelected","select","_verifyValueAssignment","_hasQueuedChanges","_emitChangeEvent","deselect","_unmarkSelected","setSelection","oldValues","newSelectedSet","has","_getConcreteValue","toggle","isSelected","clear","flushEvent","_unmarkAll","isEmpty","size","sort","predicate","isMultipleSelection","added","removed","inputValue","selection","selectedValue","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","eventName","isFunction","isEventTarget","addEventListener","removeEventListener","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","isArrayLike","mergeMap","subTarget","TypeError","animationFrameProvider","schedule","callback","request","requestAnimationFrame","cancel","cancelAnimationFrame","delegate","handle","timestamp","Subscription","AnimationFrameScheduler","AsyncScheduler","flush","action","_active","flushId","_scheduled","actions","error","shift","execute","state","delay","id","AnimationFrameAction","AsyncAction","scheduler","work","requestAsyncId","recycleAsyncId","_a","resolved","nextHandle","activeHandles","findAndClearHandle","Immediate","setImmediate","clearImmediate","immediateProvider","AsapScheduler","AsapAction","bind","auditTime","duration","asyncScheduler","audit","durationSelector","operate","lastValue","durationSubscriber","isComplete","endDuration","cleanupDuration","closed","timer","dueTime","intervalOrScheduler","intervalDuration","isScheduler","due","isValidDate","Date","now","n","ScrollDispatcher","_ngZone","_platform","document","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","_document","register","scrollable","elementScrolled","deregister","scrollableReference","scrolled","auditTimeInMs","isBrowser","observer","_addGlobalListener","subscription","_removeGlobalListener","of","ancestorScrolled","elementOrElementRef","ancestors","getAncestorScrollContainers","scrollingContainers","_subscription","_scrollableContainsElement","_getWindow","defaultView","window","element","coerceElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","i1","DOCUMENT","ɵprov","token","ViewportRuler","ngZone","_change","_changeListener","event","_viewportSize","getViewportSize","_updateViewportSize","output","width","height","getViewportRect","scrollPosition","getViewportScrollPosition","top","left","bottom","right","documentElement","documentRect","getBoundingClientRect","body","scrollTop","scrollY","scrollLeft","scrollX","throttleTime","innerWidth","innerHeight","CdkScrollableModule","ScrollingModule","BidiModule","_c0","_c1","CdkTable_Conditional_2_Template","CdkTable_Conditional_3_Template","CdkTable_Conditional_4_Template","CDK_TABLE","CdkCellDef","template","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","_name","_setNameInput","sticky","_sticky","_hasStickyChanged","stickyEnd","_stickyEnd","_table","hasStickyChanged","resetStickyChanged","_updateColumnCssClassName","_columnCssClassName","cssClassFriendlyName","replace","contentQueries","dirIndex","_t","cell","first","headerCell","footerCell","BaseCdkCell","columnDef","classList","CdkHeaderCell","CdkCell","role","_getCellRole","setAttribute","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_unusedNgZone","_currentSchedule","inject","NgZone","task","_createScheduleIfNeeded","scheduleEnd","queueMicrotask","BaseRowDef","_differs","_columnsDiffer","columns","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","when","CdkCellOutlet","mostRecentCellOutlet","_viewContainer","CdkHeaderRow","ɵcmp","decls","vars","consts","dependencies","encapsulation","CdkRow","CdkNoDataRow","_contentClassName","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","clearStickyPositioning","rows","stickyDirections","elementsToClear","row","nodeType","ELEMENT_NODE","i","children","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","some","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","isRtl","start","end","_addStickyStyle","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","borderedRowIndex","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","style","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","firstRowCells","widths","positions","nextPosition","STICKY_POSITIONING_LISTENER","DataRowOutlet","viewContainer","table","_rowOutlet","_outletAssigned","HeaderRowOutlet","_headerRowOutlet","FooterRowOutlet","_footerRowOutlet","NoDataRowOutlet","_noDataRowOutlet","CdkTable","_cellRoleInternal","getAttribute","cellRole","trackBy","_trackByFn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_multiTemplateDataRows","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","_fixedLayout","_forceRecalculateCellWidths","_stickyColumnStylesNeedReset","_dir","_viewRepeater","_viewportRuler","_stickyPositioningListener","_onDestroy","_columnDefsByName","_customColumnDefs","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_hasAllOutlets","_hasInitialized","contentChanged","viewChange","BehaviorSubject","Number","MAX_VALUE","_injector","Injector","_isServer","nodeName","ngOnInit","_setupStickyStyler","_dataDiffer","_i","dataRow","dataIndex","data","takeUntil","ngAfterContentInit","ngAfterContentChecked","_canRender","_render","def","_headerRowDefs","_footerRowDefs","_defaultRowDef","disconnect","renderRows","_renderRows","_getAllRenderRows","_updateNoDataRow","_adjustedPreviousIndex","_getEmbeddedViewArgs","item","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","$implicit","afterNextRender","injector","addColumnDef","removeColumnDef","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","_customNoDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","closestTableSection","display","_stickyStyler","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","_rowDefs","footerRow","_cacheRowDefs","_cacheColumnDefs","rowDefsChanged","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","WeakMap","j","renderRow","cache","_getRowDefs","cachedRenderRows","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","columnsDiffReducer","dataColumnsChanged","headerColumnsChanged","footerColumnsChanged","dataStream","isObservable","_renderRow","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","outlet","cellTemplate","_getCellTemplates","renderIndex","count","last","even","odd","columnId","stickyCheckReducer","d","items","_noDataRow","shouldShow","rootNode","i2","i3","useClass","ngContentSelectors","styles","array","concat","section","uppercaseSection","toUpperCase","parentNode","CdkTableModule","merge","popScheduler","concurrent","popNumber","Infinity","mergeAll","EMPTY","MatTable_Conditional_2_Template","MatTable_Conditional_3_Template","MatTable_Conditional_4_Template","MatTable","ɵMatTable_BaseFactory","MatCellDef","ɵMatCellDef_BaseFactory","MatHeaderCellDef","ɵMatHeaderCellDef_BaseFactory","MatColumnDef","ɵMatColumnDef_BaseFactory","MatHeaderCell","ɵMatHeaderCell_BaseFactory","MatCell","ɵMatCell_BaseFactory","MatHeaderRowDef","ɵMatHeaderRowDef_BaseFactory","MatRowDef","ɵMatRowDef_BaseFactory","MatHeaderRow","ɵMatHeaderRow_BaseFactory","MatRow","ɵMatRow_BaseFactory","MatTableModule","MatCommonModule","MatTableDataSource","_renderChangesSubscription","_filterData","_filter","_sort","_updateChangeSubscription","paginator","_paginator","initialData","_renderData","_internalPageChanges","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","active","a","b","valueA","valueB","valueAType","valueBType","comparatorResult","filterPredicate","dataStr","currentTerm","transformedFilter","trim","sortChange","initialized","pageChange","page","filteredData","combineLatest","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","filteredDataLength","lastPageIndex","Math","ceil","newPageIndex","ReplaySubject","_bufferSize","_windowTime","_timestampProvider","dateTimestampProvider","_buffer","_infiniteTimeWindow","isStopped","_trimBuffer","_subscribe","_throwIfClosed","_innerSubscribe","copy","_checkFinalizedStatuses","adjustedBufferSize","Portal","attach","host","_attachedHost","isAttached","setAttachedHost","ComponentPortal","component","componentFactoryResolver","projectableNodes","TemplatePortal","origin","DomPortal","ElementRef","BasePortalOutlet","_isDisposed","attachDomPortal","hasAttached","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","_invokeDisposeFn","dispose","setDisposeFn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","anchorNode","createComment","insertBefore","appendChild","replaceChild","componentFactory","resolveComponentFactory","componentRef","createComponent","destroy","NULL","attachView","hostView","viewCount","detachView","_getComponentRootNode","detectChanges","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_getRootNode","attachedRef","_attachedRef","ref","PortalModule","scrollBehaviorSupported","supportsScrollBehavior","BlockScrollStrategy","_previousHTMLStyles","_isEnabled","_canBeEnabled","_previousScrollPosition","coerceCssPixelValue","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","viewport","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_config","_scrollSubscription","_detach","_overlayRef","run","overlayRef","stream","overlayElement","threshold","_initialScrollPosition","abs","updatePosition","NoopScrollStrategy","isElementScrolledOutsideView","containerBounds","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","ScrollStrategyOptions","close","config","block","reposition","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","BaseOverlayDispatcher","_attachedOverlays","OverlayKeyboardDispatcher","_keydownListener","overlays","_keydownEvents","observers","keydownEvents","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_pointerDownListener","_pointerDownEventTarget","_getEventTarget","_clickListener","_outsidePointerEvents","containsPierceShadowDom","outsidePointerEvents","_addEventListeners","IOS","_cursorOriginalValue","cursor","i1$1","supportsShadowRoot","ShadowRoot","OverlayContainer","_containerElement","getContainerElement","_createContainer","containerClass","_isTestEnvironment","oppositePlatformContainers","querySelectorAll","createElement","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_animationsDisabled","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","_backdropClickHandler","_backdropTransitionendHandler","_disposeBackdrop","_renders","_scrollStrategy","_positionStrategy","positionStrategy","_afterRenderRef","afterRender","backdropElement","hostElement","_previousHostParent","attachResult","_updateStackingOrder","_updateElementSize","_updateElementDirection","_togglePointerEvents","_attachBackdrop","_toggleClasses","onDestroy","detachBackdrop","detachmentResult","_detachContentWhenEmpty","_disposeScrollStrategy","backdropClick","attachments","detachments","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","nextSibling","backdropToDetach","_backdropTimeout","setTimeout","cssClasses","isAdd","coerceArray","backdrop","clearTimeout","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","_preferredPositions","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","_boundingBox","_isInitialRender","_lastPosition","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","_containerRect","originRect","viewportRect","containerRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","y","originX","startX","_isRtl","endX","originY","overlayStartX","overlayStartY","overlayX","overlayY","point","rawOverlayRect","overlay","getRoundedBoundingClientRect","offsetX","_getOffset","offsetY","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","_pushOverlayOnScreen","overflowRight","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","scrollVisibility","_getScrollVisibility","_lastScrollVisibility","compareScrollVisibility","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","changeEvent","xOrigin","yOrigin","transformOrigin","smallestDistanceToViewportEdge","previousHeight","previousWidth","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","overflows","currentOverflow","axis","cssClass","Element","destination","input","units","clientRect","floor","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_alignItems","_xPosition","_xOffset","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","xPosition","xOffset","marginLeft","marginRight","marginTop","marginBottom","OverlayPositionBuilder","global","flexibleConnectedTo","nextUniqueId","Overlay","scrollStrategies","_positionBuilder","_directionality","_animationsModuleType","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","EnvironmentInjector","ApplicationRef","i5","i6","ANIMATION_MODULE_TYPE","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","CdkConnectedOverlay","_position","_updatePositionStrategy","_disposeOnNavigation","_overlay","scrollStrategyFactory","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","lockPosition","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","_scrollStrategyFactory","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","keyCode","ESCAPE","hasModifierKey","preventDefault","_getOriginElement","_createPositionStrategy","currentPosition","_getOrigin","transformOriginSelector","takeWhile","inclusive","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","deps","useFactory","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","OverlayModule","share","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","subject","refCount","hasCompleted","hasErrored","cancelReset","resetAndUnsubscribe","conn","dest","handleReset","SafeSubscriber","err","onSubscriber","SingleBoxSharedResizeObserver","_box","_destroyed","_resizeSubject","_elementObservables","ResizeObserver","_resizeObserver","observe","box","unobserve","entry","shareReplay","configOrBufferSize","windowTime","bufferSize","SharedResizeObserver","_observers","_c2","_c3","_c4","_c5","_c6","_c7","MatFormField_ng_template_0_Conditional_0_Conditional_2_Template","MatFormField_ng_template_0_Conditional_0_Template","ctx_r1","_shouldLabelFloat","_hasOutline","_labelId","_control","disableAutomaticLabeling","hideRequiredMarker","MatFormField_ng_template_0_Template","_hasFloatingLabel","MatFormField_Conditional_4_Template","MatFormField_Conditional_6_Conditional_1_ng_template_0_Template","MatFormField_Conditional_6_Conditional_1_Template","labelTemplate_r3","MatFormField_Conditional_6_Template","_forceDisplayInfixLabel","MatFormField_Conditional_7_Template","MatFormField_Conditional_8_Template","MatFormField_Conditional_10_ng_template_0_Template","MatFormField_Conditional_10_Template","MatFormField_Conditional_12_Template","MatFormField_Conditional_13_Template","MatFormField_Conditional_14_Template","MatFormField_Case_16_Template","_subscriptAnimationState","MatFormField_Case_17_Conditional_1_Template","_hintLabelId","hintLabel","MatFormField_Case_17_Template","MatLabel","MAT_ERROR","nextUniqueId$1","MatHint","align","MAT_PREFIX","MAT_SUFFIX","FLOATING_LABEL_PARENT","MatFormFieldFloatingLabel","floating","_floating","monitorResize","_handleResize","_monitorResize","_subscribeToResize","getWidth","estimateScrollWidth","offsetParent","clone","cloneNode","_handleLabelResized","ACTIVATE_CLASS","DEACTIVATING_CLASS","MatFormFieldLineRipple","_handleTransitionEnd","isDeactivating","propertyName","activate","deactivate","MatFormFieldNotchedOutline","label","transitionDuration","_setNotchWidth","labelWidth","_notch","viewQuery","attrs","changeDetection","matFormFieldAnimations","transitionMessages","trigger","opacity","transition","animate","MatFormFieldControl","MAT_FORM_FIELD","MAT_FORM_FIELD_DEFAULT_OPTIONS","MatFormField","_hideRequiredMarker","coerceBooleanProperty","floatLabel","_floatLabel","_defaults","appearance","_appearance","oldValue","_needsOutlineLabelOffsetUpdate","subscriptSizing","_subscriptSizing","_hintLabel","_processHints","_explicitFormFieldControl","_formFieldControl","_animationMode","_unusedDocument","_labelChild","contentChild","color","_hasIconPrefix","_hasTextPrefix","_hasIconSuffix","_hasTextSuffix","_isFocused","_previousControl","getLabelId","_updateFocusState","_assertFormFieldControl","_initializeSubscript","_initializePrefixAndSuffix","_initializeOutlineLabelOffsetSubscriptions","_initializeControl","_stateChanges","_valueChanges","getConnectedOverlayOrigin","_textField","_animateAndLockLabel","previousControl","classPrefix","controlType","stateChanges","_syncDescribedByIds","ngControl","_checkPrefixAndSuffixTypes","_prefixChildren","p","_isText","_suffixChildren","s","_hintChildren","_errorChildren","_validateHints","focused","_lineRipple","_updateOutlineLabelOffset","_shouldAlwaysFloat","shouldLabelFloat","_shouldForward","prop","_getDisplayedMessages","errorState","_refreshOutlineNotchWidth","_floatingLabel","_notchedOutline","ids","userAriaDescribedBy","startHint","hint","endHint","setDescribedByIds","floatingLabel","_iconPrefixContainer","_textPrefixContainer","_isAttachedToDom","iconPrefixContainer","textPrefixContainer","iconPrefixContainerWidth","textPrefixContainerWidth","getRootNode","autofilled","_r1","onContainerClick","tmp_16_0","NgTemplateOutlet","animation","MatFormFieldModule","CommonModule","ObserversModule","MatSelect_Conditional_4_Template","placeholder","MatSelect_Conditional_5_Conditional_1_Template","MatSelect_Conditional_5_Conditional_2_Template","triggerValue","MatSelect_Conditional_5_Template","customTrigger","MatSelect_ng_template_10_Template","_r3","_panelDoneAnimatingStream","toState","_handleKeydown","_getPanelTheme","multiple","ariaLabel","_getPanelAriaLabelledby","matSelectAnimations","transformPanelWrap","query","animateChild","optional","transformPanel","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_SELECT_TRIGGER","MatSelectChange","MatSelect","_scrollOptionIntoView","option","toArray","panel","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getHostElement","_getOptionScrollPosition","offsetTop","offsetHeight","_positioningSettled","_keyManager","activeItemIndex","_getChangeEvent","_focused","_panelOpen","hideSingleSelectionIndicator","_hideSingleSelectionIndicator","_syncParentProperties","_placeholder","_required","_compareWith","_selectionModel","_initializeSelection","_value","_assignValue","errorStateMatcher","_errorStateTracker","matcher","_id","_uid","defaultErrorStateMatcher","parentForm","parentFormGroup","_parentFormField","tabIndex","_liveAnnouncer","_defaultOptions","_positions","o1","o2","_triggerAriaLabelledBy","_destroy","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","disableRipple","disableOptionCentering","panelWidth","_initialized","optionSelectionChanges","defer","startWith","switchMap","onSelectionChange","openedChange","_openedStream","_closedStream","selectionChange","valueChange","_trackedModal","_skipPredicate","panelOpen","typeaheadDebounceInterval","_ErrorStateTracker","parseInt","distinctUntilChanged","_panelDoneAnimating","_overlayWidth","_getOverlayWidth","_preferredOverlayOrigin","_initKeyManager","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","removeAttribute","updateErrorState","withTypeAhead","_clearFromModal","_canOpen","_applyModalPanelOwnership","withHorizontalOrientation","_highlightCorrectOption","modal","closest","panelId","removeAriaReferencedId","addAriaReferencedId","empty","selectedOptions","viewValue","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","altKey","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","A","ctrlKey","hasDeselectedOptions","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFocus","_onBlur","cancelTypeahead","_onAttached","_overlayDir","take","_setSelectionByValue","setInactiveStyles","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","preferredOrigin","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","focus","changedOrDestroyed","_onSelect","isUserInput","wasSelected","setActiveItem","_propagateChanges","sortComparator","fallbackValue","valueToEmit","firstEnabledOptionIndex","labelId","ariaLabelledby","_getAriaActiveDescendant","isOpen","i4","MatOption","MAT_OPTGROUP","numberAttribute","MAT_OPTION_PARENT_COMPONENT","fallbackOverlayOrigin_r4","NgClass","MatSelectModule","MatOptionModule","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","PANEL_CLASS","passiveListenerOptions","normalizePassiveListenerOptions","passive","MatTooltip","_updatePosition","_tooltipInstance","show","positionAtOrigin","_positionAtOrigin","_disabled","hide","_setupPointerEnterEventsIfNeeded","_syncAriaDescription","message","_showDelay","coerceNumberProperty","_hideDelay","_mouseLeaveHideDelay","_message","oldMessage","String","_isTooltipVisible","_updateTooltipMessage","tooltipClass","_tooltipClass","_setTooltipClass","_ariaDescriber","_focusMonitor","_viewInitialized","_pointerExitEventsInitialized","_tooltipComponent","TooltipComponent","_cssClassPrefix","touchGestures","_passiveListeners","monitor","_touchstartTimeout","listener","removeDescription","stopMonitoring","_cancelPendingAnimations","_portal","instance","_triggerElement","afterHidden","isVisible","existingStrategy","scrollableAncestors","_updateCurrentPositionClass","_handleBodyInteraction","stopPropagation","disableTooltipInteractivity","_getOverlayPosition","_addOffset","main","isLtr","originPosition","_invertPosition","overlayPosition","_markForCheck","newPosition","_currentPosition","_platformSupportsMouseEvents","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","touch","targetTouches","clientX","clientY","touchLongPressShowDelay","_addListeners","exitListeners","newTarget","relatedTarget","_wheelListener","touchendListener","listeners","ANDROID","elementUnderPointer","elementFromPoint","gestures","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","_ariaDescriptionPending","describe","animationMode","_isMultiline","_closeOnInteraction","_isVisible","_onHide","_showAnimation","_hideAnimation","_hideTimeoutId","_showTimeoutId","_toggleVisibility","_handleMouseLeave","_finalizeAnimation","_onShow","_isTooltipMultiline","rect","_handleAnimationEnd","animationName","toVisible","tooltip","_tooltip","showClass","hideClass","getComputedStyle","getPropertyValue","MatTooltipModule","A11yModule","MatPaginator_Conditional_2_Conditional_3_For_4_Template","pageSizeOption_r3","MatPaginator_Conditional_2_Conditional_3_Template","_changePageSize","selectRef_r4","_formFieldAppearance","_pageSizeLabelId","selectConfig","_displayedPageSizeOptions","MatPaginator_Conditional_2_Conditional_4_Template","MatPaginator_Conditional_2_Template","_intl","itemsPerPageLabel","MatPaginator_Conditional_6_Template","_r5","firstPage","firstPageLabel","_previousButtonsDisabled","MatPaginator_Conditional_13_Template","_r6","lastPage","lastPageLabel","_nextButtonsDisabled","MatPaginatorIntl","nextPageLabel","previousPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","Optional","SkipSelf","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","parentIntl","MAT_PAGINATOR_DEFAULT_OPTIONS","MatPaginator","_pageIndex","_length","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","_pageSizeOptions","defaults","_initializedStream","hidePageSize","showFirstLastButtons","_intlChanges","formFieldAppearance","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","getNumberOfPages","maxPageIndex","MatIconButton","MatPaginatorModule","MatButtonModule","policy","trustedHTMLFromString","getPolicy","ttWindow","trustedTypes","createPolicy","createHTML","getMatIconNameNotFoundError","iconName","Error","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","addSvgIconResolver","resolver","cleanLiteral","sanitize","SecurityContext","HTML","trustedLiteral","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","classNames","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","throwError","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetConfig","_loadSvgIconSetFromConfig","catchError","errorMessage","handleError","foundIcon","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","iconElement","_setSvgAttributes","_toSvgElement","_svgElementFromString","str","div","innerHTML","attributes","childNodes","viewBox","iconConfig","withCredentials","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","configNamespace","svgElement","isSafeUrlWithOptions","MAT_ICON_DEFAULT_OPTIONS","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","funcIriPattern","MatIcon","_color","_defaultColor","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","_iconRegistry","ariaHidden","inline","_previousFontSetClass","_currentIconFetch","_splitIconName","parts","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","_usingFontIcon","_setSvgElement","_cacheChildrenWithExternalReferences","layoutElement","childCount","elem","fontSetClasses","className","_previousFontIconClass","elementsWithFuncIri","elementWithReference","match","rawName","_svgNamespace","_svgName","MatIconModule","listenerOptions","AutofillMonitor","_monitoredElements","elementOrRef","info","isAutofilled","unlisten","_info","TextFieldModule","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","MatInput","_type","_validateType","_isTextarea","getSupportedInputTypes","_ensureWheelDefaultBehavior","_inputValueAccessor","readonly","_readonly","inputValueAccessor","_autofillMonitor","_formField","_webkitBlinkWheelListenerAttached","_neverEmptyInputTypes","t","_iOSKeyupListener","selectionStart","selectionEnd","setSelectionRange","_webkitBlinkWheelListener","_previousNativeValue","_isNativeSelect","_isInFormField","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","_focusChanged","isFocused","_onInput","_getPlaceholder","_previousPlaceholder","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","selectedIndex","_isInlineSelect","BLINK","WEBKIT","MatInputModule","CdkDialogContainer_ng_template_0_Template","DialogConfig","ariaDescribedBy","ariaLabelledBy","ariaModal","autoFocus","restoreFocus","closeOnNavigation","closeOnDestroy","closeOnOverlayDetachments","CdkDialogContainer","_focusTrapFactory","_interactivityChecker","Platform","_focusTrap","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","_ariaLabelledByQueue","_isDestroyed","_contentAttached","_addAriaLabelledBy","_removeAriaLabelledBy","_initializeFocusTrap","_handleBackdropClicks","_captureInitialFocus","_trapFocus","_restoreFocus","_recaptureFocus","_containsFocus","_forceFocus","isFocusable","_focusByCssSelector","elementToFocus","focusInitialElement","_focusDialogContainer","focusConfig","focusTargetElement","activeElement","_getFocusedElementPierceShadowDom","focusVia","DialogRef","focusOrigin","containerInstance","closedSubject","componentInstance","DIALOG_SCROLL_STRATEGY","DIALOG_DATA","DEFAULT_DIALOG_CONFIG","uniqueId","Dialog","openDialogs","_parentDialog","_openDialogsAtThisLevel","afterOpened","_afterOpenedAtThisLevel","_afterAllClosedAtThisLevel","_ariaHiddenElements","afterAllClosed","_getAfterAllClosed","componentOrTemplateRef","getDialogById","_getOverlayConfig","dialogRef","dialogContainer","_attachContainer","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","reverseForEach","dialog","userInjector","containerType","containerPortal","TemplateRef","_createInjector","templateContext","contentRef","fallbackInjector","Directionality","overlayContainer","siblings","sibling","hasAttribute","MatDialogContainer_ng_template_2_Template","MatDialogConfig","delayFocusTrap","OPEN_CLASS","OPENING_CLASS","CLOSING_CLASS","MatDialogContainer","focusTrapFactory","dialogConfig","interactivityChecker","focusMonitor","_animationStateChanged","_animationsEnabled","_actionSectionCount","_hostElement","_enterAnimationDuration","parseCssTime","enterAnimationDuration","_exitAnimationDuration","exitAnimationDuration","_animationTimer","_finishDialogOpen","_clearAnimationClasses","_openAnimationDone","_finishDialogClose","totalTime","_startOpenAnimation","TRANSITION_DURATION_PROPERTY","_requestAnimationFrame","_waitForAnimationToComplete","_startExitAnimation","_updateActionSectionCount","delta","time","endsWith","substring","MatDialogState","OPEN","CLOSING","CLOSED","MatDialogRef","_ref","_containerInstance","_afterOpened","_beforeClosed","_state","_closeFallbackTimeout","_result","_closeDialogVia","interactionType","dialogResult","afterClosed","beforeClosed","getState","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MatDialog","dialogConfigClass","_dialog","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","cdkRef","cdkConfig","_closeDialogs","dialogs","reverseSort","isSortedAscending","option_r3","option_r5","_r4","removeOption","isLoading$","OptionsManagerComponent","bingoService","displayedColumns","filteredOptions","searchTerm","newOption","loading$","loadOptions","getOptions","applyFilter","addOption","localeCompare","core","VBU","BingoService","OptionsManagerComponent_mat_progress_spinner_18_Template","OptionsManagerComponent_th_23_Template","OptionsManagerComponent_td_24_Template","OptionsManagerComponent_th_26_Template","OptionsManagerComponent_td_27_Template","OptionsManagerComponent_tr_28_Template","OptionsManagerComponent_tr_29_Template","MatCardModule","i7","i8","MatProgressSpinnerModule","i9","i10","i11","i12"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/observable/forkJoin.js","./node_modules/@angular/forms/fesm2022/forms.mjs","./node_modules/@angular/cdk/fesm2022/collections.mjs","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js","./node_modules/rxjs/dist/esm/internal/util/Immediate.js","./node_modules/rxjs/dist/esm/internal/scheduler/immediateProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/asap.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsapAction.js","./node_modules/rxjs/dist/esm/internal/operators/auditTime.js","./node_modules/rxjs/dist/esm/internal/operators/audit.js","./node_modules/rxjs/dist/esm/internal/observable/timer.js","./node_modules/rxjs/dist/esm/internal/util/isDate.js","./node_modules/@angular/cdk/fesm2022/scrolling.mjs","./node_modules/@angular/cdk/fesm2022/table.mjs","./node_modules/rxjs/dist/esm/internal/observable/merge.js","./node_modules/@angular/material/fesm2022/table.mjs","./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./node_modules/@angular/cdk/fesm2022/portal.mjs","./node_modules/@angular/cdk/fesm2022/overlay.mjs","./node_modules/rxjs/dist/esm/internal/operators/takeWhile.js","./node_modules/rxjs/dist/esm/internal/operators/share.js","./node_modules/@angular/cdk/fesm2022/observers/private.mjs","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js","./node_modules/@angular/material/fesm2022/form-field.mjs","./node_modules/@angular/material/fesm2022/select.mjs","./node_modules/@angular/material/fesm2022/tooltip.mjs","./node_modules/@angular/material/fesm2022/paginator.mjs","./node_modules/@angular/material/fesm2022/icon.mjs","./node_modules/@angular/cdk/fesm2022/text-field.mjs","./node_modules/@angular/material/fesm2022/input.mjs","./node_modules/@angular/cdk/fesm2022/dialog.mjs","./node_modules/@angular/material/fesm2022/dialog.mjs","./src/app/options-manager/options-manager.component.html","./src/app/options-manager/options-manager.component.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin(...args) {\n    const resultSelector = popResultSelector(args);\n    const { args: sources, keys } = argsArgArrayOrObject(args);\n    const result = new Observable((subscriber) => {\n        const { length } = sources;\n        if (!length) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(length);\n        let remainingCompletions = length;\n        let remainingEmissions = length;\n        for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n            let hasValue = false;\n            innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (!hasValue) {\n                    hasValue = true;\n                    remainingEmissions--;\n                }\n                values[sourceIndex] = value;\n            }, () => remainingCompletions--, undefined, () => {\n                if (!remainingCompletions || !hasValue) {\n                    if (!remainingEmissions) {\n                        subscriber.next(keys ? createObject(keys, values) : values);\n                    }\n                    subscriber.complete();\n                }\n            }));\n        }\n    });\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n","/**\n * @license Angular v18.2.0\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, forwardRef, Optional, Inject, ɵisPromise, ɵisSubscribable, ɵRuntimeError, Self, computed, signal, untracked, EventEmitter, Input, Host, SkipSelf, booleanAttribute, ChangeDetectorRef, Output, Injectable, inject, NgModule, Version } from '@angular/core';\nimport { ɵgetDOM } from '@angular/common';\nimport { from, forkJoin, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Base class for all ControlValueAccessor classes defined in Forms package.\n * Contains common logic and utility functions.\n *\n * Note: this is an *internal-only* class and should not be extended or used directly in\n * applications code.\n */\nclass BaseControlValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         * @nodoc\n         */\n        this.onChange = (_) => { };\n        /**\n         * The registered callback function called when a blur event occurs on the input element.\n         * @nodoc\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Helper method that sets a property on a target element using the current Renderer\n     * implementation.\n     * @nodoc\n     */\n    setProperty(key, value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, key, value);\n    }\n    /**\n     * Registers a function called when the control is touched.\n     * @nodoc\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the range input element.\n     * @nodoc\n     */\n    setDisabledState(isDisabled) {\n        this.setProperty('disabled', isDisabled);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: BaseControlValueAccessor, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: BaseControlValueAccessor, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: BaseControlValueAccessor, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [{ type: i0.Renderer2 }, { type: i0.ElementRef }] });\n/**\n * Base class for all built-in ControlValueAccessor classes (except DefaultValueAccessor, which is\n * used in case no other CVAs can be found). We use this class to distinguish between default CVA,\n * built-in CVAs and custom CVAs, so that Forms logic can recognize built-in CVAs and treat custom\n * ones with higher priority (when both built-in and custom CVAs are present).\n *\n * Note: this is an *internal-only* class and should not be extended or used directly in\n * applications code.\n */\nclass BuiltInControlValueAccessor extends BaseControlValueAccessor {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: BuiltInControlValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: BuiltInControlValueAccessor, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: BuiltInControlValueAccessor, decorators: [{\n            type: Directive\n        }] });\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n * @publicApi\n */\nconst NG_VALUE_ACCESSOR = new InjectionToken(ngDevMode ? 'NgValueAccessor' : '');\n\nconst CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxControlValueAccessor),\n    multi: true,\n};\n/**\n * @description\n * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\n * element.\n *\n * @usageNotes\n *\n * ### Using a checkbox with a reactive form.\n *\n * The following example shows how to use a checkbox with a reactive form.\n *\n * ```ts\n * const rememberLoginControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass CheckboxControlValueAccessor extends BuiltInControlValueAccessor {\n    /**\n     * Sets the \"checked\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.setProperty('checked', value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: CheckboxControlValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\", host: { listeners: { \"change\": \"onChange($event.target.checked)\", \"blur\": \"onTouched()\" } }, providers: [CHECKBOX_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: CheckboxControlValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                    host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                    providers: [CHECKBOX_VALUE_ACCESSOR],\n                }]\n        }] });\n\nconst DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DefaultValueAccessor),\n    multi: true,\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid() {\n    const userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * @description\n * Provide this token to control if form directives buffer IME input until\n * the \"compositionend\" event occurs.\n * @publicApi\n */\nconst COMPOSITION_BUFFER_MODE = new InjectionToken(ngDevMode ? 'CompositionEventMode' : '');\n/**\n * The default `ControlValueAccessor` for writing a value and listening to changes on input\n * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * {@searchKeywords ngDefaultControl}\n *\n * @usageNotes\n *\n * ### Using the default value accessor\n *\n * The following example shows how to use an input element that activates the default value accessor\n * (in this case, a text field).\n *\n * ```ts\n * const firstNameControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"text\" [formControl]=\"firstNameControl\">\n * ```\n *\n * This value accessor is used by default for `<input type=\"text\">` and `<textarea>` elements, but\n * you could also use it for custom components that have similar behavior and do not require special\n * processing. In order to attach the default value accessor to a custom element, add the\n * `ngDefaultControl` attribute as shown below.\n *\n * ```\n * <custom-input-component ngDefaultControl [(ngModel)]=\"value\"></custom-input-component>\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass DefaultValueAccessor extends BaseControlValueAccessor {\n    constructor(renderer, elementRef, _compositionMode) {\n        super(renderer, elementRef);\n        this._compositionMode = _compositionMode;\n        /** Whether the user is creating a composition string (IME events). */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        const normalizedValue = value == null ? '' : value;\n        this.setProperty('value', normalizedValue);\n    }\n    /** @internal */\n    _handleInput(value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    }\n    /** @internal */\n    _compositionStart() {\n        this._composing = true;\n    }\n    /** @internal */\n    _compositionEnd(value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: DefaultValueAccessor, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: COMPOSITION_BUFFER_MODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\", host: { listeners: { \"input\": \"$any(this)._handleInput($event.target.value)\", \"blur\": \"onTouched()\", \"compositionstart\": \"$any(this)._compositionStart()\", \"compositionend\": \"$any(this)._compositionEnd($event.target.value)\" } }, providers: [DEFAULT_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: DefaultValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                    // TODO: vsavkin replace the above selector with the one below it once\n                    // https://github.com/angular/angular/issues/3011 is implemented\n                    // selector: '[ngModel],[formControl],[formControlName]',\n                    host: {\n                        '(input)': '$any(this)._handleInput($event.target.value)',\n                        '(blur)': 'onTouched()',\n                        '(compositionstart)': '$any(this)._compositionStart()',\n                        '(compositionend)': '$any(this)._compositionEnd($event.target.value)',\n                    },\n                    providers: [DEFAULT_VALUE_ACCESSOR],\n                }]\n        }], ctorParameters: () => [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [COMPOSITION_BUFFER_MODE]\n                }] }] });\n\nfunction isEmptyInputValue(value) {\n    /**\n     * Check if the object is a string or array before evaluating the length attribute.\n     * This avoids falsely rejecting objects that contain a custom length attribute.\n     * For example, the object {id: 1, length: 0, width: 0} should not be returned as empty.\n     */\n    return (value == null || ((typeof value === 'string' || Array.isArray(value)) && value.length === 0));\n}\nfunction hasValidLength(value) {\n    // non-strict comparison is intentional, to check for both `null` and `undefined` values\n    return value != null && typeof value.length === 'number';\n}\n/**\n * @description\n * An `InjectionToken` for registering additional synchronous validators used with\n * `AbstractControl`s.\n *\n * @see {@link NG_ASYNC_VALIDATORS}\n *\n * @usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nconst NG_VALIDATORS = new InjectionToken(ngDevMode ? 'NgValidators' : '');\n/**\n * @description\n * An `InjectionToken` for registering additional asynchronous validators used with\n * `AbstractControl`s.\n *\n * @see {@link NG_VALIDATORS}\n *\n * @usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Promise<ValidationErrors|null> {\n *     return Promise.resolve({'custom': true});\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nconst NG_ASYNC_VALIDATORS = new InjectionToken(ngDevMode ? 'NgAsyncValidators' : '');\n/**\n * A regular expression that matches valid e-mail addresses.\n *\n * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:\n * - `local-part` consists of one or more of the allowed characters (alphanumeric and some\n *   punctuation symbols).\n * - `local-part` cannot begin or end with a period (`.`).\n * - `local-part` cannot be longer than 64 characters.\n * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or\n *   `foo.com`.\n * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and\n *   periods (`.`)).\n * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).\n * - A `label` cannot be longer than 63 characters.\n * - The whole address cannot be longer than 254 characters.\n *\n * ## Implementation background\n *\n * This regexp was ported over from AngularJS (see there for git history):\n * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27\n * It is based on the\n * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n * lengths of different parts of the address). The main differences from the WHATWG version are:\n *   - Disallow `local-part` to begin or end with a period (`.`).\n *   - Disallow `local-part` length to exceed 64 characters.\n *   - Disallow total address length to exceed 254 characters.\n *\n * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.\n */\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n/**\n * @description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @publicApi\n */\nclass Validators {\n    /**\n     * @description\n     * Validator that requires the control's value to be greater than or equal to the provided number.\n     *\n     * @usageNotes\n     *\n     * ### Validate against a minimum of 3\n     *\n     * ```typescript\n     * const control = new FormControl(2, Validators.min(3));\n     *\n     * console.log(control.errors); // {min: {min: 3, actual: 2}}\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `min` property if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static min(min) {\n        return minValidator(min);\n    }\n    /**\n     * @description\n     * Validator that requires the control's value to be less than or equal to the provided number.\n     *\n     * @usageNotes\n     *\n     * ### Validate against a maximum of 15\n     *\n     * ```typescript\n     * const control = new FormControl(16, Validators.max(15));\n     *\n     * console.log(control.errors); // {max: {max: 15, actual: 16}}\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `max` property if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static max(max) {\n        return maxValidator(max);\n    }\n    /**\n     * @description\n     * Validator that requires the control have a non-empty value.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field is non-empty\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.required);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @returns An error map with the `required` property\n     * if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static required(control) {\n        return requiredValidator(control);\n    }\n    /**\n     * @description\n     * Validator that requires the control's value be true. This validator is commonly\n     * used for required checkboxes.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field value is true\n     *\n     * ```typescript\n     * const control = new FormControl('some value', Validators.requiredTrue);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @returns An error map that contains the `required` property\n     * set to `true` if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static requiredTrue(control) {\n        return requiredTrueValidator(control);\n    }\n    /**\n     * @description\n     * Validator that requires the control's value pass an email validation test.\n     *\n     * Tests the value using a [regular\n     * expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n     * pattern suitable for common use cases. The pattern is based on the definition of a valid email\n     * address in the [WHATWG HTML\n     * specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n     * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n     * lengths of different parts of the address).\n     *\n     * The differences from the WHATWG version include:\n     * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).\n     * - Disallow `local-part` to be longer than 64 characters.\n     * - Disallow the whole address to be longer than 254 characters.\n     *\n     * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to\n     * validate the value against a different pattern.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field matches a valid email pattern\n     *\n     * ```typescript\n     * const control = new FormControl('bad@', Validators.email);\n     *\n     * console.log(control.errors); // {email: true}\n     * ```\n     *\n     * @returns An error map with the `email` property\n     * if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static email(control) {\n        return emailValidator(control);\n    }\n    /**\n     * @description\n     * Validator that requires the length of the control's value to be greater than or equal\n     * to the provided minimum length. This validator is also provided by default if you use the\n     * the HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used\n     * only for types that have a numeric `length` property, such as strings or arrays. The\n     * `minLength` validator logic is also not invoked for values when their `length` property is 0\n     * (for example in case of an empty string or an empty array), to support optional controls. You\n     * can use the standard `required` validator if empty values should not be considered valid.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field has a minimum of 3 characters\n     *\n     * ```typescript\n     * const control = new FormControl('ng', Validators.minLength(3));\n     *\n     * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n     * ```\n     *\n     * ```html\n     * <input minlength=\"5\">\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `minlength` property if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static minLength(minLength) {\n        return minLengthValidator(minLength);\n    }\n    /**\n     * @description\n     * Validator that requires the length of the control's value to be less than or equal\n     * to the provided maximum length. This validator is also provided by default if you use the\n     * the HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used\n     * only for types that have a numeric `length` property, such as strings or arrays.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field has maximum of 5 characters\n     *\n     * ```typescript\n     * const control = new FormControl('Angular', Validators.maxLength(5));\n     *\n     * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n     * ```\n     *\n     * ```html\n     * <input maxlength=\"5\">\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `maxlength` property if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static maxLength(maxLength) {\n        return maxLengthValidator(maxLength);\n    }\n    /**\n     * @description\n     * Validator that requires the control's value to match a regex pattern. This validator is also\n     * provided by default if you use the HTML5 `pattern` attribute.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field only contains letters or spaces\n     *\n     * ```typescript\n     * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n     *\n     * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n     * ```\n     *\n     * ```html\n     * <input pattern=\"[a-zA-Z ]*\">\n     * ```\n     *\n     * ### Pattern matching with the global or sticky flag\n     *\n     * `RegExp` objects created with the `g` or `y` flags that are passed into `Validators.pattern`\n     * can produce different results on the same input when validations are run consecutively. This is\n     * due to how the behavior of `RegExp.prototype.test` is\n     * specified in [ECMA-262](https://tc39.es/ecma262/#sec-regexpbuiltinexec)\n     * (`RegExp` preserves the index of the last match when the global or sticky flag is used).\n     * Due to this behavior, it is recommended that when using\n     * `Validators.pattern` you **do not** pass in a `RegExp` object with either the global or sticky\n     * flag enabled.\n     *\n     * ```typescript\n     * // Not recommended (since the `g` flag is used)\n     * const controlOne = new FormControl('1', Validators.pattern(/foo/g));\n     *\n     * // Good\n     * const controlTwo = new FormControl('1', Validators.pattern(/foo/));\n     * ```\n     *\n     * @param pattern A regular expression to be used as is to test the values, or a string.\n     * If a string is passed, the `^` character is prepended and the `$` character is\n     * appended to the provided string (if not already present), and the resulting regular\n     * expression is used to test the values.\n     *\n     * @returns A validator function that returns an error map with the\n     * `pattern` property if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static pattern(pattern) {\n        return patternValidator(pattern);\n    }\n    /**\n     * @description\n     * Validator that performs no operation.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static nullValidator(control) {\n        return nullValidator(control);\n    }\n    static compose(validators) {\n        return compose(validators);\n    }\n    /**\n     * @description\n     * Compose multiple async validators into a single function that returns the union\n     * of the individual error objects for the provided control.\n     *\n     * @returns A validator function that returns an error map with the\n     * merged error objects of the async validators if the validation check fails, otherwise `null`.\n     *\n     * @see {@link updateValueAndValidity()}\n     *\n     */\n    static composeAsync(validators) {\n        return composeAsync(validators);\n    }\n}\n/**\n * Validator that requires the control's value to be greater than or equal to the provided number.\n * See `Validators.min` for additional information.\n */\nfunction minValidator(min) {\n    return (control) => {\n        if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        const value = parseFloat(control.value);\n        // Controls with NaN values after parsing should be treated as not having a\n        // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n        return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\n    };\n}\n/**\n * Validator that requires the control's value to be less than or equal to the provided number.\n * See `Validators.max` for additional information.\n */\nfunction maxValidator(max) {\n    return (control) => {\n        if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        const value = parseFloat(control.value);\n        // Controls with NaN values after parsing should be treated as not having a\n        // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n        return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\n    };\n}\n/**\n * Validator that requires the control have a non-empty value.\n * See `Validators.required` for additional information.\n */\nfunction requiredValidator(control) {\n    return isEmptyInputValue(control.value) ? { 'required': true } : null;\n}\n/**\n * Validator that requires the control's value be true. This validator is commonly\n * used for required checkboxes.\n * See `Validators.requiredTrue` for additional information.\n */\nfunction requiredTrueValidator(control) {\n    return control.value === true ? null : { 'required': true };\n}\n/**\n * Validator that requires the control's value pass an email validation test.\n * See `Validators.email` for additional information.\n */\nfunction emailValidator(control) {\n    if (isEmptyInputValue(control.value)) {\n        return null; // don't validate empty values to allow optional controls\n    }\n    return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n}\n/**\n * Validator that requires the length of the control's value to be greater than or equal\n * to the provided minimum length. See `Validators.minLength` for additional information.\n */\nfunction minLengthValidator(minLength) {\n    return (control) => {\n        if (isEmptyInputValue(control.value) || !hasValidLength(control.value)) {\n            // don't validate empty values to allow optional controls\n            // don't validate values without `length` property\n            return null;\n        }\n        return control.value.length < minLength\n            ? { 'minlength': { 'requiredLength': minLength, 'actualLength': control.value.length } }\n            : null;\n    };\n}\n/**\n * Validator that requires the length of the control's value to be less than or equal\n * to the provided maximum length. See `Validators.maxLength` for additional information.\n */\nfunction maxLengthValidator(maxLength) {\n    return (control) => {\n        return hasValidLength(control.value) && control.value.length > maxLength\n            ? { 'maxlength': { 'requiredLength': maxLength, 'actualLength': control.value.length } }\n            : null;\n    };\n}\n/**\n * Validator that requires the control's value to match a regex pattern.\n * See `Validators.pattern` for additional information.\n */\nfunction patternValidator(pattern) {\n    if (!pattern)\n        return nullValidator;\n    let regex;\n    let regexStr;\n    if (typeof pattern === 'string') {\n        regexStr = '';\n        if (pattern.charAt(0) !== '^')\n            regexStr += '^';\n        regexStr += pattern;\n        if (pattern.charAt(pattern.length - 1) !== '$')\n            regexStr += '$';\n        regex = new RegExp(regexStr);\n    }\n    else {\n        regexStr = pattern.toString();\n        regex = pattern;\n    }\n    return (control) => {\n        if (isEmptyInputValue(control.value)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        const value = control.value;\n        return regex.test(value)\n            ? null\n            : { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n    };\n}\n/**\n * Function that has `ValidatorFn` shape, but performs no operation.\n */\nfunction nullValidator(control) {\n    return null;\n}\nfunction isPresent(o) {\n    return o != null;\n}\nfunction toObservable(value) {\n    const obs = ɵisPromise(value) ? from(value) : value;\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !ɵisSubscribable(obs)) {\n        let errorMessage = `Expected async validator to return Promise or Observable.`;\n        // A synchronous validator will return object or null.\n        if (typeof value === 'object') {\n            errorMessage +=\n                ' Are you using a synchronous validator where an async validator is expected?';\n        }\n        throw new ɵRuntimeError(-1101 /* RuntimeErrorCode.WRONG_VALIDATOR_RETURN_TYPE */, errorMessage);\n    }\n    return obs;\n}\nfunction mergeErrors(arrayOfErrors) {\n    let res = {};\n    arrayOfErrors.forEach((errors) => {\n        res = errors != null ? { ...res, ...errors } : res;\n    });\n    return Object.keys(res).length === 0 ? null : res;\n}\nfunction executeValidators(control, validators) {\n    return validators.map((validator) => validator(control));\n}\nfunction isValidatorFn(validator) {\n    return !validator.validate;\n}\n/**\n * Given the list of validators that may contain both functions as well as classes, return the list\n * of validator functions (convert validator classes into validator functions). This is needed to\n * have consistent structure in validators list before composing them.\n *\n * @param validators The set of validators that may contain validators both in plain function form\n *     as well as represented as a validator class.\n */\nfunction normalizeValidators(validators) {\n    return validators.map((validator) => {\n        return isValidatorFn(validator)\n            ? validator\n            : ((c) => validator.validate(c));\n    });\n}\n/**\n * Merges synchronous validators into a single validator function.\n * See `Validators.compose` for additional information.\n */\nfunction compose(validators) {\n    if (!validators)\n        return null;\n    const presentValidators = validators.filter(isPresent);\n    if (presentValidators.length == 0)\n        return null;\n    return function (control) {\n        return mergeErrors(executeValidators(control, presentValidators));\n    };\n}\n/**\n * Accepts a list of validators of different possible shapes (`Validator` and `ValidatorFn`),\n * normalizes the list (converts everything to `ValidatorFn`) and merges them into a single\n * validator function.\n */\nfunction composeValidators(validators) {\n    return validators != null ? compose(normalizeValidators(validators)) : null;\n}\n/**\n * Merges asynchronous validators into a single validator function.\n * See `Validators.composeAsync` for additional information.\n */\nfunction composeAsync(validators) {\n    if (!validators)\n        return null;\n    const presentValidators = validators.filter(isPresent);\n    if (presentValidators.length == 0)\n        return null;\n    return function (control) {\n        const observables = executeValidators(control, presentValidators).map(toObservable);\n        return forkJoin(observables).pipe(map(mergeErrors));\n    };\n}\n/**\n * Accepts a list of async validators of different possible shapes (`AsyncValidator` and\n * `AsyncValidatorFn`), normalizes the list (converts everything to `AsyncValidatorFn`) and merges\n * them into a single validator function.\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null\n        ? composeAsync(normalizeValidators(validators))\n        : null;\n}\n/**\n * Merges raw control validators with a given directive validator and returns the combined list of\n * validators as an array.\n */\nfunction mergeValidators(controlValidators, dirValidator) {\n    if (controlValidators === null)\n        return [dirValidator];\n    return Array.isArray(controlValidators)\n        ? [...controlValidators, dirValidator]\n        : [controlValidators, dirValidator];\n}\n/**\n * Retrieves the list of raw synchronous validators attached to a given control.\n */\nfunction getControlValidators(control) {\n    return control._rawValidators;\n}\n/**\n * Retrieves the list of raw asynchronous validators attached to a given control.\n */\nfunction getControlAsyncValidators(control) {\n    return control._rawAsyncValidators;\n}\n/**\n * Accepts a singleton validator, an array, or null, and returns an array type with the provided\n * validators.\n *\n * @param validators A validator, validators, or null.\n * @returns A validators array.\n */\nfunction makeValidatorsArray(validators) {\n    if (!validators)\n        return [];\n    return Array.isArray(validators) ? validators : [validators];\n}\n/**\n * Determines whether a validator or validators array has a given validator.\n *\n * @param validators The validator or validators to compare against.\n * @param validator The validator to check.\n * @returns Whether the validator is present.\n */\nfunction hasValidator(validators, validator) {\n    return Array.isArray(validators) ? validators.includes(validator) : validators === validator;\n}\n/**\n * Combines two arrays of validators into one. If duplicates are provided, only one will be added.\n *\n * @param validators The new validators.\n * @param currentValidators The base array of current validators.\n * @returns An array of validators.\n */\nfunction addValidators(validators, currentValidators) {\n    const current = makeValidatorsArray(currentValidators);\n    const validatorsToAdd = makeValidatorsArray(validators);\n    validatorsToAdd.forEach((v) => {\n        // Note: if there are duplicate entries in the new validators array,\n        // only the first one would be added to the current list of validators.\n        // Duplicate ones would be ignored since `hasValidator` would detect\n        // the presence of a validator function and we update the current list in place.\n        if (!hasValidator(current, v)) {\n            current.push(v);\n        }\n    });\n    return current;\n}\nfunction removeValidators(validators, currentValidators) {\n    return makeValidatorsArray(currentValidators).filter((v) => !hasValidator(validators, v));\n}\n\n/**\n * @description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n * @publicApi\n */\nclass AbstractControlDirective {\n    constructor() {\n        /**\n         * Set of synchronous validators as they were provided while calling `setValidators` function.\n         * @internal\n         */\n        this._rawValidators = [];\n        /**\n         * Set of asynchronous validators as they were provided while calling `setAsyncValidators`\n         * function.\n         * @internal\n         */\n        this._rawAsyncValidators = [];\n        /*\n         * The set of callbacks to be invoked when directive instance is being destroyed.\n         */\n        this._onDestroyCallbacks = [];\n    }\n    /**\n     * @description\n     * Reports the value of the control if it is present, otherwise null.\n     */\n    get value() {\n        return this.control ? this.control.value : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is valid. A control is considered valid if no\n     * validation errors exist with the current value.\n     * If the control is not present, null is returned.\n     */\n    get valid() {\n        return this.control ? this.control.valid : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is invalid, meaning that an error exists in the input value.\n     * If the control is not present, null is returned.\n     */\n    get invalid() {\n        return this.control ? this.control.invalid : null;\n    }\n    /**\n     * @description\n     * Reports whether a control is pending, meaning that async validation is occurring and\n     * errors are not yet available for the input value. If the control is not present, null is\n     * returned.\n     */\n    get pending() {\n        return this.control ? this.control.pending : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is disabled, meaning that the control is disabled\n     * in the UI and is exempt from validation checks and excluded from aggregate\n     * values of ancestor controls. If the control is not present, null is returned.\n     */\n    get disabled() {\n        return this.control ? this.control.disabled : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is enabled, meaning that the control is included in ancestor\n     * calculations of validity or value. If the control is not present, null is returned.\n     */\n    get enabled() {\n        return this.control ? this.control.enabled : null;\n    }\n    /**\n     * @description\n     * Reports the control's validation errors. If the control is not present, null is returned.\n     */\n    get errors() {\n        return this.control ? this.control.errors : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is pristine, meaning that the user has not yet changed\n     * the value in the UI. If the control is not present, null is returned.\n     */\n    get pristine() {\n        return this.control ? this.control.pristine : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is dirty, meaning that the user has changed\n     * the value in the UI. If the control is not present, null is returned.\n     */\n    get dirty() {\n        return this.control ? this.control.dirty : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is touched, meaning that the user has triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     */\n    get touched() {\n        return this.control ? this.control.touched : null;\n    }\n    /**\n     * @description\n     * Reports the validation status of the control. Possible values include:\n     * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n     * If the control is not present, null is returned.\n     */\n    get status() {\n        return this.control ? this.control.status : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is untouched, meaning that the user has not yet triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     */\n    get untouched() {\n        return this.control ? this.control.untouched : null;\n    }\n    /**\n     * @description\n     * Returns a multicasting observable that emits a validation status whenever it is\n     * calculated for the control. If the control is not present, null is returned.\n     */\n    get statusChanges() {\n        return this.control ? this.control.statusChanges : null;\n    }\n    /**\n     * @description\n     * Returns a multicasting observable of value changes for the control that emits every time the\n     * value of the control changes in the UI or programmatically.\n     * If the control is not present, null is returned.\n     */\n    get valueChanges() {\n        return this.control ? this.control.valueChanges : null;\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return null;\n    }\n    /**\n     * Sets synchronous validators for this directive.\n     * @internal\n     */\n    _setValidators(validators) {\n        this._rawValidators = validators || [];\n        this._composedValidatorFn = composeValidators(this._rawValidators);\n    }\n    /**\n     * Sets asynchronous validators for this directive.\n     * @internal\n     */\n    _setAsyncValidators(validators) {\n        this._rawAsyncValidators = validators || [];\n        this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * @description\n     * Synchronous validator function composed of all the synchronous validators registered with this\n     * directive.\n     */\n    get validator() {\n        return this._composedValidatorFn || null;\n    }\n    /**\n     * @description\n     * Asynchronous validator function composed of all the asynchronous validators registered with\n     * this directive.\n     */\n    get asyncValidator() {\n        return this._composedAsyncValidatorFn || null;\n    }\n    /**\n     * Internal function to register callbacks that should be invoked\n     * when directive instance is being destroyed.\n     * @internal\n     */\n    _registerOnDestroy(fn) {\n        this._onDestroyCallbacks.push(fn);\n    }\n    /**\n     * Internal function to invoke all registered \"on destroy\" callbacks.\n     * Note: calling this function also clears the list of callbacks.\n     * @internal\n     */\n    _invokeOnDestroyCallbacks() {\n        this._onDestroyCallbacks.forEach((fn) => fn());\n        this._onDestroyCallbacks = [];\n    }\n    /**\n     * @description\n     * Resets the control with the provided value if the control is present.\n     */\n    reset(value = undefined) {\n        if (this.control)\n            this.control.reset(value);\n    }\n    /**\n     * @description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @returns whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    }\n    /**\n     * @description\n     * Reports error data for the control with the given path.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @returns error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n    }\n}\n\n/**\n * @description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n *\n * @publicApi\n */\nclass ControlContainer extends AbstractControlDirective {\n    /**\n     * @description\n     * The top-level form directive for the control.\n     */\n    get formDirective() {\n        return null;\n    }\n    /**\n     * @description\n     * The path to this group.\n     */\n    get path() {\n        return null;\n    }\n}\n\n/**\n * @description\n * A base class that all `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n *\n * @publicApi\n */\nclass NgControl extends AbstractControlDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * @description\n         * The parent form for the control.\n         *\n         * @internal\n         */\n        this._parent = null;\n        /**\n         * @description\n         * The name for the control\n         */\n        this.name = null;\n        /**\n         * @description\n         * The value accessor for the control\n         */\n        this.valueAccessor = null;\n    }\n}\n\n// DO NOT REFACTOR!\n// Each status is represented by a separate function to make sure that\n// advanced Closure Compiler optimizations related to property renaming\n// can work correctly.\nclass AbstractControlStatus {\n    constructor(cd) {\n        this._cd = cd;\n    }\n    get isTouched() {\n        // track the touched signal\n        this._cd?.control?._touched?.();\n        return !!this._cd?.control?.touched;\n    }\n    get isUntouched() {\n        return !!this._cd?.control?.untouched;\n    }\n    get isPristine() {\n        // track the pristine signal\n        this._cd?.control?._pristine?.();\n        return !!this._cd?.control?.pristine;\n    }\n    get isDirty() {\n        // pristine signal already tracked above\n        return !!this._cd?.control?.dirty;\n    }\n    get isValid() {\n        // track the status signal\n        this._cd?.control?._status?.();\n        return !!this._cd?.control?.valid;\n    }\n    get isInvalid() {\n        // status signal already tracked above\n        return !!this._cd?.control?.invalid;\n    }\n    get isPending() {\n        // status signal already tracked above\n        return !!this._cd?.control?.pending;\n    }\n    get isSubmitted() {\n        // track the submitted signal\n        this._cd?._submitted?.();\n        // We check for the `submitted` field from `NgForm` and `FormGroupDirective` classes, but\n        // we avoid instanceof checks to prevent non-tree-shakable references to those types.\n        return !!this._cd?.submitted;\n    }\n}\nconst ngControlStatusHost = {\n    '[class.ng-untouched]': 'isUntouched',\n    '[class.ng-touched]': 'isTouched',\n    '[class.ng-pristine]': 'isPristine',\n    '[class.ng-dirty]': 'isDirty',\n    '[class.ng-valid]': 'isValid',\n    '[class.ng-invalid]': 'isInvalid',\n    '[class.ng-pending]': 'isPending',\n};\nconst ngGroupStatusHost = {\n    ...ngControlStatusHost,\n    '[class.ng-submitted]': 'isSubmitted',\n};\n/**\n * @description\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status.\n *\n * @usageNotes\n *\n * ### CSS classes applied\n *\n * The following classes are applied as the properties become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgControlStatus extends AbstractControlStatus {\n    constructor(cd) {\n        super(cd);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NgControlStatus, deps: [{ token: NgControl, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\", host: { properties: { \"class.ng-untouched\": \"isUntouched\", \"class.ng-touched\": \"isTouched\", \"class.ng-pristine\": \"isPristine\", \"class.ng-dirty\": \"isDirty\", \"class.ng-valid\": \"isValid\", \"class.ng-invalid\": \"isInvalid\", \"class.ng-pending\": \"isPending\" } }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NgControlStatus, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost }]\n        }], ctorParameters: () => [{ type: NgControl, decorators: [{\n                    type: Self\n                }] }] });\n/**\n * @description\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc). On groups, this includes the additional\n * class ng-submitted.\n *\n * @see {@link NgControlStatus}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgControlStatusGroup extends AbstractControlStatus {\n    constructor(cd) {\n        super(cd);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NgControlStatusGroup, deps: [{ token: ControlContainer, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\", host: { properties: { \"class.ng-untouched\": \"isUntouched\", \"class.ng-touched\": \"isTouched\", \"class.ng-pristine\": \"isPristine\", \"class.ng-dirty\": \"isDirty\", \"class.ng-valid\": \"isValid\", \"class.ng-invalid\": \"isInvalid\", \"class.ng-pending\": \"isPending\", \"class.ng-submitted\": \"isSubmitted\" } }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NgControlStatusGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                    host: ngGroupStatusHost,\n                }]\n        }], ctorParameters: () => [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }] });\n\nconst formControlNameExample = `\n  <div [formGroup]=\"myGroup\">\n    <input formControlName=\"firstName\">\n  </div>\n\n  In your class:\n\n  this.myGroup = new FormGroup({\n      firstName: new FormControl()\n  });`;\nconst formGroupNameExample = `\n  <div [formGroup]=\"myGroup\">\n      <div formGroupName=\"person\">\n        <input formControlName=\"firstName\">\n      </div>\n  </div>\n\n  In your class:\n\n  this.myGroup = new FormGroup({\n      person: new FormGroup({ firstName: new FormControl() })\n  });`;\nconst formArrayNameExample = `\n  <div [formGroup]=\"myGroup\">\n    <div formArrayName=\"cities\">\n      <div *ngFor=\"let city of cityArray.controls; index as i\">\n        <input [formControlName]=\"i\">\n      </div>\n    </div>\n  </div>\n\n  In your class:\n\n  this.cityArray = new FormArray([new FormControl('SF')]);\n  this.myGroup = new FormGroup({\n    cities: this.cityArray\n  });`;\nconst ngModelGroupExample = `\n  <form>\n      <div ngModelGroup=\"person\">\n        <input [(ngModel)]=\"person.name\" name=\"firstName\">\n      </div>\n  </form>`;\nconst ngModelWithFormGroupExample = `\n  <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n      <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n  </div>\n`;\n\nfunction controlParentException(nameOrIndex) {\n    return new ɵRuntimeError(1050 /* RuntimeErrorCode.FORM_CONTROL_NAME_MISSING_PARENT */, `formControlName must be used with a parent formGroup directive. You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      ${describeFormControl(nameOrIndex)}\n\n    Example:\n\n    ${formControlNameExample}`);\n}\nfunction describeFormControl(nameOrIndex) {\n    if (nameOrIndex == null || nameOrIndex === '') {\n        return '';\n    }\n    const valueType = typeof nameOrIndex === 'string' ? 'name' : 'index';\n    return `Affected Form Control ${valueType}: \"${nameOrIndex}\"`;\n}\nfunction ngModelGroupException() {\n    return new ɵRuntimeError(1051 /* RuntimeErrorCode.FORM_CONTROL_NAME_INSIDE_MODEL_GROUP */, `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n      that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n      Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n      ${formGroupNameExample}\n\n      Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n      ${ngModelGroupExample}`);\n}\nfunction missingFormException() {\n    return new ɵRuntimeError(1052 /* RuntimeErrorCode.FORM_GROUP_MISSING_INSTANCE */, `formGroup expects a FormGroup instance. Please pass one in.\n\n      Example:\n\n      ${formControlNameExample}`);\n}\nfunction groupParentException() {\n    return new ɵRuntimeError(1053 /* RuntimeErrorCode.FORM_GROUP_NAME_MISSING_PARENT */, `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n    directive and pass it an existing FormGroup instance (you can create one in your class).\n\n    Example:\n\n    ${formGroupNameExample}`);\n}\nfunction arrayParentException() {\n    return new ɵRuntimeError(1054 /* RuntimeErrorCode.FORM_ARRAY_NAME_MISSING_PARENT */, `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${formArrayNameExample}`);\n}\nconst disabledAttrWarning = `\n  It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n  when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n  you. We recommend using this approach to avoid 'changed after checked' errors.\n\n  Example:\n  // Specify the \\`disabled\\` property at control creation time:\n  form = new FormGroup({\n    first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n    last: new FormControl('Drew', Validators.required)\n  });\n\n  // Controls can also be enabled/disabled after creation:\n  form.get('first')?.enable();\n  form.get('last')?.disable();\n`;\nconst asyncValidatorsDroppedWithOptsWarning = `\n  It looks like you're constructing using a FormControl with both an options argument and an\n  async validators argument. Mixing these arguments will cause your async validators to be dropped.\n  You should either put all your validators in the options object, or in separate validators\n  arguments. For example:\n\n  // Using validators arguments\n  fc = new FormControl(42, Validators.required, myAsyncValidator);\n\n  // Using AbstractControlOptions\n  fc = new FormControl(42, {validators: Validators.required, asyncValidators: myAV});\n\n  // Do NOT mix them: async validators will be dropped!\n  fc = new FormControl(42, {validators: Validators.required}, /* Oops! */ myAsyncValidator);\n`;\nfunction ngModelWarning(directiveName) {\n    return `\n  It looks like you're using ngModel on the same form field as ${directiveName}.\n  Support for using the ngModel input property and ngModelChange event with\n  reactive form directives has been deprecated in Angular v6 and will be removed\n  in a future version of Angular.\n\n  For more information on this, see our API docs here:\n  https://angular.io/api/forms/${directiveName === 'formControl' ? 'FormControlDirective' : 'FormControlName'}#use-with-ngmodel\n  `;\n}\nfunction describeKey(isFormGroup, key) {\n    return isFormGroup ? `with name: '${key}'` : `at index: ${key}`;\n}\nfunction noControlsError(isFormGroup) {\n    return `\n    There are no form controls registered with this ${isFormGroup ? 'group' : 'array'} yet. If you're using ngModel,\n    you may want to check next tick (e.g. use setTimeout).\n  `;\n}\nfunction missingControlError(isFormGroup, key) {\n    return `Cannot find form control ${describeKey(isFormGroup, key)}`;\n}\nfunction missingControlValueError(isFormGroup, key) {\n    return `Must supply a value for form control ${describeKey(isFormGroup, key)}`;\n}\n\n/**\n * Reports that a control is valid, meaning that no errors exist in the input value.\n *\n * @see {@link status}\n */\nconst VALID = 'VALID';\n/**\n * Reports that a control is invalid, meaning that an error exists in the input value.\n *\n * @see {@link status}\n */\nconst INVALID = 'INVALID';\n/**\n * Reports that a control is pending, meaning that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see {@link markAsPending}\n * @see {@link status}\n */\nconst PENDING = 'PENDING';\n/**\n * Reports that a control is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see {@link markAsDisabled}\n * @see {@link status}\n */\nconst DISABLED = 'DISABLED';\n/**\n * Base class for every event sent by `AbstractControl.events()`\n *\n * @publicApi\n */\nclass ControlEvent {\n}\n/**\n * Event fired when the value of a control changes.\n *\n * @publicApi\n */\nclass ValueChangeEvent extends ControlEvent {\n    constructor(value, source) {\n        super();\n        this.value = value;\n        this.source = source;\n    }\n}\n/**\n * Event fired when the control's pristine state changes (pristine <=> dirty).\n *\n * @publicApi */\nclass PristineChangeEvent extends ControlEvent {\n    constructor(pristine, source) {\n        super();\n        this.pristine = pristine;\n        this.source = source;\n    }\n}\n/**\n * Event fired when the control's touched status changes (touched <=> untouched).\n *\n * @publicApi\n */\nclass TouchedChangeEvent extends ControlEvent {\n    constructor(touched, source) {\n        super();\n        this.touched = touched;\n        this.source = source;\n    }\n}\n/**\n * Event fired when the control's status changes.\n *\n * @publicApi\n */\nclass StatusChangeEvent extends ControlEvent {\n    constructor(status, source) {\n        super();\n        this.status = status;\n        this.source = source;\n    }\n}\n/**\n * Event fired when a form is submitted\n *\n * @publicApi\n */\nclass FormSubmittedEvent extends ControlEvent {\n    constructor(source) {\n        super();\n        this.source = source;\n    }\n}\n/**\n * Event fired when a form is reset.\n *\n * @publicApi\n */\nclass FormResetEvent extends ControlEvent {\n    constructor(source) {\n        super();\n        this.source = source;\n    }\n}\n/**\n * Gets validators from either an options object or given validators.\n */\nfunction pickValidators(validatorOrOpts) {\n    return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;\n}\n/**\n * Creates validator function by combining provided validators.\n */\nfunction coerceToValidator(validator) {\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * Gets async validators from either an options object or given validators.\n */\nfunction pickAsyncValidators(asyncValidator, validatorOrOpts) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (isOptionsObj(validatorOrOpts) && asyncValidator) {\n            console.warn(asyncValidatorsDroppedWithOptsWarning);\n        }\n    }\n    return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;\n}\n/**\n * Creates async validator function by combining provided async validators.\n */\nfunction coerceToAsyncValidator(asyncValidator) {\n    return Array.isArray(asyncValidator)\n        ? composeAsyncValidators(asyncValidator)\n        : asyncValidator || null;\n}\nfunction isOptionsObj(validatorOrOpts) {\n    return (validatorOrOpts != null &&\n        !Array.isArray(validatorOrOpts) &&\n        typeof validatorOrOpts === 'object');\n}\nfunction assertControlPresent(parent, isGroup, key) {\n    const controls = parent.controls;\n    const collection = isGroup ? Object.keys(controls) : controls;\n    if (!collection.length) {\n        throw new ɵRuntimeError(1000 /* RuntimeErrorCode.NO_CONTROLS */, typeof ngDevMode === 'undefined' || ngDevMode ? noControlsError(isGroup) : '');\n    }\n    if (!controls[key]) {\n        throw new ɵRuntimeError(1001 /* RuntimeErrorCode.MISSING_CONTROL */, typeof ngDevMode === 'undefined' || ngDevMode ? missingControlError(isGroup, key) : '');\n    }\n}\nfunction assertAllValuesPresent(control, isGroup, value) {\n    control._forEachChild((_, key) => {\n        if (value[key] === undefined) {\n            throw new ɵRuntimeError(1002 /* RuntimeErrorCode.MISSING_CONTROL_VALUE */, typeof ngDevMode === 'undefined' || ngDevMode ? missingControlValueError(isGroup, key) : '');\n        }\n    });\n}\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * The first type parameter TValue represents the value type of the control (`control.value`).\n * The optional type parameter TRawValue  represents the raw value type (`control.getRawValue()`).\n *\n * @see [Forms Guide](guide/forms)\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see [Dynamic Forms Guide](guide/forms/dynamic-forms)\n *\n * @publicApi\n */\nclass AbstractControl {\n    /**\n     * Initialize the AbstractControl instance.\n     *\n     * @param validators The function or array of functions that is used to determine the validity of\n     *     this control synchronously.\n     * @param asyncValidators The function or array of functions that is used to determine validity of\n     *     this control asynchronously.\n     */\n    constructor(validators, asyncValidators) {\n        /** @internal */\n        this._pendingDirty = false;\n        /**\n         * Indicates that a control has its own pending asynchronous validation in progress.\n         * It also stores if the control should emit events when the validation status changes.\n         *\n         * @internal\n         */\n        this._hasOwnPendingAsyncValidator = null;\n        /** @internal */\n        this._pendingTouched = false;\n        /** @internal */\n        this._onCollectionChange = () => { };\n        this._parent = null;\n        /** @internal */\n        this._status = computed(() => this.statusReactive());\n        this.statusReactive = signal(undefined);\n        /** @internal */\n        this._pristine = computed(() => this.pristineReactive());\n        this.pristineReactive = signal(true);\n        /** @internal */\n        this._touched = computed(() => this.touchedReactive());\n        this.touchedReactive = signal(false);\n        /**\n         * Exposed as observable, see below.\n         *\n         * @internal\n         */\n        this._events = new Subject();\n        /**\n         * A multicasting observable that emits an event every time the state of the control changes.\n         * It emits for value, status, pristine or touched changes.\n         *\n         * **Note**: On value change, the emit happens right after a value of this control is updated. The\n         * value of a parent control (for example if this FormControl is a part of a FormGroup) is updated\n         * later, so accessing a value of a parent control (using the `value` property) from the callback\n         * of this event might result in getting a value that has not been updated yet. Subscribe to the\n         * `events` of the parent control instead.\n         * For other event types, the events are emitted after the parent control has been updated.\n         *\n         */\n        this.events = this._events.asObservable();\n        /** @internal */\n        this._onDisabledChange = [];\n        this._assignValidators(validators);\n        this._assignAsyncValidators(asyncValidators);\n    }\n    /**\n     * Returns the function that is used to determine the validity of this control synchronously.\n     * If multiple validators have been added, this will be a single composed function.\n     * See `Validators.compose()` for additional information.\n     */\n    get validator() {\n        return this._composedValidatorFn;\n    }\n    set validator(validatorFn) {\n        this._rawValidators = this._composedValidatorFn = validatorFn;\n    }\n    /**\n     * Returns the function that is used to determine the validity of this control asynchronously.\n     * If multiple validators have been added, this will be a single composed function.\n     * See `Validators.compose()` for additional information.\n     */\n    get asyncValidator() {\n        return this._composedAsyncValidatorFn;\n    }\n    set asyncValidator(asyncValidatorFn) {\n        this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;\n    }\n    /**\n     * The parent control.\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * The validation status of the control.\n     *\n     * @see {@link FormControlStatus}\n     *\n     * These status values are mutually exclusive, so a control cannot be\n     * both valid AND invalid or invalid AND disabled.\n     */\n    get status() {\n        return untracked(this.statusReactive);\n    }\n    set status(v) {\n        untracked(() => this.statusReactive.set(v));\n    }\n    /**\n     * A control is `valid` when its `status` is `VALID`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if the control has passed all of its validation tests,\n     * false otherwise.\n     */\n    get valid() {\n        return this.status === VALID;\n    }\n    /**\n     * A control is `invalid` when its `status` is `INVALID`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if this control has failed one or more of its validation checks,\n     * false otherwise.\n     */\n    get invalid() {\n        return this.status === INVALID;\n    }\n    /**\n     * A control is `pending` when its `status` is `PENDING`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if this control is in the process of conducting a validation check,\n     * false otherwise.\n     */\n    get pending() {\n        return this.status == PENDING;\n    }\n    /**\n     * A control is `disabled` when its `status` is `DISABLED`.\n     *\n     * Disabled controls are exempt from validation checks and\n     * are not included in the aggregate value of their ancestor\n     * controls.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if the control is disabled, false otherwise.\n     */\n    get disabled() {\n        return this.status === DISABLED;\n    }\n    /**\n     * A control is `enabled` as long as its `status` is not `DISABLED`.\n     *\n     * @returns True if the control has any status other than 'DISABLED',\n     * false if the status is 'DISABLED'.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     */\n    get enabled() {\n        return this.status !== DISABLED;\n    }\n    /**\n     * A control is `pristine` if the user has not yet changed\n     * the value in the UI.\n     *\n     * @returns True if the user has not yet changed the value in the UI; compare `dirty`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n    get pristine() {\n        return untracked(this.pristineReactive);\n    }\n    set pristine(v) {\n        untracked(() => this.pristineReactive.set(v));\n    }\n    /**\n     * A control is `dirty` if the user has changed the value\n     * in the UI.\n     *\n     * @returns True if the user has changed the value of this control in the UI; compare `pristine`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n    get dirty() {\n        return !this.pristine;\n    }\n    /**\n     * True if the control is marked as `touched`.\n     *\n     * A control is marked `touched` once the user has triggered\n     * a `blur` event on it.\n     */\n    get touched() {\n        return untracked(this.touchedReactive);\n    }\n    set touched(v) {\n        untracked(() => this.touchedReactive.set(v));\n    }\n    /**\n     * True if the control has not been marked as touched\n     *\n     * A control is `untouched` if the user has not yet triggered\n     * a `blur` event on it.\n     */\n    get untouched() {\n        return !this.touched;\n    }\n    /**\n     * Reports the update strategy of the `AbstractControl` (meaning\n     * the event on which the control updates itself).\n     * Possible values: `'change'` | `'blur'` | `'submit'`\n     * Default value: `'change'`\n     */\n    get updateOn() {\n        return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : 'change';\n    }\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this overwrites any existing synchronous validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * If you want to add a new validator without affecting existing ones, consider\n     * using `addValidators()` method instead.\n     */\n    setValidators(validators) {\n        this._assignValidators(validators);\n    }\n    /**\n     * Sets the asynchronous validators that are active on this control. Calling this\n     * overwrites any existing asynchronous validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * If you want to add a new validator without affecting existing ones, consider\n     * using `addAsyncValidators()` method instead.\n     */\n    setAsyncValidators(validators) {\n        this._assignAsyncValidators(validators);\n    }\n    /**\n     * Add a synchronous validator or validators to this control, without affecting other validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * Adding a validator that already exists will have no effect. If duplicate validator functions\n     * are present in the `validators` array, only the first instance would be added to a form\n     * control.\n     *\n     * @param validators The new validator function or functions to add to this control.\n     */\n    addValidators(validators) {\n        this.setValidators(addValidators(validators, this._rawValidators));\n    }\n    /**\n     * Add an asynchronous validator or validators to this control, without affecting other\n     * validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * Adding a validator that already exists will have no effect.\n     *\n     * @param validators The new asynchronous validator function or functions to add to this control.\n     */\n    addAsyncValidators(validators) {\n        this.setAsyncValidators(addValidators(validators, this._rawAsyncValidators));\n    }\n    /**\n     * Remove a synchronous validator from this control, without affecting other validators.\n     * Validators are compared by function reference; you must pass a reference to the exact same\n     * validator function as the one that was originally set. If a provided validator is not found,\n     * it is ignored.\n     *\n     * @usageNotes\n     *\n     * ### Reference to a ValidatorFn\n     *\n     * ```\n     * // Reference to the RequiredValidator\n     * const ctrl = new FormControl<string | null>('', Validators.required);\n     * ctrl.removeValidators(Validators.required);\n     *\n     * // Reference to anonymous function inside MinValidator\n     * const minValidator = Validators.min(3);\n     * const ctrl = new FormControl<string | null>('', minValidator);\n     * expect(ctrl.hasValidator(minValidator)).toEqual(true)\n     * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)\n     *\n     * ctrl.removeValidators(minValidator);\n     * ```\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @param validators The validator or validators to remove.\n     */\n    removeValidators(validators) {\n        this.setValidators(removeValidators(validators, this._rawValidators));\n    }\n    /**\n     * Remove an asynchronous validator from this control, without affecting other validators.\n     * Validators are compared by function reference; you must pass a reference to the exact same\n     * validator function as the one that was originally set. If a provided validator is not found, it\n     * is ignored.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @param validators The asynchronous validator or validators to remove.\n     */\n    removeAsyncValidators(validators) {\n        this.setAsyncValidators(removeValidators(validators, this._rawAsyncValidators));\n    }\n    /**\n     * Check whether a synchronous validator function is present on this control. The provided\n     * validator must be a reference to the exact same function that was provided.\n     *\n     * @usageNotes\n     *\n     * ### Reference to a ValidatorFn\n     *\n     * ```\n     * // Reference to the RequiredValidator\n     * const ctrl = new FormControl<number | null>(0, Validators.required);\n     * expect(ctrl.hasValidator(Validators.required)).toEqual(true)\n     *\n     * // Reference to anonymous function inside MinValidator\n     * const minValidator = Validators.min(3);\n     * const ctrl = new FormControl<number | null>(0, minValidator);\n     * expect(ctrl.hasValidator(minValidator)).toEqual(true)\n     * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)\n     * ```\n     *\n     * @param validator The validator to check for presence. Compared by function reference.\n     * @returns Whether the provided validator was found on this control.\n     */\n    hasValidator(validator) {\n        return hasValidator(this._rawValidators, validator);\n    }\n    /**\n     * Check whether an asynchronous validator function is present on this control. The provided\n     * validator must be a reference to the exact same function that was provided.\n     *\n     * @param validator The asynchronous validator to check for presence. Compared by function\n     *     reference.\n     * @returns Whether the provided asynchronous validator was found on this control.\n     */\n    hasAsyncValidator(validator) {\n        return hasValidator(this._rawAsyncValidators, validator);\n    }\n    /**\n     * Empties out the synchronous validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    clearValidators() {\n        this.validator = null;\n    }\n    /**\n     * Empties out the async validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    clearAsyncValidators() {\n        this.asyncValidator = null;\n    }\n    markAsTouched(opts = {}) {\n        const changed = this.touched === false;\n        this.touched = true;\n        const sourceControl = opts.sourceControl ?? this;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched({ ...opts, sourceControl });\n        }\n        if (changed && opts.emitEvent !== false) {\n            this._events.next(new TouchedChangeEvent(true, sourceControl));\n        }\n    }\n    /**\n     * Marks the control and all its descendant controls as `touched`.\n     * @see {@link markAsTouched()}\n     *\n     * @param opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `emitEvent`: When true or not supplied (the default), the `events`\n     * observable emits a `TouchedChangeEvent` with the `touched` property being `true`.\n     * When false, no events are emitted.\n     */\n    markAllAsTouched(opts = {}) {\n        this.markAsTouched({ onlySelf: true, emitEvent: opts.emitEvent, sourceControl: this });\n        this._forEachChild((control) => control.markAllAsTouched(opts));\n    }\n    markAsUntouched(opts = {}) {\n        const changed = this.touched === true;\n        this.touched = false;\n        this._pendingTouched = false;\n        const sourceControl = opts.sourceControl ?? this;\n        this._forEachChild((control) => {\n            control.markAsUntouched({ onlySelf: true, emitEvent: opts.emitEvent, sourceControl });\n        });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts, sourceControl);\n        }\n        if (changed && opts.emitEvent !== false) {\n            this._events.next(new TouchedChangeEvent(false, sourceControl));\n        }\n    }\n    markAsDirty(opts = {}) {\n        const changed = this.pristine === true;\n        this.pristine = false;\n        const sourceControl = opts.sourceControl ?? this;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty({ ...opts, sourceControl });\n        }\n        if (changed && opts.emitEvent !== false) {\n            this._events.next(new PristineChangeEvent(false, sourceControl));\n        }\n    }\n    markAsPristine(opts = {}) {\n        const changed = this.pristine === false;\n        this.pristine = true;\n        this._pendingDirty = false;\n        const sourceControl = opts.sourceControl ?? this;\n        this._forEachChild((control) => {\n            /** We don't propagate the source control downwards */\n            control.markAsPristine({ onlySelf: true, emitEvent: opts.emitEvent });\n        });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts, sourceControl);\n        }\n        if (changed && opts.emitEvent !== false) {\n            this._events.next(new PristineChangeEvent(true, sourceControl));\n        }\n    }\n    markAsPending(opts = {}) {\n        this.status = PENDING;\n        const sourceControl = opts.sourceControl ?? this;\n        if (opts.emitEvent !== false) {\n            this._events.next(new StatusChangeEvent(this.status, sourceControl));\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending({ ...opts, sourceControl });\n        }\n    }\n    disable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        this.status = DISABLED;\n        this.errors = null;\n        this._forEachChild((control) => {\n            /** We don't propagate the source control downwards */\n            control.disable({ ...opts, onlySelf: true });\n        });\n        this._updateValue();\n        const sourceControl = opts.sourceControl ?? this;\n        if (opts.emitEvent !== false) {\n            this._events.next(new ValueChangeEvent(this.value, sourceControl));\n            this._events.next(new StatusChangeEvent(this.status, sourceControl));\n            this.valueChanges.emit(this.value);\n            this.statusChanges.emit(this.status);\n        }\n        this._updateAncestors({ ...opts, skipPristineCheck }, this);\n        this._onDisabledChange.forEach((changeFn) => changeFn(true));\n    }\n    /**\n     * Enables the control. This means the control is included in validation checks and\n     * the aggregate value of its parent. Its status recalculates based on its value and\n     * its validators.\n     *\n     * By default, if the control has children, all children are enabled.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @param opts Configure options that control how the control propagates changes and\n     * emits events when marked as untouched\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`,\n     * `valueChanges` and `events`\n     * observables emit events with the latest status and value when the control is enabled.\n     * When false, no events are emitted.\n     */\n    enable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        this.status = VALID;\n        this._forEachChild((control) => {\n            control.enable({ ...opts, onlySelf: true });\n        });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors({ ...opts, skipPristineCheck }, this);\n        this._onDisabledChange.forEach((changeFn) => changeFn(false));\n    }\n    _updateAncestors(opts, sourceControl) {\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n            if (!opts.skipPristineCheck) {\n                this._parent._updatePristine({}, sourceControl);\n            }\n            this._parent._updateTouched({}, sourceControl);\n        }\n    }\n    /**\n     * Sets the parent of the control\n     *\n     * @param parent The new parent.\n     */\n    setParent(parent) {\n        this._parent = parent;\n    }\n    /**\n     * The raw value of this control. For most control implementations, the raw value will include\n     * disabled children.\n     */\n    getRawValue() {\n        return this.value;\n    }\n    updateValueAndValidity(opts = {}) {\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            const shouldHaveEmitted = this._cancelExistingSubscription();\n            this.errors = this._runValidator();\n            this.status = this._calculateStatus();\n            if (this.status === VALID || this.status === PENDING) {\n                // If the canceled subscription should have emitted\n                // we make sure the async validator emits the status change on completion\n                this._runAsyncValidator(shouldHaveEmitted, opts.emitEvent);\n            }\n        }\n        const sourceControl = opts.sourceControl ?? this;\n        if (opts.emitEvent !== false) {\n            this._events.next(new ValueChangeEvent(this.value, sourceControl));\n            this._events.next(new StatusChangeEvent(this.status, sourceControl));\n            this.valueChanges.emit(this.value);\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity({ ...opts, sourceControl });\n        }\n    }\n    /** @internal */\n    _updateTreeValidity(opts = { emitEvent: true }) {\n        this._forEachChild((ctrl) => ctrl._updateTreeValidity(opts));\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    }\n    _setInitialStatus() {\n        this.status = this._allControlsDisabled() ? DISABLED : VALID;\n    }\n    _runValidator() {\n        return this.validator ? this.validator(this) : null;\n    }\n    _runAsyncValidator(shouldHaveEmitted, emitEvent) {\n        if (this.asyncValidator) {\n            this.status = PENDING;\n            this._hasOwnPendingAsyncValidator = { emitEvent: emitEvent !== false };\n            const obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription = obs.subscribe((errors) => {\n                this._hasOwnPendingAsyncValidator = null;\n                // This will trigger the recalculation of the validation status, which depends on\n                // the state of the asynchronous validation (whether it is in progress or not). So, it is\n                // necessary that we have updated the `_hasOwnPendingAsyncValidator` boolean flag first.\n                this.setErrors(errors, { emitEvent, shouldHaveEmitted });\n            });\n        }\n    }\n    _cancelExistingSubscription() {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n            // we're cancelling the validator subscribtion, we keep if it should have emitted\n            // because we want to emit eventually if it was required at least once.\n            const shouldHaveEmitted = this._hasOwnPendingAsyncValidator?.emitEvent ?? false;\n            this._hasOwnPendingAsyncValidator = null;\n            return shouldHaveEmitted;\n        }\n        return false;\n    }\n    setErrors(errors, opts = {}) {\n        this.errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false, this, opts.shouldHaveEmitted);\n    }\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * @param path A dot-delimited string or array of string/number values that define the path to the\n     * control. If a string is provided, passing it as a string literal will result in improved type\n     * information. Likewise, if an array is provided, passing it `as const` will cause improved type\n     * information to be available.\n     *\n     * @usageNotes\n     * ### Retrieve a nested control\n     *\n     * For example, to get a `name` control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name'] as const);` // `as const` gives improved typings\n     *\n     * ### Retrieve a control in a FormArray\n     *\n     * When accessing an element inside a FormArray, you can use an element index.\n     * For example, to get a `price` control from the first element in an `items` array you can use:\n     *\n     * * `this.form.get('items.0.price');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['items', 0, 'price']);`\n     */\n    get(path) {\n        let currPath = path;\n        if (currPath == null)\n            return null;\n        if (!Array.isArray(currPath))\n            currPath = currPath.split('.');\n        if (currPath.length === 0)\n            return null;\n        return currPath.reduce((control, name) => control && control._find(name), this);\n    }\n    /**\n     * @description\n     * Reports error data for the control with the given path.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @returns error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        const control = path ? this.get(path) : this;\n        return control && control.errors ? control.errors[errorCode] : null;\n    }\n    /**\n     * @description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @returns whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return !!this.getError(errorCode, path);\n    }\n    /**\n     * Retrieves the top-level ancestor of this control.\n     */\n    get root() {\n        let x = this;\n        while (x._parent) {\n            x = x._parent;\n        }\n        return x;\n    }\n    /** @internal */\n    _updateControlsErrors(emitEvent, changedControl, shouldHaveEmitted) {\n        this.status = this._calculateStatus();\n        if (emitEvent) {\n            this.statusChanges.emit(this.status);\n        }\n        // The Events Observable expose a slight different bevahior than the statusChanges obs\n        // An async validator will still emit a StatusChangeEvent is a previously cancelled\n        // async validator has emitEvent set to true\n        if (emitEvent || shouldHaveEmitted) {\n            this._events.next(new StatusChangeEvent(this.status, changedControl));\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent, changedControl, shouldHaveEmitted);\n        }\n    }\n    /** @internal */\n    _initObservables() {\n        this.valueChanges = new EventEmitter();\n        this.statusChanges = new EventEmitter();\n    }\n    _calculateStatus() {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this.errors)\n            return INVALID;\n        if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    }\n    /** @internal */\n    _anyControlsHaveStatus(status) {\n        return this._anyControls((control) => control.status === status);\n    }\n    /** @internal */\n    _anyControlsDirty() {\n        return this._anyControls((control) => control.dirty);\n    }\n    /** @internal */\n    _anyControlsTouched() {\n        return this._anyControls((control) => control.touched);\n    }\n    /** @internal */\n    _updatePristine(opts, changedControl) {\n        const newPristine = !this._anyControlsDirty();\n        const changed = this.pristine !== newPristine;\n        this.pristine = newPristine;\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts, changedControl);\n        }\n        if (changed) {\n            this._events.next(new PristineChangeEvent(this.pristine, changedControl));\n        }\n    }\n    /** @internal */\n    _updateTouched(opts = {}, changedControl) {\n        this.touched = this._anyControlsTouched();\n        this._events.next(new TouchedChangeEvent(this.touched, changedControl));\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts, changedControl);\n        }\n    }\n    /** @internal */\n    _registerOnCollectionChange(fn) {\n        this._onCollectionChange = fn;\n    }\n    /** @internal */\n    _setUpdateStrategy(opts) {\n        if (isOptionsObj(opts) && opts.updateOn != null) {\n            this._updateOn = opts.updateOn;\n        }\n    }\n    /**\n     * Check to see if parent has been marked artificially dirty.\n     *\n     * @internal\n     */\n    _parentMarkedDirty(onlySelf) {\n        const parentDirty = this._parent && this._parent.dirty;\n        return !onlySelf && !!parentDirty && !this._parent._anyControlsDirty();\n    }\n    /** @internal */\n    _find(name) {\n        return null;\n    }\n    /**\n     * Internal implementation of the `setValidators` method. Needs to be separated out into a\n     * different method, because it is called in the constructor and it can break cases where\n     * a control is extended.\n     */\n    _assignValidators(validators) {\n        this._rawValidators = Array.isArray(validators) ? validators.slice() : validators;\n        this._composedValidatorFn = coerceToValidator(this._rawValidators);\n    }\n    /**\n     * Internal implementation of the `setAsyncValidators` method. Needs to be separated out into a\n     * different method, because it is called in the constructor and it can break cases where\n     * a control is extended.\n     */\n    _assignAsyncValidators(validators) {\n        this._rawAsyncValidators = Array.isArray(validators) ? validators.slice() : validators;\n        this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);\n    }\n}\n\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the four fundamental building blocks used to define forms in Angular,\n * along with `FormControl`, `FormArray`, and `FormRecord`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * `FormGroup` is intended for use cases where the keys are known ahead of time.\n * If you need to dynamically add and remove controls, use {@link FormRecord} instead.\n *\n * `FormGroup` accepts an optional type parameter `TControl`, which is an object type with inner\n * control types as values.\n *\n * @usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### The type argument, and optional controls\n *\n * `FormGroup` accepts one generic argument, which is an object containing its inner controls.\n * This type will usually be inferred automatically, but you can always specify it explicitly if you\n * wish.\n *\n * If you have controls that are optional (i.e. they can be removed, you can use the `?` in the\n * type):\n *\n * ```\n * const form = new FormGroup<{\n *   first: FormControl<string|null>,\n *   middle?: FormControl<string|null>, // Middle name is optional.\n *   last: FormControl<string|null>,\n * }>({\n *   first: new FormControl('Nancy'),\n *   last: new FormControl('Drew'),\n * });\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n *\n * ### Using a FormGroup with optional controls\n *\n * It is possible to have optional controls in a FormGroup. An optional control can be removed later\n * using `removeControl`, and can be omitted when calling `reset`. Optional controls must be\n * declared optional in the group's type.\n *\n * ```ts\n * const c = new FormGroup<{one?: FormControl<string>}>({\n *   one: new FormControl('')\n * });\n * ```\n *\n * Notice that `c.value.one` has type `string|null|undefined`. This is because calling `c.reset({})`\n * without providing the optional key `one` will cause it to become `null`.\n *\n * @publicApi\n */\nclass FormGroup extends AbstractControl {\n    /**\n     * Creates a new `FormGroup` instance.\n     *\n     * @param controls A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n        (typeof ngDevMode === 'undefined' || ngDevMode) && validateFormGroupControls(controls);\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({\n            onlySelf: true,\n            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n            // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,\n            // so we set `emitEvent` to `true` to allow that during the control creation process.\n            emitEvent: !!this.asyncValidator,\n        });\n    }\n    registerControl(name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    }\n    addControl(name, control, options = {}) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    /**\n     * Remove a control from this group. In a strongly-typed group, required controls cannot be\n     * removed.\n     *\n     * This method also updates the value and validity of the control.\n     *\n     * @param name The control name to remove from the collection\n     * @param options Specifies whether this FormGroup instance should emit events after a\n     *     control is removed.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * removed. When false, no events are emitted.\n     */\n    removeControl(name, options = {}) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete this.controls[name];\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    setControl(name, control, options = {}) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete this.controls[name];\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    contains(controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    }\n    /**\n     * Sets the value of the `FormGroup`. It accepts an object that matches\n     * the structure of the group, with control names as keys.\n     *\n     * @usageNotes\n     * ### Set the complete value for the form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl(),\n     *   last: new FormControl()\n     * });\n     *\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.setValue({first: 'Nancy', last: 'Drew'});\n     * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     * ```\n     *\n     * @throws When strict checks fail, such as setting the value of a control\n     * that doesn't exist or if you exclude a value of a control that does exist.\n     *\n     * @param value The new value for the control that matches the structure of the group.\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     */\n    setValue(value, options = {}) {\n        assertAllValuesPresent(this, true, value);\n        Object.keys(value).forEach((name) => {\n            assertControlPresent(this, true, name);\n            this.controls[name].setValue(value[name], {\n                onlySelf: true,\n                emitEvent: options.emitEvent,\n            });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormGroup`. It accepts an object with control\n     * names as keys, and does its best to match the values to the correct controls\n     * in the group.\n     *\n     * It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     * @usageNotes\n     * ### Patch the value for a form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *    first: new FormControl(),\n     *    last: new FormControl()\n     * });\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.patchValue({first: 'Nancy'});\n     * console.log(form.value);   // {first: 'Nancy', last: null}\n     * ```\n     *\n     * @param value The object that matches the structure of the group.\n     * @param options Configuration options that determine how the control propagates changes and\n     * emits events after the value is patched.\n     * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n     * true.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control value\n     * is updated. When false, no events are emitted. The configuration options are passed to\n     * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.\n     */\n    patchValue(value, options = {}) {\n        // Even though the `value` argument type doesn't allow `null` and `undefined` values, the\n        // `patchValue` can be called recursively and inner data structures might have these values, so\n        // we just ignore such cases when a field containing FormGroup instance receives `null` or\n        // `undefined` as a value.\n        if (value == null /* both `null` and `undefined` */)\n            return;\n        Object.keys(value).forEach((name) => {\n            // The compiler cannot see through the uninstantiated conditional type of `this.controls`, so\n            // `as any` is required.\n            const control = this.controls[name];\n            if (control) {\n                control.patchValue(\n                /* Guaranteed to be present, due to the outer forEach. */ value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets\n     * the value of all descendants to their default values, or null if no defaults were provided.\n     *\n     * You reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * is a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * @param value Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events when the group is reset.\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * @usageNotes\n     *\n     * ### Reset the form group values\n     *\n     * ```ts\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * console.log(form.value);  // {first: 'first name', last: 'last name'}\n     *\n     * form.reset({ first: 'name', last: 'last name' });\n     *\n     * console.log(form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * ### Reset the form group values and disabled status\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(form.value);  // {last: 'last'}\n     * console.log(form.get('first').status);  // 'DISABLED'\n     * ```\n     */\n    reset(value = {}, options = {}) {\n        this._forEachChild((control, name) => {\n            control.reset(value ? value[name] : null, {\n                onlySelf: true,\n                emitEvent: options.emitEvent,\n            });\n        });\n        this._updatePristine(options, this);\n        this._updateTouched(options, this);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the `FormGroup`, including any disabled controls.\n     *\n     * Retrieves all values regardless of disabled status.\n     */\n    getRawValue() {\n        return this._reduceChildren({}, (acc, control, name) => {\n            acc[name] = control.getRawValue();\n            return acc;\n        });\n    }\n    /** @internal */\n    _syncPendingControls() {\n        let subtreeUpdated = this._reduceChildren(false, (updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        });\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /** @internal */\n    _forEachChild(cb) {\n        Object.keys(this.controls).forEach((key) => {\n            // The list of controls can change (for ex. controls might be removed) while the loop\n            // is running (as a result of invoking Forms API in `valueChanges` subscription), so we\n            // have to null check before invoking the callback.\n            const control = this.controls[key];\n            control && cb(control, key);\n        });\n    }\n    /** @internal */\n    _setUpControls() {\n        this._forEachChild((control) => {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        });\n    }\n    /** @internal */\n    _updateValue() {\n        this.value = this._reduceValue();\n    }\n    /** @internal */\n    _anyControls(condition) {\n        for (const [controlName, control] of Object.entries(this.controls)) {\n            if (this.contains(controlName) && condition(control)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /** @internal */\n    _reduceValue() {\n        let acc = {};\n        return this._reduceChildren(acc, (acc, control, name) => {\n            if (control.enabled || this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    }\n    /** @internal */\n    _reduceChildren(initValue, fn) {\n        let res = initValue;\n        this._forEachChild((control, name) => {\n            res = fn(res, control, name);\n        });\n        return res;\n    }\n    /** @internal */\n    _allControlsDisabled() {\n        for (const controlName of Object.keys(this.controls)) {\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    }\n    /** @internal */\n    _find(name) {\n        return this.controls.hasOwnProperty(name)\n            ? this.controls[name]\n            : null;\n    }\n}\n/**\n * Will validate that none of the controls has a key with a dot\n * Throws other wise\n */\nfunction validateFormGroupControls(controls) {\n    const invalidKeys = Object.keys(controls).filter((key) => key.includes('.'));\n    if (invalidKeys.length > 0) {\n        // TODO: make this an error once there are no more uses in G3\n        console.warn(`FormGroup keys cannot include \\`.\\`, please replace the keys for: ${invalidKeys.join(',')}.`);\n    }\n}\nconst UntypedFormGroup = FormGroup;\n/**\n * @description\n * Asserts that the given control is an instance of `FormGroup`\n *\n * @publicApi\n */\nconst isFormGroup = (control) => control instanceof FormGroup;\n/**\n * Tracks the value and validity state of a collection of `FormControl` instances, each of which has\n * the same value type.\n *\n * `FormRecord` is very similar to {@link FormGroup}, except it can be used with a dynamic keys,\n * with controls added and removed as needed.\n *\n * `FormRecord` accepts one generic argument, which describes the type of the controls it contains.\n *\n * @usageNotes\n *\n * ```\n * let numbers = new FormRecord({bill: new FormControl('415-123-456')});\n * numbers.addControl('bob', new FormControl('415-234-567'));\n * numbers.removeControl('bill');\n * ```\n *\n * @publicApi\n */\nclass FormRecord extends FormGroup {\n}\n/**\n * @description\n * Asserts that the given control is an instance of `FormRecord`\n *\n * @publicApi\n */\nconst isFormRecord = (control) => control instanceof FormRecord;\n\n/**\n * Token to provide to allow SetDisabledState to always be called when a CVA is added, regardless of\n * whether the control is disabled or enabled.\n *\n * @see {@link FormsModule#withconfig}\n */\nconst CALL_SET_DISABLED_STATE = new InjectionToken('CallSetDisabledState', {\n    providedIn: 'root',\n    factory: () => setDisabledStateDefault,\n});\n/**\n * Whether to use the fixed setDisabledState behavior by default.\n */\nconst setDisabledStateDefault = 'always';\nfunction controlPath(name, parent) {\n    return [...parent.path, name];\n}\n/**\n * Links a Form control and a Form directive by setting up callbacks (such as `onChange`) on both\n * instances. This function is typically invoked when form directive is being initialized.\n *\n * @param control Form control instance that should be linked.\n * @param dir Directive that should be linked with a given control.\n */\nfunction setUpControl(control, dir, callSetDisabledState = setDisabledStateDefault) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!control)\n            _throwError(dir, 'Cannot find control with');\n        if (!dir.valueAccessor)\n            _throwMissingValueAccessorError(dir);\n    }\n    setUpValidators(control, dir);\n    dir.valueAccessor.writeValue(control.value);\n    // The legacy behavior only calls the CVA's `setDisabledState` if the control is disabled.\n    // If the `callSetDisabledState` option is set to `always`, then this bug is fixed and\n    // the method is always called.\n    if (control.disabled || callSetDisabledState === 'always') {\n        dir.valueAccessor.setDisabledState?.(control.disabled);\n    }\n    setUpViewChangePipeline(control, dir);\n    setUpModelChangePipeline(control, dir);\n    setUpBlurPipeline(control, dir);\n    setUpDisabledChangeHandler(control, dir);\n}\n/**\n * Reverts configuration performed by the `setUpControl` control function.\n * Effectively disconnects form control with a given form directive.\n * This function is typically invoked when corresponding form directive is being destroyed.\n *\n * @param control Form control which should be cleaned up.\n * @param dir Directive that should be disconnected from a given control.\n * @param validateControlPresenceOnChange Flag that indicates whether onChange handler should\n *     contain asserts to verify that it's not called once directive is destroyed. We need this flag\n *     to avoid potentially breaking changes caused by better control cleanup introduced in #39235.\n */\nfunction cleanUpControl(control, dir, validateControlPresenceOnChange = true) {\n    const noop = () => {\n        if (validateControlPresenceOnChange && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            _noControlError(dir);\n        }\n    };\n    // The `valueAccessor` field is typically defined on FromControl and FormControlName directive\n    // instances and there is a logic in `selectValueAccessor` function that throws if it's not the\n    // case. We still check the presence of `valueAccessor` before invoking its methods to make sure\n    // that cleanup works correctly if app code or tests are setup to ignore the error thrown from\n    // `selectValueAccessor`. See https://github.com/angular/angular/issues/40521.\n    if (dir.valueAccessor) {\n        dir.valueAccessor.registerOnChange(noop);\n        dir.valueAccessor.registerOnTouched(noop);\n    }\n    cleanUpValidators(control, dir);\n    if (control) {\n        dir._invokeOnDestroyCallbacks();\n        control._registerOnCollectionChange(() => { });\n    }\n}\nfunction registerOnValidatorChange(validators, onChange) {\n    validators.forEach((validator) => {\n        if (validator.registerOnValidatorChange)\n            validator.registerOnValidatorChange(onChange);\n    });\n}\n/**\n * Sets up disabled change handler function on a given form control if ControlValueAccessor\n * associated with a given directive instance supports the `setDisabledState` call.\n *\n * @param control Form control where disabled change handler should be setup.\n * @param dir Corresponding directive instance associated with this control.\n */\nfunction setUpDisabledChangeHandler(control, dir) {\n    if (dir.valueAccessor.setDisabledState) {\n        const onDisabledChange = (isDisabled) => {\n            dir.valueAccessor.setDisabledState(isDisabled);\n        };\n        control.registerOnDisabledChange(onDisabledChange);\n        // Register a callback function to cleanup disabled change handler\n        // from a control instance when a directive is destroyed.\n        dir._registerOnDestroy(() => {\n            control._unregisterOnDisabledChange(onDisabledChange);\n        });\n    }\n}\n/**\n * Sets up sync and async directive validators on provided form control.\n * This function merges validators from the directive into the validators of the control.\n *\n * @param control Form control where directive validators should be setup.\n * @param dir Directive instance that contains validators to be setup.\n */\nfunction setUpValidators(control, dir) {\n    const validators = getControlValidators(control);\n    if (dir.validator !== null) {\n        control.setValidators(mergeValidators(validators, dir.validator));\n    }\n    else if (typeof validators === 'function') {\n        // If sync validators are represented by a single validator function, we force the\n        // `Validators.compose` call to happen by executing the `setValidators` function with\n        // an array that contains that function. We need this to avoid possible discrepancies in\n        // validators behavior, so sync validators are always processed by the `Validators.compose`.\n        // Note: we should consider moving this logic inside the `setValidators` function itself, so we\n        // have consistent behavior on AbstractControl API level. The same applies to the async\n        // validators logic below.\n        control.setValidators([validators]);\n    }\n    const asyncValidators = getControlAsyncValidators(control);\n    if (dir.asyncValidator !== null) {\n        control.setAsyncValidators(mergeValidators(asyncValidators, dir.asyncValidator));\n    }\n    else if (typeof asyncValidators === 'function') {\n        control.setAsyncValidators([asyncValidators]);\n    }\n    // Re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    const onValidatorChange = () => control.updateValueAndValidity();\n    registerOnValidatorChange(dir._rawValidators, onValidatorChange);\n    registerOnValidatorChange(dir._rawAsyncValidators, onValidatorChange);\n}\n/**\n * Cleans up sync and async directive validators on provided form control.\n * This function reverts the setup performed by the `setUpValidators` function, i.e.\n * removes directive-specific validators from a given control instance.\n *\n * @param control Form control from where directive validators should be removed.\n * @param dir Directive instance that contains validators to be removed.\n * @returns true if a control was updated as a result of this action.\n */\nfunction cleanUpValidators(control, dir) {\n    let isControlUpdated = false;\n    if (control !== null) {\n        if (dir.validator !== null) {\n            const validators = getControlValidators(control);\n            if (Array.isArray(validators) && validators.length > 0) {\n                // Filter out directive validator function.\n                const updatedValidators = validators.filter((validator) => validator !== dir.validator);\n                if (updatedValidators.length !== validators.length) {\n                    isControlUpdated = true;\n                    control.setValidators(updatedValidators);\n                }\n            }\n        }\n        if (dir.asyncValidator !== null) {\n            const asyncValidators = getControlAsyncValidators(control);\n            if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {\n                // Filter out directive async validator function.\n                const updatedAsyncValidators = asyncValidators.filter((asyncValidator) => asyncValidator !== dir.asyncValidator);\n                if (updatedAsyncValidators.length !== asyncValidators.length) {\n                    isControlUpdated = true;\n                    control.setAsyncValidators(updatedAsyncValidators);\n                }\n            }\n        }\n    }\n    // Clear onValidatorChange callbacks by providing a noop function.\n    const noop = () => { };\n    registerOnValidatorChange(dir._rawValidators, noop);\n    registerOnValidatorChange(dir._rawAsyncValidators, noop);\n    return isControlUpdated;\n}\nfunction setUpViewChangePipeline(control, dir) {\n    dir.valueAccessor.registerOnChange((newValue) => {\n        control._pendingValue = newValue;\n        control._pendingChange = true;\n        control._pendingDirty = true;\n        if (control.updateOn === 'change')\n            updateControl(control, dir);\n    });\n}\nfunction setUpBlurPipeline(control, dir) {\n    dir.valueAccessor.registerOnTouched(() => {\n        control._pendingTouched = true;\n        if (control.updateOn === 'blur' && control._pendingChange)\n            updateControl(control, dir);\n        if (control.updateOn !== 'submit')\n            control.markAsTouched();\n    });\n}\nfunction updateControl(control, dir) {\n    if (control._pendingDirty)\n        control.markAsDirty();\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\n    dir.viewToModelUpdate(control._pendingValue);\n    control._pendingChange = false;\n}\nfunction setUpModelChangePipeline(control, dir) {\n    const onChange = (newValue, emitModelEvent) => {\n        // control -> view\n        dir.valueAccessor.writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    };\n    control.registerOnChange(onChange);\n    // Register a callback function to cleanup onChange handler\n    // from a control instance when a directive is destroyed.\n    dir._registerOnDestroy(() => {\n        control._unregisterOnChange(onChange);\n    });\n}\n/**\n * Links a FormGroup or FormArray instance and corresponding Form directive by setting up validators\n * present in the view.\n *\n * @param control FormGroup or FormArray instance that should be linked.\n * @param dir Directive that provides view validators.\n */\nfunction setUpFormContainer(control, dir) {\n    if (control == null && (typeof ngDevMode === 'undefined' || ngDevMode))\n        _throwError(dir, 'Cannot find control with');\n    setUpValidators(control, dir);\n}\n/**\n * Reverts the setup performed by the `setUpFormContainer` function.\n *\n * @param control FormGroup or FormArray instance that should be cleaned up.\n * @param dir Directive that provided view validators.\n * @returns true if a control was updated as a result of this action.\n */\nfunction cleanUpFormContainer(control, dir) {\n    return cleanUpValidators(control, dir);\n}\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\nfunction _throwError(dir, message) {\n    const messageEnd = _describeControlLocation(dir);\n    throw new Error(`${message} ${messageEnd}`);\n}\nfunction _describeControlLocation(dir) {\n    const path = dir.path;\n    if (path && path.length > 1)\n        return `path: '${path.join(' -> ')}'`;\n    if (path?.[0])\n        return `name: '${path}'`;\n    return 'unspecified name attribute';\n}\nfunction _throwMissingValueAccessorError(dir) {\n    const loc = _describeControlLocation(dir);\n    throw new ɵRuntimeError(-1203 /* RuntimeErrorCode.NG_MISSING_VALUE_ACCESSOR */, `No value accessor for form control ${loc}.`);\n}\nfunction _throwInvalidValueAccessorError(dir) {\n    const loc = _describeControlLocation(dir);\n    throw new ɵRuntimeError(1200 /* RuntimeErrorCode.NG_VALUE_ACCESSOR_NOT_PROVIDED */, `Value accessor was not provided as an array for form control with ${loc}. ` +\n        `Check that the \\`NG_VALUE_ACCESSOR\\` token is configured as a \\`multi: true\\` provider.`);\n}\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    const change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !Object.is(viewModel, change.currentValue);\n}\nfunction isBuiltInAccessor(valueAccessor) {\n    // Check if a given value accessor is an instance of a class that directly extends\n    // `BuiltInControlValueAccessor` one.\n    return Object.getPrototypeOf(valueAccessor.constructor) === BuiltInControlValueAccessor;\n}\nfunction syncPendingControls(form, directives) {\n    form._syncPendingControls();\n    directives.forEach((dir) => {\n        const control = dir.control;\n        if (control.updateOn === 'submit' && control._pendingChange) {\n            dir.viewToModelUpdate(control._pendingValue);\n            control._pendingChange = false;\n        }\n    });\n}\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    if (!Array.isArray(valueAccessors) && (typeof ngDevMode === 'undefined' || ngDevMode))\n        _throwInvalidValueAccessorError(dir);\n    let defaultAccessor = undefined;\n    let builtinAccessor = undefined;\n    let customAccessor = undefined;\n    valueAccessors.forEach((v) => {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor && (typeof ngDevMode === 'undefined' || ngDevMode))\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor && (typeof ngDevMode === 'undefined' || ngDevMode))\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    });\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _throwError(dir, 'No valid value accessor for form control with');\n    }\n    return null;\n}\nfunction removeListItem$1(list, el) {\n    const index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n// TODO(kara): remove after deprecation period\nfunction _ngModelWarning(name, type, instance, warningConfig) {\n    if (warningConfig === 'never')\n        return;\n    if (((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||\n        (warningConfig === 'always' && !instance._ngModelWarningSent)) {\n        console.warn(ngModelWarning(name));\n        type._ngModelWarningSentOnce = true;\n        instance._ngModelWarningSent = true;\n    }\n}\n\nconst formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgForm),\n};\nconst resolvedPromise$1 = (() => Promise.resolve())();\n/**\n * @description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * @usageNotes\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * ### Native DOM validation UI\n *\n * In order to prevent the native DOM form validation UI from interfering with Angular's form\n * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever\n * `FormModule` or `ReactiveFormModule` are imported into the application.\n * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the\n * `ngNativeValidate` attribute to the `<form>` element:\n *\n * ```html\n * <form ngNativeValidate>\n *   ...\n * </form>\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgForm extends ControlContainer {\n    /**\n     * @description\n     * Returns whether the form submission has been triggered.\n     */\n    get submitted() {\n        return untracked(this.submittedReactive);\n    }\n    constructor(validators, asyncValidators, callSetDisabledState) {\n        super();\n        this.callSetDisabledState = callSetDisabledState;\n        /** @internal */\n        this._submitted = computed(() => this.submittedReactive());\n        this.submittedReactive = signal(false);\n        this._directives = new Set();\n        /**\n         * @description\n         * Event emitter for the \"ngSubmit\" event\n         */\n        this.ngSubmit = new EventEmitter();\n        this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n    }\n    /** @nodoc */\n    ngAfterViewInit() {\n        this._setUpdateStrategy();\n    }\n    /**\n     * @description\n     * The directive instance.\n     */\n    get formDirective() {\n        return this;\n    }\n    /**\n     * @description\n     * The internal `FormGroup` instance.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it is always an empty array.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * Returns a map of the controls in this group.\n     */\n    get controls() {\n        return this.form.controls;\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    addControl(dir) {\n        resolvedPromise$1.then(() => {\n            const container = this._findContainer(dir.path);\n            dir.control = (container.registerControl(dir.name, dir.control));\n            setUpControl(dir.control, dir, this.callSetDisabledState);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            this._directives.add(dir);\n        });\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    getControl(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `NgModel` instance from the internal list of directives\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    removeControl(dir) {\n        resolvedPromise$1.then(() => {\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            this._directives.delete(dir);\n        });\n    }\n    /**\n     * @description\n     * Adds a new `NgModelGroup` directive instance to the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    addFormGroup(dir) {\n        resolvedPromise$1.then(() => {\n            const container = this._findContainer(dir.path);\n            const group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    }\n    /**\n     * @description\n     * Removes the `NgModelGroup` directive instance from the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    removeFormGroup(dir) {\n        resolvedPromise$1.then(() => {\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    getFormGroup(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `NgControl` directive.\n     *\n     * @param dir The `NgControl` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n        resolvedPromise$1.then(() => {\n            const ctrl = this.form.get(dir.path);\n            ctrl.setValue(value);\n        });\n    }\n    /**\n     * @description\n     * Sets the value for this `FormGroup`.\n     *\n     * @param value The new value\n     */\n    setValue(value) {\n        this.control.setValue(value);\n    }\n    /**\n     * @description\n     * Method called when the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n        this.submittedReactive.set(true);\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        // Forms with `method=\"dialog\"` have some special behavior\n        // that won't reload the page and that shouldn't be prevented.\n        return $event?.target?.method === 'dialog';\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n        this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form.\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        this.submittedReactive.set(false);\n    }\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    }\n    _findContainer(path) {\n        path.pop();\n        return path.length ? this.form.get(path) : this.form;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NgForm, deps: [{ token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: NgForm, selector: \"form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]\", inputs: { options: [\"ngFormOptions\", \"options\"] }, outputs: { ngSubmit: \"ngSubmit\" }, host: { listeners: { \"submit\": \"onSubmit($event)\", \"reset\": \"onReset()\" } }, providers: [formDirectiveProvider$1], exportAs: [\"ngForm\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NgForm, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]',\n                    providers: [formDirectiveProvider$1],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    outputs: ['ngSubmit'],\n                    exportAs: 'ngForm',\n                }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CALL_SET_DISABLED_STATE]\n                }] }], propDecorators: { options: [{\n                type: Input,\n                args: ['ngFormOptions']\n            }] } });\n\nfunction removeListItem(list, el) {\n    const index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n\nfunction isFormControlState(formState) {\n    return (typeof formState === 'object' &&\n        formState !== null &&\n        Object.keys(formState).length === 2 &&\n        'value' in formState &&\n        'disabled' in formState);\n}\nconst FormControl = class FormControl extends AbstractControl {\n    constructor(\n    // formState and defaultValue will only be null if T is nullable\n    formState = null, validatorOrOpts, asyncValidator) {\n        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n        /** @publicApi */\n        this.defaultValue = null;\n        /** @internal */\n        this._onChange = [];\n        /** @internal */\n        this._pendingChange = false;\n        this._applyFormState(formState);\n        this._setUpdateStrategy(validatorOrOpts);\n        this._initObservables();\n        this.updateValueAndValidity({\n            onlySelf: true,\n            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n            // `VALID` or `INVALID`.\n            // The status should be broadcasted via the `statusChanges` observable, so we set\n            // `emitEvent` to `true` to allow that during the control creation process.\n            emitEvent: !!this.asyncValidator,\n        });\n        if (isOptionsObj(validatorOrOpts) &&\n            (validatorOrOpts.nonNullable || validatorOrOpts.initialValueIsDefault)) {\n            if (isFormControlState(formState)) {\n                this.defaultValue = formState.value;\n            }\n            else {\n                this.defaultValue = formState;\n            }\n        }\n    }\n    setValue(value, options = {}) {\n        this.value = this._pendingValue = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach((changeFn) => changeFn(this.value, options.emitViewToModelChange !== false));\n        }\n        this.updateValueAndValidity(options);\n    }\n    patchValue(value, options = {}) {\n        this.setValue(value, options);\n    }\n    reset(formState = this.defaultValue, options = {}) {\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this.value, options);\n        this._pendingChange = false;\n    }\n    /**  @internal */\n    _updateValue() { }\n    /**  @internal */\n    _anyControls(condition) {\n        return false;\n    }\n    /**  @internal */\n    _allControlsDisabled() {\n        return this.disabled;\n    }\n    registerOnChange(fn) {\n        this._onChange.push(fn);\n    }\n    /** @internal */\n    _unregisterOnChange(fn) {\n        removeListItem(this._onChange, fn);\n    }\n    registerOnDisabledChange(fn) {\n        this._onDisabledChange.push(fn);\n    }\n    /** @internal */\n    _unregisterOnDisabledChange(fn) {\n        removeListItem(this._onDisabledChange, fn);\n    }\n    /** @internal */\n    _forEachChild(cb) { }\n    /** @internal */\n    _syncPendingControls() {\n        if (this.updateOn === 'submit') {\n            if (this._pendingDirty)\n                this.markAsDirty();\n            if (this._pendingTouched)\n                this.markAsTouched();\n            if (this._pendingChange) {\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\n                return true;\n            }\n        }\n        return false;\n    }\n    _applyFormState(formState) {\n        if (isFormControlState(formState)) {\n            this.value = this._pendingValue = formState.value;\n            formState.disabled\n                ? this.disable({ onlySelf: true, emitEvent: false })\n                : this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            this.value = this._pendingValue = formState;\n        }\n    }\n};\nconst UntypedFormControl = FormControl;\n/**\n * @description\n * Asserts that the given control is an instance of `FormControl`\n *\n * @publicApi\n */\nconst isFormControl = (control) => control instanceof FormControl;\n\n/**\n * @description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n * @publicApi\n */\nclass AbstractFormGroupDirective extends ControlContainer {\n    /** @nodoc */\n    ngOnInit() {\n        this._checkParentType();\n        // Register the group with its parent group.\n        this.formDirective.addFormGroup(this);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            // Remove the group from its parent group.\n            this.formDirective.removeFormGroup(this);\n        }\n    }\n    /**\n     * @description\n     * The `FormGroup` bound to this directive.\n     */\n    get control() {\n        return this.formDirective.getFormGroup(this);\n    }\n    /**\n     * @description\n     * The path to this group from the top-level directive.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /** @internal */\n    _checkParentType() { }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: AbstractFormGroupDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: AbstractFormGroupDirective, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: AbstractFormGroupDirective, decorators: [{\n            type: Directive\n        }] });\n\nfunction modelParentException() {\n    return new ɵRuntimeError(1350 /* RuntimeErrorCode.NGMODEL_IN_FORM_GROUP */, `\n    ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n    formGroup's partner directive \"formControlName\" instead.  Example:\n\n    ${formControlNameExample}\n\n    Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n    Example:\n\n    ${ngModelWithFormGroupExample}`);\n}\nfunction formGroupNameException() {\n    return new ɵRuntimeError(1351 /* RuntimeErrorCode.NGMODEL_IN_FORM_GROUP_NAME */, `\n    ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n    Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n    ${formGroupNameExample}\n\n    Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n    ${ngModelGroupExample}`);\n}\nfunction missingNameException() {\n    return new ɵRuntimeError(1352 /* RuntimeErrorCode.NGMODEL_WITHOUT_NAME */, `If ngModel is used within a form tag, either the name attribute must be set or the form\n    control must be defined as 'standalone' in ngModelOptions.\n\n    Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n    Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n}\nfunction modelGroupParentException() {\n    return new ɵRuntimeError(1353 /* RuntimeErrorCode.NGMODELGROUP_IN_FORM_GROUP */, `\n    ngModelGroup cannot be used with a parent formGroup directive.\n\n    Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n    ${formGroupNameExample}\n\n    Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n    ${ngModelGroupExample}`);\n}\n\nconst modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgModelGroup),\n};\n/**\n * @description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * @usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgModelGroup extends AbstractFormGroupDirective {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        /**\n         * @description\n         * Tracks the name of the `NgModelGroup` bound to the directive. The name corresponds\n         * to a key in the parent `NgForm`.\n         */\n        this.name = '';\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @internal */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) &&\n            !(this._parent instanceof NgForm) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw modelGroupParentException();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NgModelGroup, deps: [{ token: ControlContainer, host: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: NgModelGroup, selector: \"[ngModelGroup]\", inputs: { name: [\"ngModelGroup\", \"name\"] }, providers: [modelGroupProvider], exportAs: [\"ngModelGroup\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NgModelGroup, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' }]\n        }], ctorParameters: () => [{ type: ControlContainer, decorators: [{\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }], propDecorators: { name: [{\n                type: Input,\n                args: ['ngModelGroup']\n            }] } });\n\nconst formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: forwardRef(() => NgModel),\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have an old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel`s have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise = (() => Promise.resolve())();\n/**\n * @description\n * Creates a `FormControl` instance from a [domain\n * model](https://en.wikipedia.org/wiki/Domain_model) and binds it to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the domain model's value in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like the validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex:\n * `#myVar=\"ngModel\"`). You can then access the control using the directive's `control` property.\n * However, the most commonly used properties (like `valid` and `dirty`) also exist on the control\n * for direct access. See a full list of properties directly available in\n * `AbstractControlDirective`.\n *\n * @see {@link RadioControlValueAccessor}\n * @see {@link SelectControlValueAccessor}\n *\n * @usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel `name` attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. Here,\n * an attribute identified as name is used within a custom form control component. To still be able\n * to specify the NgModel's name, you must specify it using the `ngModelOptions` input instead.\n *\n * ```html\n * <form>\n *   <my-custom-form-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-custom-form-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgModel extends NgControl {\n    constructor(parent, validators, asyncValidators, valueAccessors, _changeDetectorRef, callSetDisabledState) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this.callSetDisabledState = callSetDisabledState;\n        this.control = new FormControl();\n        /** @internal */\n        this._registered = false;\n        /**\n         * @description\n         * Tracks the name bound to the directive. If a parent form exists, it\n         * uses this name as a key to retrieve this control's value.\n         */\n        this.name = '';\n        /**\n         * @description\n         * Event emitter for producing the `ngModelChange` event after\n         * the view model updates.\n         */\n        this.update = new EventEmitter();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        this._checkForErrors();\n        if (!this._registered || 'name' in changes) {\n            if (this._registered) {\n                this._checkName();\n                if (this.formDirective) {\n                    // We can't call `formDirective.removeControl(this)`, because the `name` has already been\n                    // changed. We also can't reset the name temporarily since the logic in `removeControl`\n                    // is inside a promise and it won't run immediately. We work around it by giving it an\n                    // object with the same shape instead.\n                    const oldName = changes['name'].previousValue;\n                    this.formDirective.removeControl({ name: oldName, path: this._getPath(oldName) });\n                }\n            }\n            this._setUpControl();\n        }\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this.formDirective && this.formDirective.removeControl(this);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return this._getPath(this.name);\n    }\n    /**\n     * @description\n     * The top-level directive for this control if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value emitted by `ngModelChange`.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    _setUpControl() {\n        this._setUpdateStrategy();\n        this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);\n        this._registered = true;\n    }\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    }\n    _isStandalone() {\n        return !this._parent || !!(this.options && this.options.standalone);\n    }\n    _setUpStandalone() {\n        setUpControl(this.control, this, this.callSetDisabledState);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    }\n    _checkForErrors() {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    }\n    _checkParentType() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!(this._parent instanceof NgModelGroup) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                throw formGroupNameException();\n            }\n            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                throw modelParentException();\n            }\n        }\n    }\n    _checkName() {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw missingNameException();\n        }\n    }\n    _updateValue(value) {\n        resolvedPromise.then(() => {\n            this.control.setValue(value, { emitViewToModelChange: false });\n            this._changeDetectorRef?.markForCheck();\n        });\n    }\n    _updateDisabled(changes) {\n        const disabledValue = changes['isDisabled'].currentValue;\n        // checking for 0 to avoid breaking change\n        const isDisabled = disabledValue !== 0 && booleanAttribute(disabledValue);\n        resolvedPromise.then(() => {\n            if (isDisabled && !this.control.disabled) {\n                this.control.disable();\n            }\n            else if (!isDisabled && this.control.disabled) {\n                this.control.enable();\n            }\n            this._changeDetectorRef?.markForCheck();\n        });\n    }\n    _getPath(controlName) {\n        return this._parent ? controlPath(controlName, this._parent) : [controlName];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NgModel, deps: [{ token: ControlContainer, host: true, optional: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }, { token: ChangeDetectorRef, optional: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: { name: \"name\", isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"], options: [\"ngModelOptions\", \"options\"] }, outputs: { update: \"ngModelChange\" }, providers: [formControlBinding$1], exportAs: [\"ngModel\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NgModel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngModel]:not([formControlName]):not([formControl])',\n                    providers: [formControlBinding$1],\n                    exportAs: 'ngModel',\n                }]\n        }], ctorParameters: () => [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALUE_ACCESSOR]\n                }] }, { type: i0.ChangeDetectorRef, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ChangeDetectorRef]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CALL_SET_DISABLED_STATE]\n                }] }], propDecorators: { name: [{\n                type: Input\n            }], isDisabled: [{\n                type: Input,\n                args: ['disabled']\n            }], model: [{\n                type: Input,\n                args: ['ngModel']\n            }], options: [{\n                type: Input,\n                args: ['ngModelOptions']\n            }], update: [{\n                type: Output,\n                args: ['ngModelChange']\n            }] } });\n\n/**\n * @description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * @publicApi\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n */\nclass ɵNgNoValidate {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: ɵNgNoValidate, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\", host: { attributes: { \"novalidate\": \"\" } }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: ɵNgNoValidate, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                    host: { 'novalidate': '' },\n                }]\n        }] });\n\nconst NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberValueAccessor),\n    multi: true,\n};\n/**\n * @description\n * The `ControlValueAccessor` for writing a number value and listening to number input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a number input with a reactive form.\n *\n * The following example shows how to use a number input with a reactive form.\n *\n * ```ts\n * const totalCountControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"number\" [formControl]=\"totalCountControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NumberValueAccessor extends BuiltInControlValueAccessor {\n    /**\n     * Sets the \"value\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        const normalizedValue = value == null ? '' : value;\n        this.setProperty('value', normalizedValue);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => {\n            fn(value == '' ? null : parseFloat(value));\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NumberValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: NumberValueAccessor, selector: \"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]\", host: { listeners: { \"input\": \"onChange($event.target.value)\", \"blur\": \"onTouched()\" } }, providers: [NUMBER_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NumberValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                    host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                    providers: [NUMBER_VALUE_ACCESSOR],\n                }]\n        }] });\n\nconst RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioControlValueAccessor),\n    multi: true,\n};\nfunction throwNameError() {\n    throw new ɵRuntimeError(1202 /* RuntimeErrorCode.NAME_AND_FORM_CONTROL_NAME_MUST_MATCH */, `\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n}\n/**\n * @description\n * Class used by Angular to track radio buttons. For internal use only.\n */\nclass RadioControlRegistry {\n    constructor() {\n        this._accessors = [];\n    }\n    /**\n     * @description\n     * Adds a control to the internal registry. For internal use only.\n     */\n    add(control, accessor) {\n        this._accessors.push([control, accessor]);\n    }\n    /**\n     * @description\n     * Removes a control from the internal registry. For internal use only.\n     */\n    remove(accessor) {\n        for (let i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    }\n    /**\n     * @description\n     * Selects a radio button. For internal use only.\n     */\n    select(accessor) {\n        this._accessors.forEach((c) => {\n            if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    }\n    _isSameGroup(controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return (controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: RadioControlRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: RadioControlRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: RadioControlRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/**\n * @description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass RadioControlValueAccessor extends BuiltInControlValueAccessor {\n    constructor(renderer, elementRef, _registry, _injector) {\n        super(renderer, elementRef);\n        this._registry = _registry;\n        this._injector = _injector;\n        this.setDisabledStateFired = false;\n        /**\n         * The registered callback function called when a change event occurs on the input element.\n         * Note: we declare `onChange` here (also used as host listener) as a function with no arguments\n         * to override the `onChange` function (which expects 1 argument) in the parent\n         * `BaseControlValueAccessor` class.\n         * @nodoc\n         */\n        this.onChange = () => { };\n        this.callSetDisabledState = inject(CALL_SET_DISABLED_STATE, { optional: true }) ?? setDisabledStateDefault;\n    }\n    /** @nodoc */\n    ngOnInit() {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this._registry.remove(this);\n    }\n    /**\n     * Sets the \"checked\" property value on the radio input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this._state = value === this.value;\n        this.setProperty('checked', this._state);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this._fn = fn;\n        this.onChange = () => {\n            fn(this.value);\n            this._registry.select(this);\n        };\n    }\n    /** @nodoc */\n    setDisabledState(isDisabled) {\n        /**\n         * `setDisabledState` is supposed to be called whenever the disabled state of a control changes,\n         * including upon control creation. However, a longstanding bug caused the method to not fire\n         * when an *enabled* control was attached. This bug was fixed in v15 in #47576.\n         *\n         * This had a side effect: previously, it was possible to instantiate a reactive form control\n         * with `[attr.disabled]=true`, even though the corresponding control was enabled in the\n         * model. This resulted in a mismatch between the model and the DOM. Now, because\n         * `setDisabledState` is always called, the value in the DOM will be immediately overwritten\n         * with the \"correct\" enabled value.\n         *\n         * However, the fix also created an exceptional case: radio buttons. Because Reactive Forms\n         * models the entire group of radio buttons as a single `FormControl`, there is no way to\n         * control the disabled state for individual radios, so they can no longer be configured as\n         * disabled. Thus, we keep the old behavior for radio buttons, so that `[attr.disabled]`\n         * continues to work. Specifically, we drop the first call to `setDisabledState` if `disabled`\n         * is `false`, and we are not in legacy mode.\n         */\n        if (this.setDisabledStateFired ||\n            isDisabled ||\n            this.callSetDisabledState === 'whenDisabledForLegacyCode') {\n            this.setProperty('disabled', isDisabled);\n        }\n        this.setDisabledStateFired = true;\n    }\n    /**\n     * Sets the \"value\" on the radio input element and unchecks it.\n     *\n     * @param value\n     */\n    fireUncheck(value) {\n        this.writeValue(value);\n    }\n    _checkName() {\n        if (this.name &&\n            this.formControlName &&\n            this.name !== this.formControlName &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: RadioControlValueAccessor, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: RadioControlRegistry }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: RadioControlValueAccessor, selector: \"input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]\", inputs: { name: \"name\", formControlName: \"formControlName\", value: \"value\" }, host: { listeners: { \"change\": \"onChange()\", \"blur\": \"onTouched()\" } }, providers: [RADIO_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: RadioControlValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                    host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                    providers: [RADIO_VALUE_ACCESSOR],\n                }]\n        }], ctorParameters: () => [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: RadioControlRegistry }, { type: i0.Injector }], propDecorators: { name: [{\n                type: Input\n            }], formControlName: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }] } });\n\nconst RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RangeValueAccessor),\n    multi: true,\n};\n/**\n * @description\n * The `ControlValueAccessor` for writing a range value and listening to range input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a range input with a reactive form\n *\n * The following example shows how to use a range input with a reactive form.\n *\n * ```ts\n * const ageControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"range\" [formControl]=\"ageControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass RangeValueAccessor extends BuiltInControlValueAccessor {\n    /**\n     * Sets the \"value\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.setProperty('value', parseFloat(value));\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => {\n            fn(value == '' ? null : parseFloat(value));\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: RangeValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: RangeValueAccessor, selector: \"input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]\", host: { listeners: { \"change\": \"onChange($event.target.value)\", \"input\": \"onChange($event.target.value)\", \"blur\": \"onTouched()\" } }, providers: [RANGE_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: RangeValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                    host: {\n                        '(change)': 'onChange($event.target.value)',\n                        '(input)': 'onChange($event.target.value)',\n                        '(blur)': 'onTouched()',\n                    },\n                    providers: [RANGE_VALUE_ACCESSOR],\n                }]\n        }] });\n\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\nconst NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken(ngDevMode ? 'NgModelWithFormControlWarning' : '');\nconst formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlDirective),\n};\n/**\n * @description\n * Synchronizes a standalone `FormControl` instance to a form control element.\n *\n * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives was deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link FormControl}\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * The following example shows how to register a standalone control and set its value.\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormControlDirective extends NgControl {\n    /**\n     * @description\n     * Triggers a warning in dev mode that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            console.warn(disabledAttrWarning);\n        }\n    }\n    /**\n     * @description\n     * Static property used to track whether any ngModel warnings have been sent across\n     * all instances of FormControlDirective. Used to support warning config of \"once\".\n     *\n     * @internal\n     */\n    static { this._ngModelWarningSentOnce = false; }\n    constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig, callSetDisabledState) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        this.callSetDisabledState = callSetDisabledState;\n        /** @deprecated as of v6 */\n        this.update = new EventEmitter();\n        /**\n         * @description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n         *\n         * @internal\n         */\n        this._ngModelWarningSent = false;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (this._isControlChanged(changes)) {\n            const previousForm = changes['form'].previousValue;\n            if (previousForm) {\n                cleanUpControl(previousForm, this, /* validateControlPresenceOnChange */ false);\n            }\n            setUpControl(this.form, this, this.callSetDisabledState);\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n            }\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.form) {\n            cleanUpControl(this.form, this, /* validateControlPresenceOnChange */ false);\n        }\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * The `FormControl` bound to this directive.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    _isControlChanged(changes) {\n        return changes.hasOwnProperty('form');\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormControlDirective, deps: [{ token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }, { token: NG_MODEL_WITH_FORM_CONTROL_WARNING, optional: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: FormControlDirective, selector: \"[formControl]\", inputs: { form: [\"formControl\", \"form\"], isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"] }, outputs: { update: \"ngModelChange\" }, providers: [formControlBinding], exportAs: [\"ngForm\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormControlDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formControl]', providers: [formControlBinding], exportAs: 'ngForm' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALUE_ACCESSOR]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CALL_SET_DISABLED_STATE]\n                }] }], propDecorators: { form: [{\n                type: Input,\n                args: ['formControl']\n            }], isDisabled: [{\n                type: Input,\n                args: ['disabled']\n            }], model: [{\n                type: Input,\n                args: ['ngModel']\n            }], update: [{\n                type: Output,\n                args: ['ngModelChange']\n            }] } });\n\nconst formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupDirective),\n};\n/**\n * @description\n *\n * Binds an existing `FormGroup` or `FormRecord` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`/`FormRecord`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link AbstractControl}\n *\n * @usageNotes\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormGroupDirective extends ControlContainer {\n    /**\n     * @description\n     * Reports whether the form submission has been triggered.\n     */\n    get submitted() {\n        return untracked(this._submittedReactive);\n    }\n    // TODO(atscott): Remove once invalid API usage is cleaned up internally\n    set submitted(value) {\n        this._submittedReactive.set(value);\n    }\n    constructor(validators, asyncValidators, callSetDisabledState) {\n        super();\n        this.callSetDisabledState = callSetDisabledState;\n        /** @internal */\n        this._submitted = computed(() => this._submittedReactive());\n        this._submittedReactive = signal(false);\n        /**\n         * Callback that should be invoked when controls in FormGroup or FormArray collection change\n         * (added or removed). This callback triggers corresponding DOM updates.\n         */\n        this._onCollectionChange = () => this._updateDomValue();\n        /**\n         * @description\n         * Tracks the list of added `FormControlName` instances\n         */\n        this.directives = [];\n        /**\n         * @description\n         * Tracks the `FormGroup` bound to this directive.\n         */\n        this.form = null;\n        /**\n         * @description\n         * Emits an event when the form submission has been triggered.\n         */\n        this.ngSubmit = new EventEmitter();\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n            this._oldForm = this.form;\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.form) {\n            cleanUpValidators(this.form, this);\n            // Currently the `onCollectionChange` callback is rewritten each time the\n            // `_registerOnCollectionChange` function is invoked. The implication is that cleanup should\n            // happen *only* when the `onCollectionChange` callback was set by this directive instance.\n            // Otherwise it might cause overriding a callback of some other directive instances. We should\n            // consider updating this logic later to make it similar to how `onChange` callbacks are\n            // handled, see https://github.com/angular/angular/issues/39732 for additional info.\n            if (this.form._onCollectionChange === this._onCollectionChange) {\n                this.form._registerOnCollectionChange(() => { });\n            }\n        }\n    }\n    /**\n     * @description\n     * Returns this directive's instance.\n     */\n    get formDirective() {\n        return this;\n    }\n    /**\n     * @description\n     * Returns the `FormGroup` bound to this directive.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it always an empty array.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    addControl(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir, this.callSetDisabledState);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    getControl(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `FormControlName` instance from the internal list of directives\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    removeControl(dir) {\n        cleanUpControl(dir.control || null, dir, /* validateControlPresenceOnChange */ false);\n        removeListItem$1(this.directives, dir);\n    }\n    /**\n     * Adds a new `FormGroupName` directive instance to the form.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    addFormGroup(dir) {\n        this._setUpFormContainer(dir);\n    }\n    /**\n     * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the\n     * view.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    removeFormGroup(dir) {\n        this._cleanUpFormContainer(dir);\n    }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    getFormGroup(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    addFormArray(dir) {\n        this._setUpFormContainer(dir);\n    }\n    /**\n     * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the\n     * view.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    removeFormArray(dir) {\n        this._cleanUpFormContainer(dir);\n    }\n    /**\n     * @description\n     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    getFormArray(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `FormControlName` directive.\n     *\n     * @param dir The `FormControlName` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n        const ctrl = this.form.get(dir.path);\n        ctrl.setValue(value);\n    }\n    /**\n     * @description\n     * Method called with the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n        this._submittedReactive.set(true);\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        this.form._events.next(new FormSubmittedEvent(this.control));\n        // Forms with `method=\"dialog\"` have some special behavior that won't reload the page and that\n        // shouldn't be prevented. Note that we need to null check the `event` and the `target`, because\n        // some internal apps call this method directly with the wrong arguments.\n        return $event?.target?.method === 'dialog';\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n        this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form.\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        this._submittedReactive.set(false);\n        this.form._events.next(new FormResetEvent(this.form));\n    }\n    /** @internal */\n    _updateDomValue() {\n        this.directives.forEach((dir) => {\n            const oldCtrl = dir.control;\n            const newCtrl = this.form.get(dir.path);\n            if (oldCtrl !== newCtrl) {\n                // Note: the value of the `dir.control` may not be defined, for example when it's a first\n                // `FormControl` that is added to a `FormGroup` instance (via `addControl` call).\n                cleanUpControl(oldCtrl || null, dir);\n                // Check whether new control at the same location inside the corresponding `FormGroup` is an\n                // instance of `FormControl` and perform control setup only if that's the case.\n                // Note: we don't need to clear the list of directives (`this.directives`) here, it would be\n                // taken care of in the `removeControl` method invoked when corresponding `formControlName`\n                // directive instance is being removed (invoked from `FormControlName.ngOnDestroy`).\n                if (isFormControl(newCtrl)) {\n                    setUpControl(newCtrl, dir, this.callSetDisabledState);\n                    dir.control = newCtrl;\n                }\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    }\n    _setUpFormContainer(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        // NOTE: this operation looks unnecessary in case no new validators were added in\n        // `setUpFormContainer` call. Consider updating this code to match the logic in\n        // `_cleanUpFormContainer` function.\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    _cleanUpFormContainer(dir) {\n        if (this.form) {\n            const ctrl = this.form.get(dir.path);\n            if (ctrl) {\n                const isControlUpdated = cleanUpFormContainer(ctrl, dir);\n                if (isControlUpdated) {\n                    // Run validity check only in case a control was updated (i.e. view validators were\n                    // removed) as removing view validators might cause validity to change.\n                    ctrl.updateValueAndValidity({ emitEvent: false });\n                }\n            }\n        }\n    }\n    _updateRegistrations() {\n        this.form._registerOnCollectionChange(this._onCollectionChange);\n        if (this._oldForm) {\n            this._oldForm._registerOnCollectionChange(() => { });\n        }\n    }\n    _updateValidators() {\n        setUpValidators(this.form, this);\n        if (this._oldForm) {\n            cleanUpValidators(this._oldForm, this);\n        }\n    }\n    _checkFormPresent() {\n        if (!this.form && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw missingFormException();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormGroupDirective, deps: [{ token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: FormGroupDirective, selector: \"[formGroup]\", inputs: { form: [\"formGroup\", \"form\"] }, outputs: { ngSubmit: \"ngSubmit\" }, host: { listeners: { \"submit\": \"onSubmit($event)\", \"reset\": \"onReset()\" } }, providers: [formDirectiveProvider], exportAs: [\"ngForm\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormGroupDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[formGroup]',\n                    providers: [formDirectiveProvider],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    exportAs: 'ngForm',\n                }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CALL_SET_DISABLED_STATE]\n                }] }], propDecorators: { form: [{\n                type: Input,\n                args: ['formGroup']\n            }], ngSubmit: [{\n                type: Output\n            }] } });\n\nconst formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupName),\n};\n/**\n * @description\n *\n * Syncs a nested `FormGroup` or `FormRecord` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` or `FormRecord` to link, and\n * looks for a `FormGroup` or `FormRecord` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n *\n * @usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the `AbstractControl.get` method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the `AbstractControl.get` method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormGroupName extends AbstractFormGroupDirective {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        /**\n         * @description\n         * Tracks the name of the `FormGroup` bound to the directive. The name corresponds\n         * to a key in the parent `FormGroup` or `FormArray`.\n         * Accepts a name as a string or a number.\n         * The name in the form of a string is useful for individual forms,\n         * while the numerical form allows for form groups to be bound\n         * to indices when iterating over groups in a `FormArray`.\n         */\n        this.name = null;\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @internal */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw groupParentException();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormGroupName, deps: [{ token: ControlContainer, host: true, optional: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: FormGroupName, selector: \"[formGroupName]\", inputs: { name: [\"formGroupName\", \"name\"] }, providers: [formGroupNameProvider], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormGroupName, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] }]\n        }], ctorParameters: () => [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }], propDecorators: { name: [{\n                type: Input,\n                args: ['formGroupName']\n            }] } });\nconst formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormArrayName),\n};\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormArrayName extends ControlContainer {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        /**\n         * @description\n         * Tracks the name of the `FormArray` bound to the directive. The name corresponds\n         * to a key in the parent `FormGroup` or `FormArray`.\n         * Accepts a name as a string or a number.\n         * The name in the form of a string is useful for individual forms,\n         * while the numerical form allows for form arrays to be bound\n         * to indices when iterating over arrays in a `FormArray`.\n         */\n        this.name = null;\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /**\n     * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n     * @throws If the directive does not have a valid parent.\n     * @nodoc\n     */\n    ngOnInit() {\n        this._checkParentType();\n        this.formDirective.addFormArray(this);\n    }\n    /**\n     * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @nodoc\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    }\n    /**\n     * @description\n     * The `FormArray` bound to this directive.\n     */\n    get control() {\n        return this.formDirective.getFormArray(this);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw arrayParentException();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormArrayName, deps: [{ token: ControlContainer, host: true, optional: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: FormArrayName, selector: \"[formArrayName]\", inputs: { name: [\"formArrayName\", \"name\"] }, providers: [formArrayNameProvider], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormArrayName, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] }]\n        }], ctorParameters: () => [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }], propDecorators: { name: [{\n                type: Input,\n                args: ['formArrayName']\n            }] } });\nfunction _hasInvalidParent(parent) {\n    return (!(parent instanceof FormGroupName) &&\n        !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName));\n}\n\nconst controlNameBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlName),\n};\n/**\n * @description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n * @see {@link FormControl}\n * @see {@link AbstractControl}\n *\n * @usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel is deprecated\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormControlName extends NgControl {\n    /**\n     * @description\n     * Triggers a warning in dev mode that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            console.warn(disabledAttrWarning);\n        }\n    }\n    /**\n     * @description\n     * Static property used to track whether any ngModel warnings have been sent across\n     * all instances of FormControlName. Used to support warning config of \"once\".\n     *\n     * @internal\n     */\n    static { this._ngModelWarningSentOnce = false; }\n    constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        this._added = false;\n        /**\n         * @description\n         * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n         * to a key in the parent `FormGroup` or `FormArray`.\n         * Accepts a name as a string or a number.\n         * The name in the form of a string is useful for individual forms,\n         * while the numerical form allows for form controls to be bound\n         * to indices when iterating over controls in a `FormArray`.\n         */\n        this.name = null;\n        /** @deprecated as of v6 */\n        this.update = new EventEmitter();\n        /**\n         * @description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular FormControlName instance. Used to support warning config of \"always\".\n         *\n         * @internal\n         */\n        this._ngModelWarningSent = false;\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n            }\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    _checkParentType() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!(this._parent instanceof FormGroupName) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                throw ngModelGroupException();\n            }\n            else if (!(this._parent instanceof FormGroupName) &&\n                !(this._parent instanceof FormGroupDirective) &&\n                !(this._parent instanceof FormArrayName)) {\n                throw controlParentException(this.name);\n            }\n        }\n    }\n    _setUpControl() {\n        this._checkParentType();\n        this.control = this.formDirective.addControl(this);\n        this._added = true;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormControlName, deps: [{ token: ControlContainer, host: true, optional: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }, { token: NG_MODEL_WITH_FORM_CONTROL_WARNING, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: FormControlName, selector: \"[formControlName]\", inputs: { name: [\"formControlName\", \"name\"], isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"] }, outputs: { update: \"ngModelChange\" }, providers: [controlNameBinding], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormControlName, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formControlName]', providers: [controlNameBinding] }]\n        }], ctorParameters: () => [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALUE_ACCESSOR]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]\n                }] }], propDecorators: { name: [{\n                type: Input,\n                args: ['formControlName']\n            }], isDisabled: [{\n                type: Input,\n                args: ['disabled']\n            }], model: [{\n                type: Input,\n                args: ['ngModel']\n            }], update: [{\n                type: Output,\n                args: ['ngModelChange']\n            }] } });\n\nconst SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectControlValueAccessor),\n    multi: true,\n};\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * @description\n * The `ControlValueAccessor` for writing select control values and listening to select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using select controls in a reactive form\n *\n * The following examples show how to use a select control in a reactive form.\n *\n * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Using select controls in a template-driven form\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * ### Customizing option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ```ts\n * const selectedCountriesControl = new FormControl();\n * ```\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [formControl]=\"selectedCountriesControl\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * **Note:** We listen to the 'change' event because 'input' events aren't fired\n * for selects in IE, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event#browser_compatibility\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass SelectControlValueAccessor extends BuiltInControlValueAccessor {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this._optionMap = new Map();\n        /** @internal */\n        this._idCounter = 0;\n        this._compareWith = Object.is;\n    }\n    /**\n     * @description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw new ɵRuntimeError(1201 /* RuntimeErrorCode.COMPAREWITH_NOT_A_FN */, `compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * Sets the \"value\" property on the select element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.value = value;\n        const id = this._getOptionId(value);\n        const valueString = _buildValueString$1(id, value);\n        this.setProperty('value', valueString);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (valueString) => {\n            this.value = this._getOptionValue(valueString);\n            fn(this.value);\n        };\n    }\n    /** @internal */\n    _registerOption() {\n        return (this._idCounter++).toString();\n    }\n    /** @internal */\n    _getOptionId(value) {\n        for (const id of this._optionMap.keys()) {\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n        const id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: SelectControlValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: { compareWith: \"compareWith\" }, host: { listeners: { \"change\": \"onChange($event.target.value)\", \"blur\": \"onTouched()\" } }, providers: [SELECT_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: SelectControlValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                    host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_VALUE_ACCESSOR],\n                }]\n        }], propDecorators: { compareWith: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see {@link SelectControlValueAccessor}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgSelectOption {\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    /**\n     * @description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._select._optionMap.set(this.id, value);\n        this._setElementValue(_buildValueString$1(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * @description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     */\n    set value(value) {\n        this._setElementValue(value);\n        if (this._select)\n            this._select.writeValue(this._select.value);\n    }\n    /** @internal */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NgSelectOption, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: SelectControlValueAccessor, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: NgSelectOption, selector: \"option\", inputs: { ngValue: \"ngValue\", value: \"value\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NgSelectOption, decorators: [{\n            type: Directive,\n            args: [{ selector: 'option' }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: SelectControlValueAccessor, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }] }], propDecorators: { ngValue: [{\n                type: Input,\n                args: ['ngValue']\n            }], value: [{\n                type: Input,\n                args: ['value']\n            }] } });\n\nconst SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n    multi: true,\n};\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (typeof value === 'string')\n        value = `'${value}'`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/** Mock interface for HTMLCollection */\nclass HTMLCollection {\n}\n/**\n * @description\n * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select\n * control changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @see {@link SelectControlValueAccessor}\n *\n * @usageNotes\n *\n * ### Using a multi-select control\n *\n * The follow example shows you how to use a multi-select control with a reactive form.\n *\n * ```ts\n * const countryControl = new FormControl();\n * ```\n *\n * ```\n * <select multiple name=\"countries\" [formControl]=\"countryControl\">\n *   <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *     {{ country.name }}\n *   </option>\n * </select>\n * ```\n *\n * ### Customizing option selection\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * See the `SelectControlValueAccessor` for usage.\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass SelectMultipleControlValueAccessor extends BuiltInControlValueAccessor {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this._optionMap = new Map();\n        /** @internal */\n        this._idCounter = 0;\n        this._compareWith = Object.is;\n    }\n    /**\n     * @description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw new ɵRuntimeError(1201 /* RuntimeErrorCode.COMPAREWITH_NOT_A_FN */, `compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * Sets the \"value\" property on one or of more of the select's options.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.value = value;\n        let optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            const ids = value.map((v) => this._getOptionId(v));\n            optionSelectedStateSetter = (opt, o) => {\n                opt._setSelected(ids.indexOf(o.toString()) > -1);\n            };\n        }\n        else {\n            optionSelectedStateSetter = (opt, o) => {\n                opt._setSelected(false);\n            };\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    }\n    /**\n     * Registers a function called when the control value changes\n     * and writes an array of the selected options.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (element) => {\n            const selected = [];\n            const selectedOptions = element.selectedOptions;\n            if (selectedOptions !== undefined) {\n                const options = selectedOptions;\n                for (let i = 0; i < options.length; i++) {\n                    const opt = options[i];\n                    const val = this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            // Degrade to use `options` when `selectedOptions` property is not available.\n            // Note: the `selectedOptions` is available in all supported browsers, but the Domino lib\n            // doesn't have it currently, see https://github.com/fgnass/domino/issues/177.\n            else {\n                const options = element.options;\n                for (let i = 0; i < options.length; i++) {\n                    const opt = options[i];\n                    if (opt.selected) {\n                        const val = this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            this.value = selected;\n            fn(selected);\n        };\n    }\n    /** @internal */\n    _registerOption(value) {\n        const id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    }\n    /** @internal */\n    _getOptionId(value) {\n        for (const id of this._optionMap.keys()) {\n            if (this._compareWith(this._optionMap.get(id)._value, value))\n                return id;\n        }\n        return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n        const id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: SelectMultipleControlValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: SelectMultipleControlValueAccessor, selector: \"select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]\", inputs: { compareWith: \"compareWith\" }, host: { listeners: { \"change\": \"onChange($event.target)\", \"blur\": \"onTouched()\" } }, providers: [SELECT_MULTIPLE_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: SelectMultipleControlValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                    host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_MULTIPLE_VALUE_ACCESSOR],\n                }]\n        }], propDecorators: { compareWith: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see {@link SelectMultipleControlValueAccessor}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass ɵNgSelectMultipleOption {\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    /**\n     * @description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._value = value;\n        this._setElementValue(_buildValueString(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * @description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     */\n    set value(value) {\n        if (this._select) {\n            this._value = value;\n            this._setElementValue(_buildValueString(this.id, value));\n            this._select.writeValue(this._select.value);\n        }\n        else {\n            this._setElementValue(value);\n        }\n    }\n    /** @internal */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /** @internal */\n    _setSelected(selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: ɵNgSelectMultipleOption, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: SelectMultipleControlValueAccessor, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: ɵNgSelectMultipleOption, selector: \"option\", inputs: { ngValue: \"ngValue\", value: \"value\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: ɵNgSelectMultipleOption, decorators: [{\n            type: Directive,\n            args: [{ selector: 'option' }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: SelectMultipleControlValueAccessor, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }] }], propDecorators: { ngValue: [{\n                type: Input,\n                args: ['ngValue']\n            }], value: [{\n                type: Input,\n                args: ['value']\n            }] } });\n\n/**\n * Method that updates string to integer if not already a number\n *\n * @param value The value to convert to integer.\n * @returns value of parameter converted to number or integer.\n */\nfunction toInteger(value) {\n    return typeof value === 'number' ? value : parseInt(value, 10);\n}\n/**\n * Method that ensures that provided value is a float (and converts it to float if needed).\n *\n * @param value The value to convert to float.\n * @returns value of parameter converted to number or float.\n */\nfunction toFloat(value) {\n    return typeof value === 'number' ? value : parseFloat(value);\n}\n/**\n * A base class for Validator-based Directives. The class contains common logic shared across such\n * Directives.\n *\n * For internal use only, this class is not intended for use outside of the Forms package.\n */\nclass AbstractValidatorDirective {\n    constructor() {\n        this._validator = nullValidator;\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (this.inputName in changes) {\n            const input = this.normalizeInput(changes[this.inputName].currentValue);\n            this._enabled = this.enabled(input);\n            this._validator = this._enabled ? this.createValidator(input) : nullValidator;\n            if (this._onChange) {\n                this._onChange();\n            }\n        }\n    }\n    /** @nodoc */\n    validate(control) {\n        return this._validator(control);\n    }\n    /** @nodoc */\n    registerOnValidatorChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * @description\n     * Determines whether this validator should be active or not based on an input.\n     * Base class implementation checks whether an input is defined (if the value is different from\n     * `null` and `undefined`). Validator classes that extend this base class can override this\n     * function with the logic specific to a particular validator directive.\n     */\n    enabled(input) {\n        return input != null /* both `null` and `undefined` */;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: AbstractValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: AbstractValidatorDirective, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: AbstractValidatorDirective, decorators: [{\n            type: Directive\n        }] });\n/**\n * @description\n * Provider which adds `MaxValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MAX_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true,\n};\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `max` attribute.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a max validator\n *\n * The following example shows how to add a max validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"number\" ngModel max=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MaxValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'max';\n        /** @internal */\n        this.normalizeInput = (input) => toFloat(input);\n        /** @internal */\n        this.createValidator = (max) => maxValidator(max);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: MaxValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: MaxValidator, selector: \"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]\", inputs: { max: \"max\" }, host: { properties: { \"attr.max\": \"_enabled ? max : null\" } }, providers: [MAX_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: MaxValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]',\n                    providers: [MAX_VALIDATOR],\n                    host: { '[attr.max]': '_enabled ? max : null' },\n                }]\n        }], propDecorators: { max: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `MinValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MIN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true,\n};\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a min validator\n *\n * The following example shows how to add a min validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"number\" ngModel min=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MinValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'min';\n        /** @internal */\n        this.normalizeInput = (input) => toFloat(input);\n        /** @internal */\n        this.createValidator = (min) => minValidator(min);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: MinValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: MinValidator, selector: \"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]\", inputs: { min: \"min\" }, host: { properties: { \"attr.min\": \"_enabled ? min : null\" } }, providers: [MIN_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: MinValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]',\n                    providers: [MIN_VALIDATOR],\n                    host: { '[attr.min]': '_enabled ? min : null' },\n                }]\n        }], propDecorators: { min: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => RequiredValidator),\n    multi: true,\n};\n/**\n * @description\n * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => CheckboxRequiredValidator),\n    multi: true,\n};\n/**\n * @description\n * A directive that adds the `required` validator to any controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required validator using template-driven forms\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass RequiredValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'required';\n        /** @internal */\n        this.normalizeInput = booleanAttribute;\n        /** @internal */\n        this.createValidator = (input) => requiredValidator;\n    }\n    /** @nodoc */\n    enabled(input) {\n        return input;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: RequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: { required: \"required\" }, host: { properties: { \"attr.required\": \"_enabled ? \\\"\\\" : null\" } }, providers: [REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: RequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                    providers: [REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': '_enabled ? \"\" : null' },\n                }]\n        }], propDecorators: { required: [{\n                type: Input\n            }] } });\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required checkbox validator using template-driven forms\n *\n * The following example shows how to add a checkbox required validator to an input attached to an\n * ngModel binding.\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nclass CheckboxRequiredValidator extends RequiredValidator {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.createValidator = (input) => requiredTrueValidator;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: CheckboxRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: CheckboxRequiredValidator, selector: \"input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]\", host: { properties: { \"attr.required\": \"_enabled ? \\\"\\\" : null\" } }, providers: [CHECKBOX_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: CheckboxRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                    providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': '_enabled ? \"\" : null' },\n                }]\n        }] });\n/**\n * @description\n * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => EmailValidator),\n    multi: true,\n};\n/**\n * A directive that adds the `email` validator to controls marked with the\n * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * The email validation is based on the WHATWG HTML specification with some enhancements to\n * incorporate more RFC rules. More information can be found on the [Validators.email\n * page](api/forms/Validators#email).\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding an email validator\n *\n * The following example shows how to add an email validator to an input attached to an ngModel\n * binding.\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nclass EmailValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'email';\n        /** @internal */\n        this.normalizeInput = booleanAttribute;\n        /** @internal */\n        this.createValidator = (input) => emailValidator;\n    }\n    /** @nodoc */\n    enabled(input) {\n        return input;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: EmailValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: EmailValidator, selector: \"[email][formControlName],[email][formControl],[email][ngModel]\", inputs: { email: \"email\" }, providers: [EMAIL_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: EmailValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                    providers: [EMAIL_VALIDATOR],\n                }]\n        }], propDecorators: { email: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinLengthValidator),\n    multi: true,\n};\n/**\n * A directive that adds minimum length validation to controls marked with the\n * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a minimum length validator\n *\n * The following example shows how to add a minimum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel minlength=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MinLengthValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'minlength';\n        /** @internal */\n        this.normalizeInput = (input) => toInteger(input);\n        /** @internal */\n        this.createValidator = (minlength) => minLengthValidator(minlength);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: MinLengthValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: MinLengthValidator, selector: \"[minlength][formControlName],[minlength][formControl],[minlength][ngModel]\", inputs: { minlength: \"minlength\" }, host: { properties: { \"attr.minlength\": \"_enabled ? minlength : null\" } }, providers: [MIN_LENGTH_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: MinLengthValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                    providers: [MIN_LENGTH_VALIDATOR],\n                    host: { '[attr.minlength]': '_enabled ? minlength : null' },\n                }]\n        }], propDecorators: { minlength: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxLengthValidator),\n    multi: true,\n};\n/**\n * A directive that adds maximum length validation to controls marked with the\n * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a maximum length validator\n *\n * The following example shows how to add a maximum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel maxlength=\"25\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MaxLengthValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'maxlength';\n        /** @internal */\n        this.normalizeInput = (input) => toInteger(input);\n        /** @internal */\n        this.createValidator = (maxlength) => maxLengthValidator(maxlength);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: MaxLengthValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: { maxlength: \"maxlength\" }, host: { properties: { \"attr.maxlength\": \"_enabled ? maxlength : null\" } }, providers: [MAX_LENGTH_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: MaxLengthValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                    providers: [MAX_LENGTH_VALIDATOR],\n                    host: { '[attr.maxlength]': '_enabled ? maxlength : null' },\n                }]\n        }], propDecorators: { maxlength: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => PatternValidator),\n    multi: true,\n};\n/**\n * @description\n * A directive that adds regex pattern validation to controls marked with the\n * `pattern` attribute. The regex must match the entire control value.\n * The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/forms/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a pattern validator\n *\n * The following example shows how to add a pattern validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass PatternValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'pattern';\n        /** @internal */\n        this.normalizeInput = (input) => input;\n        /** @internal */\n        this.createValidator = (input) => patternValidator(input);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: PatternValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0\", type: PatternValidator, selector: \"[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\", inputs: { pattern: \"pattern\" }, host: { properties: { \"attr.pattern\": \"_enabled ? pattern : null\" } }, providers: [PATTERN_VALIDATOR], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: PatternValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                    providers: [PATTERN_VALIDATOR],\n                    host: { '[attr.pattern]': '_enabled ? pattern : null' },\n                }]\n        }], propDecorators: { pattern: [{\n                type: Input\n            }] } });\n\nconst SHARED_FORM_DIRECTIVES = [\n    ɵNgNoValidate,\n    NgSelectOption,\n    ɵNgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n    MinValidator,\n    MaxValidator,\n];\nconst TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\nconst REACTIVE_DRIVEN_DIRECTIVES = [\n    FormControlDirective,\n    FormGroupDirective,\n    FormControlName,\n    FormGroupName,\n    FormArrayName,\n];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nclass ɵInternalFormsSharedModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: ɵInternalFormsSharedModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0\", ngImport: i0, type: ɵInternalFormsSharedModule, declarations: [ɵNgNoValidate,\n            NgSelectOption,\n            ɵNgSelectMultipleOption,\n            DefaultValueAccessor,\n            NumberValueAccessor,\n            RangeValueAccessor,\n            CheckboxControlValueAccessor,\n            SelectControlValueAccessor,\n            SelectMultipleControlValueAccessor,\n            RadioControlValueAccessor,\n            NgControlStatus,\n            NgControlStatusGroup,\n            RequiredValidator,\n            MinLengthValidator,\n            MaxLengthValidator,\n            PatternValidator,\n            CheckboxRequiredValidator,\n            EmailValidator,\n            MinValidator,\n            MaxValidator], exports: [ɵNgNoValidate,\n            NgSelectOption,\n            ɵNgSelectMultipleOption,\n            DefaultValueAccessor,\n            NumberValueAccessor,\n            RangeValueAccessor,\n            CheckboxControlValueAccessor,\n            SelectControlValueAccessor,\n            SelectMultipleControlValueAccessor,\n            RadioControlValueAccessor,\n            NgControlStatus,\n            NgControlStatusGroup,\n            RequiredValidator,\n            MinLengthValidator,\n            MaxLengthValidator,\n            PatternValidator,\n            CheckboxRequiredValidator,\n            EmailValidator,\n            MinValidator,\n            MaxValidator] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: ɵInternalFormsSharedModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: ɵInternalFormsSharedModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: SHARED_FORM_DIRECTIVES,\n                    exports: SHARED_FORM_DIRECTIVES,\n                }]\n        }] });\n\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` accepts one generic argument, which is the type of the controls inside.\n * If you need a heterogenous array, use {@link UntypedFormArray}.\n *\n * `FormArray` is one of the four fundamental building blocks used to define forms in Angular,\n * along with `FormControl`, `FormGroup`, and `FormRecord`.\n *\n * @usageNotes\n *\n * ### Create an array of form controls\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n * @publicApi\n */\nclass FormArray extends AbstractControl {\n    /**\n     * Creates a new `FormArray` instance.\n     *\n     * @param controls An array of child controls. Each child control is given an index\n     * where it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({\n            onlySelf: true,\n            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n            // `VALID` or `INVALID`.\n            // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`\n            // to `true` to allow that during the control creation process.\n            emitEvent: !!this.asyncValidator,\n        });\n    }\n    /**\n     * Get the `AbstractControl` at the given `index` in the array.\n     *\n     * @param index Index in the array to retrieve the control. If `index` is negative, it will wrap\n     *     around from the back, and if index is greatly negative (less than `-length`), the result is\n     * undefined. This behavior is the same as `Array.at(index)`.\n     */\n    at(index) {\n        return this.controls[this._adjustIndex(index)];\n    }\n    /**\n     * Insert a new `AbstractControl` at the end of the array.\n     *\n     * @param control Form control to be inserted\n     * @param options Specifies whether this FormArray instance should emit events after a new\n     *     control is added.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * inserted. When false, no events are emitted.\n     */\n    push(control, options = {}) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    /**\n     * Insert a new `AbstractControl` at the given `index` in the array.\n     *\n     * @param index Index in the array to insert the control. If `index` is negative, wraps around\n     *     from the back. If `index` is greatly negative (less than `-length`), prepends to the array.\n     * This behavior is the same as `Array.splice(index, 0, control)`.\n     * @param control Form control to be inserted\n     * @param options Specifies whether this FormArray instance should emit events after a new\n     *     control is inserted.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * inserted. When false, no events are emitted.\n     */\n    insert(index, control, options = {}) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n    }\n    /**\n     * Remove the control at the given `index` in the array.\n     *\n     * @param index Index in the array to remove the control.  If `index` is negative, wraps around\n     *     from the back. If `index` is greatly negative (less than `-length`), removes the first\n     *     element. This behavior is the same as `Array.splice(index, 1)`.\n     * @param options Specifies whether this FormArray instance should emit events after a\n     *     control is removed.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * removed. When false, no events are emitted.\n     */\n    removeAt(index, options = {}) {\n        // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.\n        let adjustedIndex = this._adjustIndex(index);\n        if (adjustedIndex < 0)\n            adjustedIndex = 0;\n        if (this.controls[adjustedIndex])\n            this.controls[adjustedIndex]._registerOnCollectionChange(() => { });\n        this.controls.splice(adjustedIndex, 1);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param index Index in the array to replace the control. If `index` is negative, wraps around\n     *     from the back. If `index` is greatly negative (less than `-length`), replaces the first\n     *     element. This behavior is the same as `Array.splice(index, 1, control)`.\n     * @param control The `AbstractControl` control to replace the existing control\n     * @param options Specifies whether this FormArray instance should emit events after an\n     *     existing control is replaced with a new one.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * replaced with a new one. When false, no events are emitted.\n     */\n    setControl(index, control, options = {}) {\n        // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.\n        let adjustedIndex = this._adjustIndex(index);\n        if (adjustedIndex < 0)\n            adjustedIndex = 0;\n        if (this.controls[adjustedIndex])\n            this.controls[adjustedIndex]._registerOnCollectionChange(() => { });\n        this.controls.splice(adjustedIndex, 1);\n        if (control) {\n            this.controls.splice(adjustedIndex, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    /**\n     * Length of the control array.\n     */\n    get length() {\n        return this.controls.length;\n    }\n    /**\n     * Sets the value of the `FormArray`. It accepts an array that matches\n     * the structure of the control.\n     *\n     * This method performs strict checks, and throws an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     * @usageNotes\n     * ### Set the values for the controls in the form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl(),\n     *   new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.setValue(['Nancy', 'Drew']);\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * ```\n     *\n     * @param value Array of values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    setValue(value, options = {}) {\n        assertAllValuesPresent(this, false, value);\n        value.forEach((newValue, index) => {\n            assertControlPresent(this, false, index);\n            this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormArray`. It accepts an array that matches the\n     * structure of the control, and does its best to match the values to the correct\n     * controls in the group.\n     *\n     * It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     * @usageNotes\n     * ### Patch the values for controls in a form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.patchValue(['Nancy']);\n     * console.log(arr.value);   // ['Nancy', null]\n     * ```\n     *\n     * @param value Array of latest values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control\n     * value is updated. When false, no events are emitted. The configuration options are passed to\n     * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.\n     */\n    patchValue(value, options = {}) {\n        // Even though the `value` argument type doesn't allow `null` and `undefined` values, the\n        // `patchValue` can be called recursively and inner data structures might have these values,\n        // so we just ignore such cases when a field containing FormArray instance receives `null` or\n        // `undefined` as a value.\n        if (value == null /* both `null` and `undefined` */)\n            return;\n        value.forEach((newValue, index) => {\n            if (this.at(index)) {\n                this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n     * value of all descendants to null or null maps.\n     *\n     * You reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state is a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * @usageNotes\n     * ### Reset the values in a form array\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * arr.reset(['name', 'last name']);\n     *\n     * console.log(arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * ### Reset the values in a form array and the disabled status for the first control\n     *\n     * ```\n     * arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(arr.value);  // ['last']\n     * console.log(arr.at(0).status);  // 'DISABLED'\n     * ```\n     *\n     * @param value Array of values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    reset(value = [], options = {}) {\n        this._forEachChild((control, index) => {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this._updatePristine(options, this);\n        this._updateTouched(options, this);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * Reports all values regardless of disabled status.\n     */\n    getRawValue() {\n        return this.controls.map((control) => control.getRawValue());\n    }\n    /**\n     * Remove all controls in the `FormArray`.\n     *\n     * @param options Specifies whether this FormArray instance should emit events after all\n     *     controls are removed.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when all controls\n     * in this FormArray instance are removed. When false, no events are emitted.\n     *\n     * @usageNotes\n     * ### Remove all elements from a FormArray\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.length);  // 2\n     *\n     * arr.clear();\n     * console.log(arr.length);  // 0\n     * ```\n     *\n     * It's a simpler and more efficient alternative to removing all elements one by one:\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     *\n     * while (arr.length) {\n     *    arr.removeAt(0);\n     * }\n     * ```\n     */\n    clear(options = {}) {\n        if (this.controls.length < 1)\n            return;\n        this._forEachChild((control) => control._registerOnCollectionChange(() => { }));\n        this.controls.splice(0);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n    }\n    /**\n     * Adjusts a negative index by summing it with the length of the array. For very negative\n     * indices, the result may remain negative.\n     * @internal\n     */\n    _adjustIndex(index) {\n        return index < 0 ? index + this.length : index;\n    }\n    /** @internal */\n    _syncPendingControls() {\n        let subtreeUpdated = this.controls.reduce((updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        }, false);\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /** @internal */\n    _forEachChild(cb) {\n        this.controls.forEach((control, index) => {\n            cb(control, index);\n        });\n    }\n    /** @internal */\n    _updateValue() {\n        this.value = this.controls\n            .filter((control) => control.enabled || this.disabled)\n            .map((control) => control.value);\n    }\n    /** @internal */\n    _anyControls(condition) {\n        return this.controls.some((control) => control.enabled && condition(control));\n    }\n    /** @internal */\n    _setUpControls() {\n        this._forEachChild((control) => this._registerControl(control));\n    }\n    /** @internal */\n    _allControlsDisabled() {\n        for (const control of this.controls) {\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    }\n    _registerControl(control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    }\n    /** @internal */\n    _find(name) {\n        return this.at(name) ?? null;\n    }\n}\nconst UntypedFormArray = FormArray;\n/**\n * @description\n * Asserts that the given control is an instance of `FormArray`\n *\n * @publicApi\n */\nconst isFormArray = (control) => control instanceof FormArray;\n\nfunction isAbstractControlOptions(options) {\n    return (!!options &&\n        (options.asyncValidators !== undefined ||\n            options.validators !== undefined ||\n            options.updateOn !== undefined));\n}\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a\n * `FormControl`, `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to\n * build complex forms.\n *\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n *\n * @publicApi\n */\nclass FormBuilder {\n    constructor() {\n        this.useNonNullable = false;\n    }\n    /**\n     * @description\n     * Returns a FormBuilder in which automatically constructed `FormControl` elements\n     * have `{nonNullable: true}` and are non-nullable.\n     *\n     * **Constructing non-nullable controls**\n     *\n     * When constructing a control, it will be non-nullable, and will reset to its initial value.\n     *\n     * ```ts\n     * let nnfb = new FormBuilder().nonNullable;\n     * let name = nnfb.control('Alex'); // FormControl<string>\n     * name.reset();\n     * console.log(name); // 'Alex'\n     * ```\n     *\n     * **Constructing non-nullable groups or arrays**\n     *\n     * When constructing a group or array, all automatically created inner controls will be\n     * non-nullable, and will reset to their initial values.\n     *\n     * ```ts\n     * let nnfb = new FormBuilder().nonNullable;\n     * let name = nnfb.group({who: 'Alex'}); // FormGroup<{who: FormControl<string>}>\n     * name.reset();\n     * console.log(name); // {who: 'Alex'}\n     * ```\n     * **Constructing *nullable* fields on groups or arrays**\n     *\n     * It is still possible to have a nullable field. In particular, any `FormControl` which is\n     * *already* constructed will not be altered. For example:\n     *\n     * ```ts\n     * let nnfb = new FormBuilder().nonNullable;\n     * // FormGroup<{who: FormControl<string|null>}>\n     * let name = nnfb.group({who: new FormControl('Alex')});\n     * name.reset(); console.log(name); // {who: null}\n     * ```\n     *\n     * Because the inner control is constructed explicitly by the caller, the builder has\n     * no control over how it is created, and cannot exclude the `null`.\n     */\n    get nonNullable() {\n        const nnfb = new FormBuilder();\n        nnfb.useNonNullable = true;\n        return nnfb;\n    }\n    group(controls, options = null) {\n        const reducedControls = this._reduceControls(controls);\n        let newOptions = {};\n        if (isAbstractControlOptions(options)) {\n            // `options` are `AbstractControlOptions`\n            newOptions = options;\n        }\n        else if (options !== null) {\n            // `options` are legacy form group options\n            newOptions.validators = options.validator;\n            newOptions.asyncValidators = options.asyncValidator;\n        }\n        return new FormGroup(reducedControls, newOptions);\n    }\n    /**\n     * @description\n     * Constructs a new `FormRecord` instance. Accepts a single generic argument, which is an object\n     * containing all the keys and corresponding inner control types.\n     *\n     * @param controls A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param options Configuration options object for the `FormRecord`. The object should have the\n     * `AbstractControlOptions` type and might contain the following fields:\n     * * `validators`: A synchronous validator function, or an array of validator functions.\n     * * `asyncValidators`: A single async validator or array of async validator functions.\n     * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur'\n     * | submit').\n     */\n    record(controls, options = null) {\n        const reducedControls = this._reduceControls(controls);\n        // Cast to `any` because the inferred types are not as specific as Element.\n        return new FormRecord(reducedControls, options);\n    }\n    /**\n     * @description\n     * Constructs a new `FormControl` with the given state, validators and options. Sets\n     * `{nonNullable: true}` in the options to get a non-nullable control. Otherwise, the\n     * control will be nullable. Accepts a single generic argument, which is the type  of the\n     * control's value.\n     *\n     * @param formState Initializes the control with an initial state value, or\n     * with an object that contains both a value and a disabled status.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or a `FormControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator\n     * functions.\n     *\n     * @usageNotes\n     *\n     * ### Initialize a control as disabled\n     *\n     * The following example returns a control with an initial value in a disabled state.\n     *\n     * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\" region=\"disabled-control\">\n     * </code-example>\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n        let newOptions = {};\n        if (!this.useNonNullable) {\n            return new FormControl(formState, validatorOrOpts, asyncValidator);\n        }\n        if (isAbstractControlOptions(validatorOrOpts)) {\n            // If the second argument is options, then they are copied.\n            newOptions = validatorOrOpts;\n        }\n        else {\n            // If the other arguments are validators, they are copied into an options object.\n            newOptions.validators = validatorOrOpts;\n            newOptions.asyncValidators = asyncValidator;\n        }\n        return new FormControl(formState, { ...newOptions, nonNullable: true });\n    }\n    /**\n     * Constructs a new `FormArray` from the given array of configurations,\n     * validators and options. Accepts a single generic argument, which is the type of each control\n     * inside the array.\n     *\n     * @param controls An array of child controls or control configs. Each child control is given an\n     *     index when it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of such functions, or an\n     *     `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions.\n     */\n    array(controls, validatorOrOpts, asyncValidator) {\n        const createdControls = controls.map((c) => this._createControl(c));\n        // Cast to `any` because the inferred types are not as specific as Element.\n        return new FormArray(createdControls, validatorOrOpts, asyncValidator);\n    }\n    /** @internal */\n    _reduceControls(controls) {\n        const createdControls = {};\n        Object.keys(controls).forEach((controlName) => {\n            createdControls[controlName] = this._createControl(controls[controlName]);\n        });\n        return createdControls;\n    }\n    /** @internal */\n    _createControl(controls) {\n        if (controls instanceof FormControl) {\n            return controls;\n        }\n        else if (controls instanceof AbstractControl) {\n            // A control; just return it\n            return controls;\n        }\n        else if (Array.isArray(controls)) {\n            // ControlConfig Tuple\n            const value = controls[0];\n            const validator = controls.length > 1 ? controls[1] : null;\n            const asyncValidator = controls.length > 2 ? controls[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            // T or FormControlState<T>\n            return this.control(controls);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormBuilder, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormBuilder, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/**\n * @description\n * `NonNullableFormBuilder` is similar to {@link FormBuilder}, but automatically constructed\n * {@link FormControl} elements have `{nonNullable: true}` and are non-nullable.\n *\n * @publicApi\n */\nclass NonNullableFormBuilder {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NonNullableFormBuilder, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NonNullableFormBuilder, providedIn: 'root', useFactory: () => inject(FormBuilder).nonNullable }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: NonNullableFormBuilder, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                    useFactory: () => inject(FormBuilder).nonNullable,\n                }]\n        }] });\n/**\n * UntypedFormBuilder is the same as `FormBuilder`, but it provides untyped controls.\n */\nclass UntypedFormBuilder extends FormBuilder {\n    group(controlsConfig, options = null) {\n        return super.group(controlsConfig, options);\n    }\n    /**\n     * Like `FormBuilder#control`, except the resulting control is untyped.\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n        return super.control(formState, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * Like `FormBuilder#array`, except the resulting array is untyped.\n     */\n    array(controlsConfig, validatorOrOpts, asyncValidator) {\n        return super.array(controlsConfig, validatorOrOpts, asyncValidator);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: UntypedFormBuilder, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: UntypedFormBuilder, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: UntypedFormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the forms package.\n */\n/**\n * @publicApi\n */\nconst VERSION = new Version('18.2.0');\n\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](guide/forms)\n * @see [Template-driven Forms Guide](guide/forms)\n *\n * @publicApi\n */\nclass FormsModule {\n    /**\n     * @description\n     * Provides options for configuring the forms module.\n     *\n     * @param opts An object of configuration options\n     * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more\n     * correct, or to only call it `whenDisabled`, which is the legacy behavior.\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: FormsModule,\n            providers: [\n                {\n                    provide: CALL_SET_DISABLED_STATE,\n                    useValue: opts.callSetDisabledState ?? setDisabledStateDefault,\n                },\n            ],\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0\", ngImport: i0, type: FormsModule, declarations: [NgModel, NgModelGroup, NgForm], exports: [ɵInternalFormsSharedModule, NgModel, NgModelGroup, NgForm] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormsModule, imports: [ɵInternalFormsSharedModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: FormsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                    exports: [ɵInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES],\n                }]\n        }] });\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](guide/forms)\n * @see [Reactive Forms Guide](guide/forms/reactive-forms)\n *\n * @publicApi\n */\nclass ReactiveFormsModule {\n    /**\n     * @description\n     * Provides options for configuring the reactive forms module.\n     *\n     * @param opts An object of configuration options\n     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n     * binding is used with reactive form directives.\n     * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more\n     * correct, or to only call it `whenDisabled`, which is the legacy behavior.\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: ReactiveFormsModule,\n            providers: [\n                {\n                    provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,\n                    useValue: opts.warnOnNgModelWithFormControl ?? 'always',\n                },\n                {\n                    provide: CALL_SET_DISABLED_STATE,\n                    useValue: opts.callSetDisabledState ?? setDisabledStateDefault,\n                },\n            ],\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: ReactiveFormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0\", ngImport: i0, type: ReactiveFormsModule, declarations: [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName], exports: [ɵInternalFormsSharedModule, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: ReactiveFormsModule, imports: [ɵInternalFormsSharedModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0\", ngImport: i0, type: ReactiveFormsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                    exports: [ɵInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES],\n                }]\n        }] });\n\n/**\n * @module\n * @description\n * This module is used for handling user input, by defining and building a `FormGroup` that\n * consists of `FormControl` objects, and mapping them onto the DOM. `FormControl`\n * objects can then be used to read information from the form DOM elements.\n *\n * Forms providers are not included in default providers; you must import these providers\n * explicitly.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractControl, AbstractControlDirective, AbstractFormGroupDirective, COMPOSITION_BUFFER_MODE, CheckboxControlValueAccessor, CheckboxRequiredValidator, ControlContainer, ControlEvent, DefaultValueAccessor, EmailValidator, FormArray, FormArrayName, FormBuilder, FormControl, FormControlDirective, FormControlName, FormGroup, FormGroupDirective, FormGroupName, FormRecord, FormResetEvent, FormSubmittedEvent, FormsModule, MaxLengthValidator, MaxValidator, MinLengthValidator, MinValidator, NG_ASYNC_VALIDATORS, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, NgSelectOption, NonNullableFormBuilder, NumberValueAccessor, PatternValidator, PristineChangeEvent, RadioControlValueAccessor, RangeValueAccessor, ReactiveFormsModule, RequiredValidator, SelectControlValueAccessor, SelectMultipleControlValueAccessor, StatusChangeEvent, TouchedChangeEvent, UntypedFormArray, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, VERSION, Validators, ValueChangeEvent, isFormArray, isFormControl, isFormGroup, isFormRecord, ɵInternalFormsSharedModule, ɵNgNoValidate, ɵNgSelectMultipleOption };\n","import { ConnectableObservable, isObservable, of, Subject } from 'rxjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable } from '@angular/core';\n\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource. We also can't use `isObservable`\n    // here, because of some internal apps.\n    return value && typeof value.connect === 'function' && !(value instanceof ConnectableObservable);\n}\n\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/** Indicates how a view was changed by a {@link _ViewRepeater}. */\nvar _ViewRepeaterOperation;\n(function (_ViewRepeaterOperation) {\n    /** The content of an existing view was replaced with another item. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"REPLACED\"] = 0] = \"REPLACED\";\n    /** A new view was created with `createEmbeddedView`. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"INSERTED\"] = 1] = \"INSERTED\";\n    /** The position of a view changed, but the content remains the same. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"MOVED\"] = 2] = \"MOVED\";\n    /** A view was detached from the view container. */\n    _ViewRepeaterOperation[_ViewRepeaterOperation[\"REMOVED\"] = 3] = \"REMOVED\";\n})(_ViewRepeaterOperation || (_ViewRepeaterOperation = {}));\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = _ViewRepeaterOperation.INSERTED;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = _ViewRepeaterOperation.REMOVED;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = _ViewRepeaterOperation.MOVED;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() { }\n}\n\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;\n            }\n            else if (currentIndex == null) {\n                // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = _ViewRepeaterOperation.REMOVED;\n            }\n            else {\n                // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = _ViewRepeaterOperation.MOVED;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view?.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        this.compareWith = compareWith;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param values The values to select\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param values The values to deselect\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Sets the selected values\n     * @param values The new selected values\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    setSelection(...values) {\n        this._verifyValueAssignment(values);\n        const oldValues = this.selected;\n        const newSelectedSet = new Set(values);\n        values.forEach(value => this._markSelected(value));\n        oldValues\n            .filter(value => !newSelectedSet.has(this._getConcreteValue(value, newSelectedSet)))\n            .forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param value The value to toggle\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    toggle(value) {\n        return this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @param flushEvent Whether to flush the changes in an event.\n     *   If false, the changes to the selection will be flushed along with the next event.\n     * @return Whether the selection changed as a result of this call\n     * @breaking-change 16.0.0 make return type boolean\n     */\n    clear(flushEvent = true) {\n        this._unmarkAll();\n        const changed = this._hasQueuedChanges();\n        if (flushEvent) {\n            this._emitChangeEvent();\n        }\n        return changed;\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(this._getConcreteValue(value));\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit,\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        value = this._getConcreteValue(value);\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            if (!this.isSelected(value)) {\n                this._selection.add(value);\n            }\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        value = this._getConcreteValue(value);\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n    /** Whether there are queued up change to be emitted. */\n    _hasQueuedChanges() {\n        return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n    }\n    /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n    _getConcreteValue(inputValue, selection) {\n        if (!this.compareWith) {\n            return inputValue;\n        }\n        else {\n            selection = selection ?? this._selection;\n            for (let selectedValue of selection) {\n                if (this.compareWith(inputValue, selectedValue)) {\n                    return selectedValue;\n                }\n            }\n            return inputValue;\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: UniqueSelectionDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: UniqueSelectionDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: UniqueSelectionDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, _ViewRepeaterOperation, getMultipleValuesInSingleSelectionError, isDataSource };\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { Subscription } from '../Subscription';\nexport const animationFrameProvider = {\n    schedule(callback) {\n        let request = requestAnimationFrame;\n        let cancel = cancelAnimationFrame;\n        const { delegate } = animationFrameProvider;\n        if (delegate) {\n            request = delegate.requestAnimationFrame;\n            cancel = delegate.cancelAnimationFrame;\n        }\n        const handle = request((timestamp) => {\n            cancel = undefined;\n            callback(timestamp);\n        });\n        return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));\n    },\n    requestAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);\n    },\n    cancelAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);\n    },\n    delegate: undefined,\n};\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\nexport const animationFrame = animationFrameScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AnimationFrameScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { animationFrameProvider } from './animationFrameProvider';\nexport class AnimationFrameAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            animationFrameProvider.cancelAnimationFrame(id);\n            scheduler._scheduled = undefined;\n        }\n        return undefined;\n    }\n}\n","let nextHandle = 1;\nlet resolved;\nconst activeHandles = {};\nfunction findAndClearHandle(handle) {\n    if (handle in activeHandles) {\n        delete activeHandles[handle];\n        return true;\n    }\n    return false;\n}\nexport const Immediate = {\n    setImmediate(cb) {\n        const handle = nextHandle++;\n        activeHandles[handle] = true;\n        if (!resolved) {\n            resolved = Promise.resolve();\n        }\n        resolved.then(() => findAndClearHandle(handle) && cb());\n        return handle;\n    },\n    clearImmediate(handle) {\n        findAndClearHandle(handle);\n    },\n};\nexport const TestTools = {\n    pending() {\n        return Object.keys(activeHandles).length;\n    }\n};\n","import { Immediate } from '../util/Immediate';\nconst { setImmediate, clearImmediate } = Immediate;\nexport const immediateProvider = {\n    setImmediate(...args) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate)(...args);\n    },\n    clearImmediate(handle) {\n        const { delegate } = immediateProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);\n    },\n    delegate: undefined,\n};\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport const asapScheduler = new AsapScheduler(AsapAction);\nexport const asap = asapScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        const flushId = this._scheduled;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        action = action || actions.shift();\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions[0]) && action.id === flushId && actions.shift());\n        this._active = false;\n        if (error) {\n            while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { immediateProvider } from './immediateProvider';\nexport class AsapAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && delay > 0) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        var _a;\n        if (delay != null ? delay > 0 : this.delay > 0) {\n            return super.recycleAsyncId(scheduler, id, delay);\n        }\n        const { actions } = scheduler;\n        if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {\n            immediateProvider.clearImmediate(id);\n            if (scheduler._scheduled === id) {\n                scheduler._scheduled = undefined;\n            }\n        }\n        return undefined;\n    }\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = asyncScheduler) {\n    return audit(() => timer(duration, scheduler));\n}\n","import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function audit(durationSelector) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        let lastValue = null;\n        let durationSubscriber = null;\n        let isComplete = false;\n        const endDuration = () => {\n            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            durationSubscriber = null;\n            if (hasValue) {\n                hasValue = false;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n            isComplete && subscriber.complete();\n        };\n        const cleanupDuration = () => {\n            durationSubscriber = null;\n            isComplete && subscriber.complete();\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            lastValue = value;\n            if (!durationSubscriber) {\n                innerFrom(durationSelector(value)).subscribe((durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration)));\n            }\n        }, () => {\n            isComplete = true;\n            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }));\n    });\n}\n","import { Observable } from '../Observable';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\nexport function timer(dueTime = 0, intervalOrScheduler, scheduler = asyncScheduler) {\n    let intervalDuration = -1;\n    if (intervalOrScheduler != null) {\n        if (isScheduler(intervalOrScheduler)) {\n            scheduler = intervalOrScheduler;\n        }\n        else {\n            intervalDuration = intervalOrScheduler;\n        }\n    }\n    return new Observable((subscriber) => {\n        let due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;\n        if (due < 0) {\n            due = 0;\n        }\n        let n = 0;\n        return scheduler.schedule(function () {\n            if (!subscriber.closed) {\n                subscriber.next(n++);\n                if (0 <= intervalDuration) {\n                    this.schedule(undefined, intervalDuration);\n                }\n                else {\n                    subscriber.complete();\n                }\n            }\n        }, due);\n    });\n}\n","export function isValidDate(value) {\n    return value instanceof Date && !isNaN(value);\n}\n","import { coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Input, Injectable, Optional, Inject, inject, Injector, afterNextRender, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Output, ViewChild, SkipSelf, ElementRef, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i2$1 from '@angular/cdk/collections';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/** The injection token used to specify the virtual scrolling strategy. */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() {\n        /* no-op */\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() {\n        /* no-op */\n    }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() {\n        return this._itemSize;\n    }\n    set itemSize(value) {\n        this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() {\n        return this._minBufferPx;\n    }\n    set minBufferPx(value) {\n        this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() {\n        return this._maxBufferPx;\n    }\n    set maxBufferPx(value) {\n        this._maxBufferPx = coerceNumberProperty(value);\n    }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFixedSizeVirtualScroll, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkFixedSizeVirtualScroll, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, providers: [\n            {\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n            },\n        ], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFixedSizeVirtualScroll, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: VIRTUAL_SCROLL_STRATEGY,\n                            useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                            deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n                        },\n                    ],\n                }]\n        }], propDecorators: { itemSize: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }] } });\n\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0\n                ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n                : this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while ((element = element.parentElement));\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ScrollDispatcher, deps: [{ token: i0.NgZone }, { token: i1.Platform }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ScrollDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ScrollDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll')\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkScrollable, isStandalone: true, selector: \"[cdk-scrollable], [cdkScrollable]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkScrollable, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-scrollable], [cdkScrollable]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }] });\n\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // Clear the cached position so that the viewport is re-measured next time it is required.\n            // We don't need to keep track of the subscription, because it is completed on destroy.\n            this.change().subscribe(() => (this._viewportSize = null));\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a DOMRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top ||\n            document.body.scrollTop ||\n            window.scrollY ||\n            documentElement.scrollTop ||\n            0;\n        const left = -documentRect.left ||\n            document.body.scrollLeft ||\n            window.scrollX ||\n            documentElement.scrollLeft ||\n            0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * This stream emits outside of the Angular zone.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser\n            ? { width: window.innerWidth, height: window.innerHeight }\n            : { width: 0, height: 0 };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ViewportRuler, deps: [{ token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ViewportRuler, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ViewportRuler, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\nconst VIRTUAL_SCROLLABLE = new InjectionToken('VIRTUAL_SCROLLABLE');\n/**\n * Extending the {@link CdkScrollable} to be used as scrolling container for virtual scrolling.\n */\nclass CdkVirtualScrollable extends CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    /**\n     * Measure the viewport size for the provided orientation.\n     *\n     * @param orientation The orientation to measure the size from.\n     */\n    measureViewportSize(orientation) {\n        const viewportEl = this.elementRef.nativeElement;\n        return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkVirtualScrollable, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkVirtualScrollable, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkVirtualScrollable, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }] });\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkVirtualScrollable {\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        this.scrollable = scrollable;\n        this._platform = inject(Platform);\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        /**\n         * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n         * will be removed.\n         */\n        this.appendOnly = false;\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        this._injector = inject(Injector);\n        this._isDestroyed = false;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n        if (!this.scrollable) {\n            // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n            this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n            this.scrollable = this;\n        }\n    }\n    ngOnInit() {\n        // Scrolling depends on the element dimensions which we can't get during SSR.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        if (this.scrollable === this) {\n            super.ngOnInit();\n        }\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.scrollable\n                .elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER), \n            // Usually `elementScrolled` is completed when the scrollable is destroyed, but\n            // that may not be the case if a `CdkVirtualScrollableElement` is used so we have\n            // to unsubscribe here just in case.\n            takeUntil(this._destroyed))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        this._isDestroyed = true;\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            if (this.appendOnly) {\n                range = { start: 0, end: Math.max(this._renderedRange.end, range.end) };\n            }\n            this._renderedRangeSubject.next((this._renderedRange = range));\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // In appendOnly, we always start from the top\n        offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollable.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the scrollable (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        // This is to break the call cycle\n        let measureScrollOffset;\n        if (this.scrollable == this) {\n            measureScrollOffset = (_from) => super.measureScrollOffset(_from);\n        }\n        else {\n            measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);\n        }\n        return Math.max(0, measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n            this.measureViewportOffset());\n    }\n    /**\n     * Measures the offset of the viewport from the scrolling container\n     * @param from The edge to measure from.\n     */\n    measureViewportOffset(from) {\n        let fromRect;\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const isRtl = this.dir?.value == 'rtl';\n        if (from == 'start') {\n            fromRect = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            fromRect = isRtl ? LEFT : RIGHT;\n        }\n        else if (from) {\n            fromRect = from;\n        }\n        else {\n            fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n        }\n        const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n        const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n        return viewportClientRect - scrollerClientRect;\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        if (this._isDestroyed) {\n            return;\n        }\n        this.ngZone.run(() => {\n            // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n            // from the root, since the repeated items are content projected in. Calling `detectChanges`\n            // instead does not properly check the projected content.\n            this._changeDetectorRef.markForCheck();\n            // Apply the content transform. The transform can't be set via an Angular binding because\n            // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n            // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n            // the `Number` function first to coerce it to a numeric value.\n            this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n            afterNextRender(() => {\n                this._isChangeDetectionPending = false;\n                const runAfterChangeDetection = this._runAfterChangeDetection;\n                this._runAfterChangeDetection = [];\n                for (const fn of runAfterChangeDetection) {\n                    fn();\n                }\n            }, { injector: this._injector });\n        });\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkVirtualScrollViewport, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: VIRTUAL_SCROLL_STRATEGY, optional: true }, { token: i2.Directionality, optional: true }, { token: ScrollDispatcher }, { token: ViewportRuler }, { token: VIRTUAL_SCROLLABLE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkVirtualScrollViewport, isStandalone: true, selector: \"cdk-virtual-scroll-viewport\", inputs: { orientation: \"orientation\", appendOnly: [\"appendOnly\", \"appendOnly\", booleanAttribute] }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, host: { properties: { \"class.cdk-virtual-scroll-orientation-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.cdk-virtual-scroll-orientation-vertical\": \"orientation !== \\\"horizontal\\\"\" }, classAttribute: \"cdk-virtual-scroll-viewport\" }, providers: [\n            {\n                provide: CdkScrollable,\n                useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n            },\n        ], viewQueries: [{ propertyName: \"_contentWrapper\", first: true, predicate: [\"contentWrapper\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkVirtualScrollViewport, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-virtual-scroll-viewport', host: {\n                        'class': 'cdk-virtual-scroll-viewport',\n                        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, providers: [\n                        {\n                            provide: CdkScrollable,\n                            useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,\n                            deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport],\n                        },\n                    ], template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\", styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLL_STRATEGY]\n                }] }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: ScrollDispatcher }, { type: ViewportRuler }, { type: CdkVirtualScrollable, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [VIRTUAL_SCROLLABLE]\n                }] }], propDecorators: { orientation: [{\n                type: Input\n            }], appendOnly: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], scrolledIndexChange: [{\n                type: Output\n            }], _contentWrapper: [{\n                type: ViewChild,\n                args: ['contentWrapper', { static: true }]\n            }] } });\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn\n            ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n            : undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges.pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            if (this.viewChange.observers.length) {\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n            }\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode\n            ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n            : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), record => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false,\n            },\n            index,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkVirtualForOf, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: _VIEW_REPEATER_STRATEGY }, { token: CdkVirtualScrollViewport, skipSelf: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkVirtualForOf, isStandalone: true, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkVirtualForOf, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i2$1._RecycleViewRepeaterStrategy, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                    type: SkipSelf\n                }] }, { type: i0.NgZone }], propDecorators: { cdkVirtualForOf: [{\n                type: Input\n            }], cdkVirtualForTrackBy: [{\n                type: Input\n            }], cdkVirtualForTemplate: [{\n                type: Input\n            }], cdkVirtualForTemplateCacheSize: [{\n                type: Input\n            }] } });\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\nclass CdkVirtualScrollableElement extends CdkVirtualScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return (this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n            this.measureScrollOffset(from));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkVirtualScrollableElement, deps: [{ token: i0.ElementRef }, { token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkVirtualScrollableElement, isStandalone: true, selector: \"[cdkVirtualScrollingElement]\", host: { classAttribute: \"cdk-virtual-scrollable\" }, providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkVirtualScrollableElement, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkVirtualScrollingElement]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement }],\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-virtual-scrollable',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }] });\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\nclass CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n    constructor(scrollDispatcher, ngZone, dir) {\n        super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, 'scroll').pipe(takeUntil(this._destroyed)).subscribe(observer)));\n    }\n    measureBoundingClientRectWithScrollOffset(from) {\n        return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkVirtualScrollableWindow, deps: [{ token: ScrollDispatcher }, { token: i0.NgZone }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkVirtualScrollableWindow, isStandalone: true, selector: \"cdk-virtual-scroll-viewport[scrollWindow]\", providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkVirtualScrollableWindow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n                    providers: [{ provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: ScrollDispatcher }, { type: i0.NgZone }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }] });\n\nclass CdkScrollableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkScrollableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkScrollableModule, imports: [CdkScrollable], exports: [CdkScrollable] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkScrollableModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkScrollableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkScrollable],\n                    imports: [CdkScrollable],\n                }]\n        }] });\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ScrollingModule, imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport,\n            CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement], exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll,\n            CdkVirtualForOf,\n            CdkVirtualScrollViewport,\n            CdkVirtualScrollableWindow,\n            CdkVirtualScrollableElement] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ScrollingModule, imports: [BidiModule,\n            CdkScrollableModule, BidiModule, CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ScrollingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkVirtualScrollViewport,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                    exports: [\n                        BidiModule,\n                        CdkScrollableModule,\n                        CdkFixedSizeVirtualScroll,\n                        CdkVirtualForOf,\n                        CdkVirtualScrollViewport,\n                        CdkVirtualScrollableWindow,\n                        CdkVirtualScrollableElement,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollable, CdkVirtualScrollableElement, CdkVirtualScrollableWindow, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLLABLE, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n","import * as i1 from '@angular/cdk/bidi';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _ViewRepeaterOperation, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport * as i2 from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, booleanAttribute, Inject, Optional, Input, ContentChild, inject, NgZone, Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, EventEmitter, Injector, afterNextRender, Attribute, SkipSelf, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkCellDef, isStandalone: true, selector: \"[cdkCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellDef]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkHeaderCellDef, isStandalone: true, selector: \"[cdkHeaderCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderCellDef]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkFooterCellDef, isStandalone: true, selector: \"[cdkFooterCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterCellDef]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /** Whether the cell is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(value) {\n        if (value !== this._stickyEnd) {\n            this._stickyEnd = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    constructor(_table) {\n        this._table = _table;\n        this._hasStickyChanged = false;\n        this._sticky = false;\n        this._stickyEnd = false;\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkColumnDef, deps: [{ token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkColumnDef, isStandalone: true, selector: \"[cdkColumnDef]\", inputs: { name: [\"cdkColumnDef\", \"name\"], sticky: [\"sticky\", \"sticky\", booleanAttribute], stickyEnd: [\"stickyEnd\", \"stickyEnd\", booleanAttribute] }, providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }], queries: [{ propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true }, { propertyName: \"footerCell\", first: true, predicate: CdkFooterCellDef, descendants: true }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkColumnDef]',\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { name: [{\n                type: Input,\n                args: ['cdkColumnDef']\n            }], sticky: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], stickyEnd: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], cell: [{\n                type: ContentChild,\n                args: [CdkCellDef]\n            }], headerCell: [{\n                type: ContentChild,\n                args: [CdkHeaderCellDef]\n            }], footerCell: [{\n                type: ContentChild,\n                args: [CdkFooterCellDef]\n            }] } });\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkHeaderCell, isStandalone: true, selector: \"cdk-header-cell, th[cdk-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"cdk-header-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkColumnDef }, { type: i0.ElementRef }] });\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkFooterCell, isStandalone: true, selector: \"cdk-footer-cell, td[cdk-footer-cell]\", host: { classAttribute: \"cdk-footer-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkColumnDef }, { type: i0.ElementRef }] });\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkCell, isStandalone: true, selector: \"cdk-cell, td[cdk-cell]\", host: { classAttribute: \"cdk-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkColumnDef }, { type: i0.ElementRef }] });\n\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_unusedNgZone) {\n        this._currentSchedule = null;\n        this._ngZone = inject(NgZone);\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._ngZone.runOutsideAngular(() => \n        // TODO(mmalerba): Scheduling this using something that runs less frequently\n        //  (e.g. requestAnimationFrame, setTimeout, etc.) causes noticeable jank with the column\n        //  resizer. We should audit the usages of schedule / scheduleEnd in that component and see\n        //  if we can refactor it so that we don't need to flush the tasks quite so frequently.\n        queueMicrotask(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        }));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _CoalescedStyleScheduler, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _CoalescedStyleScheduler }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _CoalescedStyleScheduler, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i0.NgZone }] });\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: BaseRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: BaseRowDef, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: BaseRowDef, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }] });\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends BaseRowDef {\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n        this._hasStickyChanged = false;\n        this._sticky = false;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkHeaderRowDef, isStandalone: true, selector: \"[cdkHeaderRowDef]\", inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkHeaderRowDef' }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkHeaderRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends BaseRowDef {\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n        this._hasStickyChanged = false;\n        this._sticky = false;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkFooterRowDef, isStandalone: true, selector: \"[cdkFooterRowDef]\", inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkFooterRowDef' }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkFooterRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkRowDef, isStandalone: true, selector: \"[cdkRowDef]\", inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: [\n                        { name: 'columns', alias: 'cdkRowDefColumns' },\n                        { name: 'when', alias: 'cdkRowDefWhen' },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }] });\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static { this.mostRecentCellOutlet = null; }\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCellOutlet, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkCellOutlet, isStandalone: true, selector: \"[cdkCellOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCellOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkHeaderRow, isStandalone: true, selector: \"cdk-header-row, tr[cdk-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-header-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkFooterRow, isStandalone: true, selector: \"cdk-footer-row, tr[cdk-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-footer-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkRow, isStandalone: true, selector: \"cdk-row, tr[cdk-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._contentClassName = 'cdk-no-data-row';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkNoDataRow, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkNoDataRow, isStandalone: true, selector: \"ng-template[cdkNoDataRow]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkNoDataRow]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length ||\n            !this._isBrowser ||\n            !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const firstRow = rows[0];\n            const numCells = firstRow.children.length;\n            const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n            const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n            const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n            const lastStickyStart = stickyStartStates.lastIndexOf(true);\n            const firstStickyEnd = stickyEndStates.indexOf(true);\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1\n                        ? []\n                        : cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => (stickyStartStates[index] ? width : null)),\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1\n                        ? []\n                        : cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => (stickyEndStates[index + firstStickyEnd] ? width : null))\n                            .reverse(),\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n            // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n            // sticky states need to be reversed as well.\n            const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n            const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n            // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n            const stickyOffsets = [];\n            const stickyCellHeights = [];\n            const elementsToStick = [];\n            for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                stickyOffsets[rowIndex] = stickyOffset;\n                const row = rows[rowIndex];\n                elementsToStick[rowIndex] = this._isNativeHtmlTable\n                    ? Array.from(row.children)\n                    : [row];\n                const height = row.getBoundingClientRect().height;\n                stickyOffset += height;\n                stickyCellHeights[rowIndex] = height;\n            }\n            const borderedRowIndex = states.lastIndexOf(true);\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                this._positionListener?.stickyHeaderRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n            else {\n                this._positionListener?.stickyFooterRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const tfoot = tableElement.querySelector('tfoot');\n            if (tfoot) {\n                if (stickyStates.some(state => !state)) {\n                    this._removeStickyStyle(tfoot, ['bottom']);\n                }\n                else {\n                    this._addStickyStyle(tfoot, 'bottom', 0, false);\n                }\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkRecycleRows, isStandalone: true, selector: \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._rowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: DataRowOutlet, isStandalone: true, selector: \"[rowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[rowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._headerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: HeaderRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: HeaderRowOutlet, isStandalone: true, selector: \"[headerRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: HeaderRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[headerRowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._footerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: FooterRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: FooterRowOutlet, isStandalone: true, selector: \"[footerRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: FooterRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[footerRowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._noDataRowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: NoDataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: NoDataRowOutlet, isStandalone: true, selector: \"[noDataRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: NoDataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[noDataRowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"/>\n  <ng-content select=\"colgroup, col\"/>\n\n  <!--\n    Unprojected content throws a hydration error so we need this to capture it.\n    It gets removed on the client so it doesn't affect the layout.\n  -->\n  @if (_isServer) {\n    <ng-content/>\n  }\n\n  @if (_isNativeHtmlTable) {\n    <thead role=\"rowgroup\">\n      <ng-container headerRowOutlet/>\n    </thead>\n    <tbody role=\"rowgroup\">\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n    </tbody>\n    <tfoot role=\"rowgroup\">\n      <ng-container footerRowOutlet/>\n    </tfoot>\n  } @else {\n    <ng-container headerRowOutlet/>\n    <ng-container rowOutlet/>\n    <ng-container noDataRowOutlet/>\n    <ng-container footerRowOutlet/>\n  }\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    /** Aria role to apply to the table's cells based on the table's own role. */\n    _getCellRole() {\n        if (this._cellRoleInternal === undefined) {\n            // Perform this lazily in case the table's role was updated by a directive after construction.\n            const role = this._elementRef.nativeElement.getAttribute('role');\n            const cellRole = role === 'grid' || role === 'treegrid' ? 'gridcell' : 'cell';\n            this._cellRoleInternal = this._isNativeHtmlTable && cellRole === 'cell' ? null : cellRole;\n        }\n        return this._cellRoleInternal;\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(value) {\n        this._multiTemplateDataRows = value;\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(value) {\n        this._fixedLayout = value;\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, \n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener, \n    /**\n     * @deprecated `_unusedNgZone` parameter to be removed.\n     * @breaking-change 19.0.0\n     */\n    _unusedNgZone) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._viewportRuler = _viewportRuler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        /** Whether the table has rendered out all the outlets for the first time. */\n        this._hasAllOutlets = false;\n        /** Whether the table is done initializing. */\n        this._hasInitialized = false;\n        this._cellRoleInternal = undefined;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        /**\n         * Emits when the table completes rendering a set of data rows based on the latest data from the\n         * data source, even if the set of rows is empty.\n         */\n        this.contentChanged = new EventEmitter();\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({\n            start: 0,\n            end: Number.MAX_VALUE,\n        });\n        this._injector = inject(Injector);\n        if (!role) {\n            _elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._document = _document;\n        this._isServer = !_platform.isBrowser;\n        this._isNativeHtmlTable = _elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentInit() {\n        this._hasInitialized = true;\n    }\n    ngAfterContentChecked() {\n        // Only start re-rendering in `ngAfterContentChecked` after the first render.\n        if (this._canRender()) {\n            this._render();\n        }\n    }\n    ngOnDestroy() {\n        [\n            this._rowOutlet?.viewContainer,\n            this._headerRowOutlet?.viewContainer,\n            this._footerRowOutlet?.viewContainer,\n            this._cachedRenderRowsMap,\n            this._customColumnDefs,\n            this._customRowDefs,\n            this._customHeaderRowDefs,\n            this._customFooterRowDefs,\n            this._columnDefsByName,\n        ].forEach((def) => {\n            def?.clear();\n        });\n        this._headerRowDefs = [];\n        this._footerRowDefs = [];\n        this._defaultRowDef = null;\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, (change) => {\n            if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        afterNextRender(() => {\n            this.updateStickyColumnStyles();\n        }, { injector: this._injector });\n        this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const thead = closestTableSection(this._headerRowOutlet, 'thead');\n            if (thead) {\n                thead.style.display = headerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const tfoot = closestTableSection(this._footerRowOutlet, 'tfoot');\n            if (tfoot) {\n                tfoot.style.display = footerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /** Invoked whenever an outlet is created and has been assigned to the table. */\n    _outletAssigned() {\n        // Trigger the first render once all outlets have been assigned. We do it this way, as\n        // opposed to waiting for the next `ngAfterContentChecked`, because we don't know when\n        // the next change detection will happen.\n        // Also we can't use queries to resolve the outlets, because they're wrapped in a\n        // conditional, so we have to rely on them being assigned via DI.\n        if (!this._hasAllOutlets &&\n            this._rowOutlet &&\n            this._headerRowOutlet &&\n            this._footerRowOutlet &&\n            this._noDataRowOutlet) {\n            this._hasAllOutlets = true;\n            // In some setups this may fire before `ngAfterContentInit`\n            // so we need a check here. See #28538.\n            if (this._canRender()) {\n                this._render();\n            }\n        }\n    }\n    /** Whether the table has all the information to start rendering. */\n    _canRender() {\n        return this._hasAllOutlets && this._hasInitialized;\n    }\n    /** Renders the table if its state has changed. */\n    _render() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length &&\n            !this._footerRowDefs.length &&\n            !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows &&\n            defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            if (this._rowOutlet) {\n                this._rowOutlet.viewContainer.clear();\n            }\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (!noDataRow) {\n            return;\n        }\n        const shouldShow = this._rowOutlet.viewContainer.length === 0;\n        if (shouldShow === this._isShowingNoDataRow) {\n            return;\n        }\n        const container = this._noDataRowOutlet.viewContainer;\n        if (shouldShow) {\n            const view = container.createEmbeddedView(noDataRow.templateRef);\n            const rootNode = view.rootNodes[0];\n            // Only add the attributes if we have a single root node since it's hard\n            // to figure out which one to add it to when there are multiple.\n            if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n                rootNode.setAttribute('role', 'row');\n                rootNode.classList.add(noDataRow._contentClassName);\n            }\n        }\n        else {\n            container.clear();\n        }\n        this._isShowingNoDataRow = shouldShow;\n        this._changeDetectorRef.markForCheck();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTable, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: 'role', attribute: true }, { token: i1.Directionality, optional: true }, { token: DOCUMENT }, { token: i2.Platform }, { token: _VIEW_REPEATER_STRATEGY }, { token: _COALESCED_STYLE_SCHEDULER }, { token: i3.ViewportRuler }, { token: STICKY_POSITIONING_LISTENER, optional: true, skipSelf: true }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: CdkTable, isStandalone: true, selector: \"cdk-table, table[cdk-table]\", inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: [\"multiTemplateDataRows\", \"multiTemplateDataRows\", booleanAttribute], fixedLayout: [\"fixedLayout\", \"fixedLayout\", booleanAttribute] }, outputs: { contentChanged: \"contentChanged\" }, host: { properties: { \"class.cdk-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"cdk-table\" }, providers: [\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], queries: [{ propertyName: \"_noDataRow\", first: true, predicate: CdkNoDataRow, descendants: true }, { propertyName: \"_contentColumnDefs\", predicate: CdkColumnDef, descendants: true }, { propertyName: \"_contentRowDefs\", predicate: CdkRowDef, descendants: true }, { propertyName: \"_contentHeaderRowDefs\", predicate: CdkHeaderRowDef, descendants: true }, { propertyName: \"_contentFooterRowDefs\", predicate: CdkFooterRowDef, descendants: true }], exportAs: [\"cdkTable\"], ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"/>\\n  <ng-content select=\\\"colgroup, col\\\"/>\\n\\n  <!--\\n    Unprojected content throws a hydration error so we need this to capture it.\\n    It gets removed on the client so it doesn't affect the layout.\\n  -->\\n  @if (_isServer) {\\n    <ng-content/>\\n  }\\n\\n  @if (_isNativeHtmlTable) {\\n    <thead role=\\\"rowgroup\\\">\\n      <ng-container headerRowOutlet/>\\n    </thead>\\n    <tbody role=\\\"rowgroup\\\">\\n      <ng-container rowOutlet/>\\n      <ng-container noDataRowOutlet/>\\n    </tbody>\\n    <tfoot role=\\\"rowgroup\\\">\\n      <ng-container footerRowOutlet/>\\n    </tfoot>\\n  } @else {\\n    <ng-container headerRowOutlet/>\\n    <ng-container rowOutlet/>\\n    <ng-container noDataRowOutlet/>\\n    <ng-container footerRowOutlet/>\\n  }\\n\", isInline: true, styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'cdk-table',\n                        '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                        { provide: CDK_TABLE, useExisting: CdkTable },\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], standalone: true, imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"] }]\n        }], ctorParameters: () => [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['role']\n                }] }, { type: i1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i2.Platform }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: _CoalescedStyleScheduler, decorators: [{\n                    type: Inject,\n                    args: [_COALESCED_STYLE_SCHEDULER]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [STICKY_POSITIONING_LISTENER]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }], propDecorators: { trackBy: [{\n                type: Input\n            }], dataSource: [{\n                type: Input\n            }], multiTemplateDataRows: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], fixedLayout: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], contentChanged: [{\n                type: Output\n            }], _contentColumnDefs: [{\n                type: ContentChildren,\n                args: [CdkColumnDef, { descendants: true }]\n            }], _contentRowDefs: [{\n                type: ContentChildren,\n                args: [CdkRowDef, { descendants: true }]\n            }], _contentHeaderRowDefs: [{\n                type: ContentChildren,\n                args: [CdkHeaderRowDef, {\n                        descendants: true,\n                    }]\n            }], _contentFooterRowDefs: [{\n                type: ContentChildren,\n                args: [CdkFooterRowDef, {\n                        descendants: true,\n                    }]\n            }], _noDataRow: [{\n                type: ContentChild,\n                args: [CdkNoDataRow]\n            }] } });\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n/**\n * Finds the closest table section to an outlet. We can't use `HTMLElement.closest` for this,\n * because the node representing the outlet is a comment.\n */\nfunction closestTableSection(outlet, section) {\n    const uppercaseSection = section.toUpperCase();\n    let current = outlet.viewContainer.element.nativeElement;\n    while (current) {\n        // 1 is an element node.\n        const nodeName = current.nodeType === 1 ? current.nodeName : null;\n        if (nodeName === uppercaseSection) {\n            return current;\n        }\n        else if (nodeName === 'TABLE') {\n            // Stop traversing past the `table` node.\n            break;\n        }\n        current = current.parentNode;\n    }\n    return null;\n}\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTextColumn, deps: [{ token: CdkTable, optional: true }, { token: TEXT_COLUMN_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkTextColumn, isStandalone: true, selector: \"cdk-text-column\", inputs: { name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\", justify: \"justify\" }, viewQueries: [{ propertyName: \"columnDef\", first: true, predicate: CdkColumnDef, descendants: true, static: true }, { propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true, static: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true, static: true }], ngImport: i0, template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: [\"cdkColumnDef\", \"sticky\", \"stickyEnd\"] }, { kind: \"directive\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\" }, { kind: \"directive\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\" }, { kind: \"directive\", type: CdkCellDef, selector: \"[cdkCellDef]\" }, { kind: \"directive\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-text-column',\n                    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    standalone: true,\n                    imports: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell],\n                }]\n        }], ctorParameters: () => [{ type: CdkTable, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [TEXT_COLUMN_OPTIONS]\n                }] }], propDecorators: { name: [{\n                type: Input\n            }], headerText: [{\n                type: Input\n            }], dataAccessor: [{\n                type: Input\n            }], justify: [{\n                type: Input\n            }], columnDef: [{\n                type: ViewChild,\n                args: [CdkColumnDef, { static: true }]\n            }], cell: [{\n                type: ViewChild,\n                args: [CdkCellDef, { static: true }]\n            }], headerCell: [{\n                type: ViewChild,\n                args: [CdkHeaderCellDef, { static: true }]\n            }] } });\n\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule, CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet], exports: [CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    imports: [ScrollingModule, ...EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n * @deprecated Implement the `CanStick` interface instead.\n * @breaking-change 19.0.0\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /** Whether sticky positioning should be applied. */\n        get sticky() {\n            return this._sticky;\n        }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n","import { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    const sources = args;\n    return !sources.length\n        ?\n            EMPTY\n        : sources.length === 1\n            ?\n                innerFrom(sources[0])\n            :\n                mergeAll(concurrent)(from(sources, scheduler));\n}\n","import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, booleanAttribute, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CdkCellOutlet, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy, DataSource } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { map } from 'rxjs/operators';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass MatRecycleRows {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatRecycleRows, isStandalone: true, selector: \"mat-table[recycleRows], table[mat-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }] });\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /** Overrides the sticky CSS class set by the `CdkTable`. */\n        this.stickyCssClass = 'mat-mdc-table-sticky';\n        /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n        this.needsPositionStickyOnElement = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTable, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: MatTable, isStandalone: true, selector: \"mat-table, table[mat-table]\", host: { properties: { \"class.mdc-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"mat-mdc-table mdc-data-table__table\" }, providers: [\n            { provide: CdkTable, useExisting: MatTable },\n            { provide: CDK_TABLE, useExisting: MatTable },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n            //  is only included in the build if used.\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], exportAs: [\"matTable\"], usesInheritance: true, ngImport: i0, template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, isInline: true, styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-app-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-app-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-app-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-app-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-app-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-app-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-app-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-app-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-app-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-app-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-app-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-app-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-app-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-app-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-app-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-app-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child .mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-app-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-table, table[mat-table]', exportAs: 'matTable', template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, host: {\n                        'class': 'mat-mdc-table mdc-data-table__table',\n                        '[class.mdc-table-fixed-layout]': 'fixedLayout',\n                    }, providers: [\n                        { provide: CdkTable, useExisting: MatTable },\n                        { provide: CDK_TABLE, useExisting: MatTable },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                        //  is only included in the build if used.\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, standalone: true, imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-app-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-app-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-app-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-app-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-app-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-app-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-app-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-app-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-app-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-app-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-app-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-app-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-app-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-app-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-app-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-app-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child .mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-app-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"] }]\n        }] });\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatCellDef, isStandalone: true, selector: \"[matCellDef]\", providers: [{ provide: CdkCellDef, useExisting: MatCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatHeaderCellDef, isStandalone: true, selector: \"[matHeaderCellDef]\", providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatFooterCellDef, isStandalone: true, selector: \"[matFooterCellDef]\", providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatColumnDef, isStandalone: true, selector: \"[matColumnDef]\", inputs: { name: [\"matColumnDef\", \"name\"] }, providers: [\n            { provide: CdkColumnDef, useExisting: MatColumnDef },\n            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n        ], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matColumnDef]',\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n                    ],\n                    standalone: true,\n                }]\n        }], propDecorators: { name: [{\n                type: Input,\n                args: ['matColumnDef']\n            }] } });\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatHeaderCell, isStandalone: true, selector: \"mat-header-cell, th[mat-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"mat-mdc-header-cell mdc-data-table__header-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-mdc-header-cell mdc-data-table__header-cell',\n                        'role': 'columnheader',\n                    },\n                    standalone: true,\n                }]\n        }] });\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatFooterCell, isStandalone: true, selector: \"mat-footer-cell, td[mat-footer-cell]\", host: { classAttribute: \"mat-mdc-footer-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-mdc-footer-cell mdc-data-table__cell',\n                    },\n                    standalone: true,\n                }]\n        }] });\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatCell, isStandalone: true, selector: \"mat-cell, td[mat-cell]\", host: { classAttribute: \"mat-mdc-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-mdc-cell mdc-data-table__cell',\n                    },\n                    standalone: true,\n                }]\n        }] });\n\n// We can't reuse `CDK_ROW_TEMPLATE` because it's incompatible with local compilation mode.\nconst ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatHeaderRowDef, isStandalone: true, selector: \"[matHeaderRowDef]\", inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matHeaderRowDef' },\n                        { name: 'sticky', alias: 'matHeaderRowDefSticky', transform: booleanAttribute },\n                    ],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatFooterRowDef, isStandalone: true, selector: \"[matFooterRowDef]\", inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matFooterRowDef' },\n                        { name: 'sticky', alias: 'matFooterRowDefSticky', transform: booleanAttribute },\n                    ],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatRowDef, isStandalone: true, selector: \"[matRowDef]\", inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, providers: [{ provide: CdkRowDef, useExisting: MatRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matRowDefColumns' },\n                        { name: 'when', alias: 'matRowDefWhen' },\n                    ],\n                    standalone: true,\n                }]\n        }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatHeaderRow, isStandalone: true, selector: \"mat-header-row, tr[mat-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-header-row mdc-data-table__header-row\" }, providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }], exportAs: [\"matHeaderRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-header-row, tr[mat-header-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-header-row mdc-data-table__header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatFooterRow, isStandalone: true, selector: \"mat-footer-row, tr[mat-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-footer-row mdc-data-table__row\" }, providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }], exportAs: [\"matFooterRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-footer-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatRow, isStandalone: true, selector: \"mat-row, tr[mat-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-row mdc-data-table__row\" }, providers: [{ provide: CdkRow, useExisting: MatRow }], exportAs: [\"matRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-row, tr[mat-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n    constructor() {\n        super(...arguments);\n        this._contentClassName = 'mat-mdc-no-data-row';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatNoDataRow, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatNoDataRow, isStandalone: true, selector: \"ng-template[matNoDataRow]\", providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matNoDataRow]',\n                    providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }],\n                    standalone: true,\n                }]\n        }] });\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTextColumn, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatTextColumn, isStandalone: true, selector: \"mat-text-column\", usesInheritance: true, ngImport: i0, template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"matColumnDef\"] }, { kind: \"directive\", type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { kind: \"directive\", type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { kind: \"directive\", type: MatCellDef, selector: \"[matCellDef]\" }, { kind: \"directive\", type: MatCell, selector: \"mat-cell, td[mat-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-text-column',\n                    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    standalone: true,\n                    imports: [MatColumnDef, MatHeaderCellDef, MatHeaderCell, MatCellDef, MatCell],\n                }]\n        }] });\n\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    MatRecycleRows,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn], exports: [MatCommonModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CdkTableModule, ...EXPORTED_DECLARATIONS],\n                    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends DataSource {\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() {\n        return this._data.value;\n    }\n    set data(data) {\n        data = Array.isArray(data) ? data : [];\n        this._data.next(data);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(data);\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() {\n        return this._filter.value;\n    }\n    set filter(filter) {\n        this._filter.next(filter);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(this.data);\n        }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() {\n        return this._sort;\n    }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the paginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the paginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() {\n        return this._paginator;\n    }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    constructor(initialData = []) {\n        super();\n        /** Stream emitting render data to the table (depends on ordered data changes). */\n        this._renderData = new BehaviorSubject([]);\n        /** Stream that emits when a new filter string is set on the data source. */\n        this._filter = new BehaviorSubject('');\n        /** Used to react to internal changes of the paginator that are made by the data source itself. */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = null;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (data, sortHeaderId) => {\n            const value = data[sortHeaderId];\n            if (_isNumberValue(value)) {\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        };\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (data, sort) => {\n            const active = sort.active;\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((a, b) => {\n                let valueA = this.sortingDataAccessor(a, active);\n                let valueB = this.sortingDataAccessor(b, active);\n                // If there are data in the column that can be converted to a number,\n                // it must be ensured that the rest of the data\n                // is of the same type so as not to order incorrectly.\n                const valueAType = typeof valueA;\n                const valueBType = typeof valueB;\n                if (valueAType !== valueBType) {\n                    if (valueAType === 'number') {\n                        valueA += '';\n                    }\n                    if (valueBType === 'number') {\n                        valueB += '';\n                    }\n                }\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            });\n        };\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @returns Whether the filter matches against the data\n         */\n        this.filterPredicate = (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            const dataStr = Object.keys(data)\n                .reduce((currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + data[key] + '◬';\n            }, '')\n                .toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        };\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if sort and/or paginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort\n            ? merge(this._sort.sortChange, this._sort.initialized)\n            : of(null);\n        const pageChange = this._paginator\n            ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)\n            : of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterPredicate function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterPredicate.\n        // May be overridden for customization.\n        this.filteredData =\n            this.filter == null || this.filter === ''\n                ? data\n                : data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided paginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() {\n        if (!this._renderChangesSubscription) {\n            this._updateChangeSubscription();\n        }\n        return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n    disconnect() {\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = null;\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn };\n","import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","import * as i0 from '@angular/core';\nimport { ElementRef, Injector, Directive, EventEmitter, Inject, Input, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver, projectableNodes) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.projectableNodes = projectableNodes;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    templateRef, \n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    viewContainerRef, \n    /** Contextual data to be passed in to the embedded view. */\n    context, \n    /** The injector to use for the embedded view. */\n    injector) {\n        super();\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n        this.injector = injector;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param outletElement Element into which the content is projected.\n     * @param _componentFactoryResolver Used to resolve the component factory.\n     *   Only required when attaching component portals.\n     * @param _appRef Reference to the application. Only used in component portals when there\n     *   is no `ViewContainerRef` available.\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n     *   have one. Only used for component portals.\n     * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n     *   become a required parameter.\n     */\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n            throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n        }\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector, portal.projectableNodes || undefined);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n            }\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector || Injector.NULL);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n                if (this._appRef.viewCount > 0) {\n                    this._appRef.detachView(componentRef.hostView);\n                }\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkPortal, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkPortal, isStandalone: true, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }] });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: TemplatePortalDirective, isStandalone: true, selector: \"[cdk-portal], [portal]\", providers: [\n            {\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective,\n            },\n        ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal || null;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedRef = this._attachedPortal = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector, portal.projectableNodes || undefined);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkPortalOutlet, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkPortalOutlet, isStandalone: true, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { portal: [{\n                type: Input,\n                args: ['cdkPortalOutlet']\n            }], attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: PortalHostDirective, isStandalone: true, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n            {\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective,\n            },\n        ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: [{ name: 'portal', alias: 'cdkPortalHost' }],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                    standalone: true,\n                }]\n        }] });\nclass PortalModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: PortalModule, imports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: PortalModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n","import * as i1 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport * as i6 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, Optional, untracked, afterRender, afterNextRender, ElementRef, EnvironmentInjector, ApplicationRef, ANIMATION_MODULE_TYPE, InjectionToken, inject, Directive, NgZone, EventEmitter, booleanAttribute, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/cdk/platform';\nimport { supportsScrollBehavior, _getEventTarget, _isTestEnvironment } from '@angular/cdk/platform';\nimport { filter, takeUntil, takeWhile } from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0).pipe(filter(scrollable => {\n            return (!scrollable ||\n                !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement));\n        }));\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ScrollStrategyOptions, deps: [{ token: i1.ScrollDispatcher }, { token: i1.ViewportRuler }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ScrollStrategyOptions, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ScrollStrategyOptions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.ScrollDispatcher }, { type: i1.ViewportRuler }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the possible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: BaseOverlayDispatcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: BaseOverlayDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: BaseOverlayDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._ngZone = _ngZone;\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    const keydownEvents = overlays[i]._keydownEvents;\n                    /** @breaking-change 14.0.0 _ngZone will be required. */\n                    if (this._ngZone) {\n                        this._ngZone.run(() => keydownEvents.next(event));\n                    }\n                    else {\n                        keydownEvents.next(event);\n                    }\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._document.body.addEventListener('keydown', this._keydownListener));\n            }\n            else {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayKeyboardDispatcher, deps: [{ token: DOCUMENT }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayKeyboardDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayKeyboardDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }] });\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform, \n    /** @breaking-change 14.0.0 _ngZone will be required. */\n    _ngZone) {\n        super(document);\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._cursorStyleIsSet = false;\n        /** Store pointerdown event target to track origin of click. */\n        this._pointerDownListener = (event) => {\n            this._pointerDownEventTarget = _getEventTarget(event);\n        };\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            const target = _getEventTarget(event);\n            // In case of a click event, we want to check the origin of the click\n            // (e.g. in case where a user starts a click inside the overlay and\n            // releases the click outside of it).\n            // This is done by using the event target of the preceding pointerdown event.\n            // Every click event caused by a pointer device has a preceding pointerdown\n            // event, unless the click was programmatically triggered (e.g. in a unit test).\n            const origin = event.type === 'click' && this._pointerDownEventTarget\n                ? this._pointerDownEventTarget\n                : target;\n            // Reset the stored pointerdown event target, to avoid having it interfere\n            // in subsequent events.\n            this._pointerDownEventTarget = null;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click (both origin and target of the click) dispatch the mouse event,\n                // and proceed with the next overlay\n                if (containsPierceShadowDom(overlayRef.overlayElement, target) ||\n                    containsPierceShadowDom(overlayRef.overlayElement, origin)) {\n                    break;\n                }\n                const outsidePointerEvents = overlayRef._outsidePointerEvents;\n                /** @breaking-change 14.0.0 _ngZone will be required. */\n                if (this._ngZone) {\n                    this._ngZone.run(() => outsidePointerEvents.next(event));\n                }\n                else {\n                    outsidePointerEvents.next(event);\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            /** @breaking-change 14.0.0 _ngZone will be required. */\n            if (this._ngZone) {\n                this._ngZone.runOutsideAngular(() => this._addEventListeners(body));\n            }\n            else {\n                this._addEventListeners(body);\n            }\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('pointerdown', this._pointerDownListener, true);\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n    _addEventListeners(body) {\n        body.addEventListener('pointerdown', this._pointerDownListener, true);\n        body.addEventListener('click', this._clickListener, true);\n        body.addEventListener('auxclick', this._clickListener, true);\n        body.addEventListener('contextmenu', this._clickListener, true);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayOutsideClickDispatcher, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayOutsideClickDispatcher, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayOutsideClickDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }] });\n/** Version of `Element.contains` that transcends shadow DOM boundaries. */\nfunction containsPierceShadowDom(parent, child) {\n    const supportsShadowRoot = typeof ShadowRoot !== 'undefined' && ShadowRoot;\n    let current = child;\n    while (current) {\n        if (current === parent) {\n            return true;\n        }\n        current =\n            supportsShadowRoot && current instanceof ShadowRoot ? current.host : current.parentNode;\n    }\n    return false;\n}\n\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this._containerElement?.remove();\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        // TODO(crisbeto): remove the testing check once we have an overlay testing\n        // module or Angular starts tearing down the testing `NgModule`. See:\n        // https://github.com/angular/angular/issues/18831\n        if (this._platform.isBrowser || _isTestEnvironment()) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].remove();\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (_isTestEnvironment()) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayContainer, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }] });\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher, _animationsDisabled = false, _injector) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsDisabled = _animationsDisabled;\n        this._injector = _injector;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        this._backdropTransitionendHandler = (event) => {\n            this._disposeBackdrop(event.target);\n        };\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        this._renders = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n        // Users could open the overlay from an `effect`, in which case we need to\n        // run the `afterRender` as `untracked`. We don't recommend that users do\n        // this, but we also don't want to break users who are doing it.\n        this._afterRenderRef = untracked(() => afterRender(() => {\n            this._renders.next();\n        }, { injector: this._injector }));\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        // Insert the host into the DOM before attaching the portal, otherwise\n        // the animations module will skip animations on repeat attachments.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        const attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the overlay is fully rendered before attempting to position it,\n        // as the position may depend on the size of the rendered content.\n        afterNextRender(() => {\n            // The overlay could've been detached before the callback executed.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        }, { injector: this._injector });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        // TODO(crisbeto): the null check is here, because the portal outlet returns `any`.\n        // We should be guaranteed for the result to be `ComponentRef | EmbeddedViewRef`, but\n        // `instanceof EmbeddedViewRef` doesn't appear to work at the moment.\n        if (typeof attachResult?.onDestroy === 'function') {\n            // In most cases we control the portal and we know when it is being detached so that\n            // we can finish the disposal process. The exception is if the user passes in a custom\n            // `ViewContainerRef` that isn't destroyed through the overlay API. Note that we use\n            // `detach` here instead of `dispose`, because we don't know if the user intends to\n            // reattach the overlay at a later point. It also has the advantage of waiting for animations.\n            attachResult.onDestroy(() => {\n                if (this.hasAttached()) {\n                    // We have to delay the `detach` call, because detaching immediately prevents\n                    // other destroy hooks from running. This is likely a framework bug similar to\n                    // https://github.com/angular/angular/issues/46119\n                    this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));\n                }\n            });\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenEmpty();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this._disposeBackdrop(this._backdropElement);\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        this._host?.remove();\n        this._previousHostParent = this._pane = this._host = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n        this._afterRenderRef.destroy();\n        this._renders.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = { ...this._config, ...sizeConfig };\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = { ...this._config, direction: dir };\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._animationsDisabled) {\n            this._backdropElement.classList.add('cdk-overlay-backdrop-noop-animation');\n        }\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (!this._animationsDisabled && typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        const backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        if (this._animationsDisabled) {\n            this._disposeBackdrop(backdropToDetach);\n            return;\n        }\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', this._backdropTransitionendHandler);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {\n            this._disposeBackdrop(backdropToDetach);\n        }, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classes = coerceArray(cssClasses || []).filter(c => !!c);\n        if (classes.length) {\n            isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);\n        }\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenEmpty() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._renders\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._host.remove();\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n    /** Removes a backdrop element from the DOM. */\n    _disposeBackdrop(backdrop) {\n        if (backdrop) {\n            backdrop.removeEventListener('click', this._backdropClickHandler);\n            backdrop.removeEventListener('transitionend', this._backdropTransitionendHandler);\n            backdrop.remove();\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement === backdrop) {\n                this._backdropElement = null;\n            }\n        }\n        if (this._backdropTimeout) {\n            clearTimeout(this._backdropTimeout);\n            this._backdropTimeout = undefined;\n        }\n    }\n}\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef &&\n            overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin, the overlay and the container to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        const containerRect = this._containerRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, containerRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos),\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        const lastPosition = this._lastPosition;\n        if (lastPosition) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();\n            const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n        else {\n            this.apply();\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, containerRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + originRect.width / 2;\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        // When zooming in Safari the container rectangle contains negative values for the position\n        // and we need to re-add them to the calculated coordinates.\n        if (containerRect.left < 0) {\n            x -= containerRect.left;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + originRect.height / 2;\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        // Normally the containerRect's top value would be zero, however when the overlay is attached to an input\n        // (e.g. in an autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        // Additionally, when zooming in Safari this fixes the vertical position.\n        if (containerRect.top < 0) {\n            y -= containerRect.top;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = x + overlay.width - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = y + overlay.height - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlay at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically || (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally || (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param rawOverlayRect Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y,\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollVisibility = this._getScrollVisibility();\n            // We're recalculating on scroll, but we only want to emit if anything\n            // changed since downstream code might be hitting the `NgZone`.\n            if (position !== this._lastPosition ||\n                !this._lastScrollVisibility ||\n                !compareScrollVisibility(this._lastScrollVisibility, scrollVisibility)) {\n                const changeEvent = new ConnectedOverlayPositionChange(position, scrollVisibility);\n                this._positionChanges.next(changeEvent);\n            }\n            this._lastScrollVisibility = scrollVisibility;\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `DOMRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - previousHeight / 2;\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) || (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) || (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin * 2;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - previousWidth / 2;\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stretches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - 2 * this._viewportMargin,\n            height: height - 2 * this._viewportMargin,\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breaking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the DOMRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width,\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return !units || units === 'px' ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `DOMRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `DOMRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height),\n    };\n}\n/** Returns whether two `ScrollingVisibility` objects are identical. */\nfunction compareScrollVisibility(a, b) {\n    if (a === b) {\n        return true;\n    }\n    return (a.isOriginClipped === b.isOriginClipped &&\n        a.isOriginOutsideView === b.isOriginOutsideView &&\n        a.isOverlayClipped === b.isOverlayClipped &&\n        a.isOverlayOutsideView === b.isOverlayOutsideView);\n}\nconst STANDARD_DROPDOWN_BELOW_POSITIONS = [\n    { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n    { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n    { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },\n];\nconst STANDARD_DROPDOWN_ADJACENT_POSITIONS = [\n    { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },\n    { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n    { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },\n    { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },\n];\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._alignItems = '';\n        this._xPosition = '';\n        this._xOffset = '';\n        this._width = '';\n        this._height = '';\n        this._isDisposed = false;\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'left';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'right';\n        return this;\n    }\n    /**\n     * Sets the overlay to the start of the viewport, depending on the overlay direction.\n     * This will be to the left in LTR layouts and to the right in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    start(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'start';\n        return this;\n    }\n    /**\n     * Sets the overlay to the end of the viewport, depending on the overlay direction.\n     * This will be to the right in LTR layouts and to the left in RTL.\n     * @param offset Offset from the edge of the screen.\n     */\n    end(value = '') {\n        this._xOffset = value;\n        this._xPosition = 'end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._xPosition = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        const xPosition = this._xPosition;\n        const xOffset = this._xOffset;\n        const isRtl = this._overlayRef.getConfig().direction === 'rtl';\n        let marginLeft = '';\n        let marginRight = '';\n        let justifyContent = '';\n        if (shouldBeFlushHorizontally) {\n            justifyContent = 'flex-start';\n        }\n        else if (xPosition === 'center') {\n            justifyContent = 'center';\n            if (isRtl) {\n                marginRight = xOffset;\n            }\n            else {\n                marginLeft = xOffset;\n            }\n        }\n        else if (isRtl) {\n            if (xPosition === 'left' || xPosition === 'end') {\n                justifyContent = 'flex-end';\n                marginLeft = xOffset;\n            }\n            else if (xPosition === 'right' || xPosition === 'start') {\n                justifyContent = 'flex-start';\n                marginRight = xOffset;\n            }\n        }\n        else if (xPosition === 'left' || xPosition === 'start') {\n            justifyContent = 'flex-start';\n            marginLeft = xOffset;\n        }\n        else if (xPosition === 'right' || xPosition === 'end') {\n            justifyContent = 'flex-end';\n            marginRight = xOffset;\n        }\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : marginLeft;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = shouldBeFlushHorizontally ? '0' : marginRight;\n        parentStyles.justifyContent = justifyContent;\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent =\n            parentStyles.alignItems =\n                styles.marginTop =\n                    styles.marginBottom =\n                        styles.marginLeft =\n                            styles.marginRight =\n                                styles.position =\n                                    '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayPositionBuilder, deps: [{ token: i1.ViewportRuler }, { token: DOCUMENT }, { token: i1$1.Platform }, { token: OverlayContainer }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayPositionBuilder, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayPositionBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }, { type: OverlayContainer }] });\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._animationsModuleType = _animationsModuleType;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === 'NoopAnimations', this._injector.get(EnvironmentInjector));\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Overlay, deps: [{ token: ScrollStrategyOptions }, { token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: OverlayPositionBuilder }, { token: OverlayKeyboardDispatcher }, { token: i0.Injector }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i5.Directionality }, { token: i6.Location }, { token: OverlayOutsideClickDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Overlay, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: i0.Injector }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i5.Directionality }, { type: i6.Location }, { type: OverlayOutsideClickDispatcher }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }, {\n                    type: Optional\n                }] }] });\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n    },\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkOverlayOrigin, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkOverlayOrigin, isStandalone: true, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkOverlayOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }] });\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() {\n        return this._offsetX;\n    }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() {\n        return this._offsetY;\n    }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether the overlay should be disposed of when the user goes backwards/forwards in history. */\n    get disposeOnNavigation() {\n        return this._disposeOnNavigation;\n    }\n    set disposeOnNavigation(value) {\n        this._disposeOnNavigation = value;\n    }\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        this._disposeOnNavigation = false;\n        this._ngZone = inject(NgZone);\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Whether or not the overlay should attach a backdrop. */\n        this.hasBackdrop = false;\n        /** Whether or not the overlay should be locked when scrolling. */\n        this.lockPosition = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this.flexibleDimensions = false;\n        /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n        this.growAfterOpen = false;\n        /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n        this.push = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = (this._overlayRef = this._overlay.create(this._buildConfig()));\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            const origin = this._getOriginElement();\n            const target = _getEventTarget(event);\n            if (!origin || (origin !== target && !origin.contains(target))) {\n                this.overlayOutsideClick.next(event);\n            }\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = (this._position =\n            this.positionStrategy || this._createPositionStrategy());\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop,\n            disposeOnNavigation: this.disposeOnNavigation,\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this._getOrigin())\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay.position().flexibleConnectedTo(this._getOrigin());\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    _getOrigin() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef;\n        }\n        else {\n            return this.origin;\n        }\n    }\n    _getOriginElement() {\n        if (this.origin instanceof CdkOverlayOrigin) {\n            return this.origin.elementRef.nativeElement;\n        }\n        if (this.origin instanceof ElementRef) {\n            return this.origin.nativeElement;\n        }\n        if (typeof Element !== 'undefined' && this.origin instanceof Element) {\n            return this.origin;\n        }\n        return null;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this._ngZone.run(() => this.positionChange.emit(position));\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkConnectedOverlay, deps: [{ token: Overlay }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkConnectedOverlay, isStandalone: true, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: { origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\", booleanAttribute], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\", booleanAttribute], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\", booleanAttribute], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\", booleanAttribute], push: [\"cdkConnectedOverlayPush\", \"push\", booleanAttribute], disposeOnNavigation: [\"cdkConnectedOverlayDisposeOnNavigation\", \"disposeOnNavigation\", booleanAttribute] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkConnectedOverlay, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: Overlay }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n                }] }, { type: i5.Directionality, decorators: [{\n                    type: Optional\n                }] }], propDecorators: { origin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOrigin']\n            }], positions: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositions']\n            }], positionStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPositionStrategy']\n            }], offsetX: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetX']\n            }], offsetY: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOffsetY']\n            }], width: [{\n                type: Input,\n                args: ['cdkConnectedOverlayWidth']\n            }], height: [{\n                type: Input,\n                args: ['cdkConnectedOverlayHeight']\n            }], minWidth: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinWidth']\n            }], minHeight: [{\n                type: Input,\n                args: ['cdkConnectedOverlayMinHeight']\n            }], backdropClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayBackdropClass']\n            }], panelClass: [{\n                type: Input,\n                args: ['cdkConnectedOverlayPanelClass']\n            }], viewportMargin: [{\n                type: Input,\n                args: ['cdkConnectedOverlayViewportMargin']\n            }], scrollStrategy: [{\n                type: Input,\n                args: ['cdkConnectedOverlayScrollStrategy']\n            }], open: [{\n                type: Input,\n                args: ['cdkConnectedOverlayOpen']\n            }], disableClose: [{\n                type: Input,\n                args: ['cdkConnectedOverlayDisableClose']\n            }], transformOriginSelector: [{\n                type: Input,\n                args: ['cdkConnectedOverlayTransformOriginOn']\n            }], hasBackdrop: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayHasBackdrop', transform: booleanAttribute }]\n            }], lockPosition: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayLockPosition', transform: booleanAttribute }]\n            }], flexibleDimensions: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayFlexibleDimensions', transform: booleanAttribute }]\n            }], growAfterOpen: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayGrowAfterOpen', transform: booleanAttribute }]\n            }], push: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayPush', transform: booleanAttribute }]\n            }], disposeOnNavigation: [{\n                type: Input,\n                args: [{ alias: 'cdkConnectedOverlayDisposeOnNavigation', transform: booleanAttribute }]\n            }], backdropClick: [{\n                type: Output\n            }], positionChange: [{\n                type: Output\n            }], attach: [{\n                type: Output\n            }], detach: [{\n                type: Output\n            }], overlayKeydown: [{\n                type: Output\n            }], overlayOutsideClick: [{\n                type: Output\n            }] } });\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nclass OverlayModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayModule, imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin], exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayModule, providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: OverlayModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return (_document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: FullscreenOverlayContainer, deps: [{ token: DOCUMENT }, { token: i1$1.Platform }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: FullscreenOverlayContainer, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: FullscreenOverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1$1.Platform }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, STANDARD_DROPDOWN_ADJACENT_POSITIONS, STANDARD_DROPDOWN_BELOW_POSITIONS, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition };\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function takeWhile(predicate, inclusive = false) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const result = predicate(value, index++);\n            (result || inclusive) && subscriber.next(value);\n            !result && subscriber.complete();\n        }));\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n    return (wrapperSource) => {\n        let connection;\n        let resetConnection;\n        let subject;\n        let refCount = 0;\n        let hasCompleted = false;\n        let hasErrored = false;\n        const cancelReset = () => {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = undefined;\n        };\n        const reset = () => {\n            cancelReset();\n            connection = subject = undefined;\n            hasCompleted = hasErrored = false;\n        };\n        const resetAndUnsubscribe = () => {\n            const conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate((source, subscriber) => {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(() => {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection &&\n                refCount > 0) {\n                connection = new SafeSubscriber({\n                    next: (value) => dest.next(value),\n                    error: (err) => {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: () => {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                innerFrom(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on, ...args) {\n    if (on === true) {\n        reset();\n        return;\n    }\n    if (on === false) {\n        return;\n    }\n    const onSubscriber = new SafeSubscriber({\n        next: () => {\n            onSubscriber.unsubscribe();\n            reset();\n        },\n    });\n    return innerFrom(on(...args)).subscribe(onSubscriber);\n}\n","import * as i0 from '@angular/core';\nimport { inject, NgZone, Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { filter, shareReplay, takeUntil } from 'rxjs/operators';\n\n/**\n * Handler that logs \"ResizeObserver loop limit exceeded\" errors.\n * These errors are not shown in the Chrome console, so we log them to ensure developers are aware.\n * @param e The error\n */\nconst loopLimitExceededErrorHandler = (e) => {\n    if (e instanceof ErrorEvent && e.message === 'ResizeObserver loop limit exceeded') {\n        console.error(`${e.message}. This could indicate a performance issue with your app. See https://github.com/WICG/resize-observer/blob/master/explainer.md#error-handling`);\n    }\n};\n/**\n * A shared ResizeObserver to be used for a particular box type (content-box, border-box, or\n * device-pixel-content-box)\n */\nclass SingleBoxSharedResizeObserver {\n    constructor(\n    /** The box type to observe for resizes. */\n    _box) {\n        this._box = _box;\n        /** Stream that emits when the shared observer is destroyed. */\n        this._destroyed = new Subject();\n        /** Stream of all events from the ResizeObserver. */\n        this._resizeSubject = new Subject();\n        /** A map of elements to streams of their resize events. */\n        this._elementObservables = new Map();\n        if (typeof ResizeObserver !== 'undefined') {\n            this._resizeObserver = new ResizeObserver(entries => this._resizeSubject.next(entries));\n        }\n    }\n    /**\n     * Gets a stream of resize events for the given element.\n     * @param target The element to observe.\n     * @return The stream of resize events for the element.\n     */\n    observe(target) {\n        if (!this._elementObservables.has(target)) {\n            this._elementObservables.set(target, new Observable(observer => {\n                const subscription = this._resizeSubject.subscribe(observer);\n                this._resizeObserver?.observe(target, { box: this._box });\n                return () => {\n                    this._resizeObserver?.unobserve(target);\n                    subscription.unsubscribe();\n                    this._elementObservables.delete(target);\n                };\n            }).pipe(filter(entries => entries.some(entry => entry.target === target)), \n            // Share a replay of the last event so that subsequent calls to observe the same element\n            // receive initial sizing info like the first one. Also enable ref counting so the\n            // element will be automatically unobserved when there are no more subscriptions.\n            shareReplay({ bufferSize: 1, refCount: true }), takeUntil(this._destroyed)));\n        }\n        return this._elementObservables.get(target);\n    }\n    /** Destroys this instance. */\n    destroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._resizeSubject.complete();\n        this._elementObservables.clear();\n    }\n}\n/**\n * Allows observing resize events on multiple elements using a shared set of ResizeObserver.\n * Sharing a ResizeObserver instance is recommended for better performance (see\n * https://github.com/WICG/resize-observer/issues/59).\n *\n * Rather than share a single `ResizeObserver`, this class creates one `ResizeObserver` per type\n * of observed box ('content-box', 'border-box', and 'device-pixel-content-box'). This avoids\n * later calls to `observe` with a different box type from influencing the events dispatched to\n * earlier calls.\n */\nclass SharedResizeObserver {\n    constructor() {\n        /** Map of box type to shared resize observer. */\n        this._observers = new Map();\n        /** The Angular zone. */\n        this._ngZone = inject(NgZone);\n        if (typeof ResizeObserver !== 'undefined' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            this._ngZone.runOutsideAngular(() => {\n                window.addEventListener('error', loopLimitExceededErrorHandler);\n            });\n        }\n    }\n    ngOnDestroy() {\n        for (const [, observer] of this._observers) {\n            observer.destroy();\n        }\n        this._observers.clear();\n        if (typeof ResizeObserver !== 'undefined' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            window.removeEventListener('error', loopLimitExceededErrorHandler);\n        }\n    }\n    /**\n     * Gets a stream of resize events for the given target element and box type.\n     * @param target The element to observe for resizes.\n     * @param options Options to pass to the `ResizeObserver`\n     * @return The stream of resize events for the element.\n     */\n    observe(target, options) {\n        const box = options?.box || 'content-box';\n        if (!this._observers.has(box)) {\n            this._observers.set(box, new SingleBoxSharedResizeObserver(box));\n        }\n        return this._observers.get(box).observe(target);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: SharedResizeObserver, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: SharedResizeObserver, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: SharedResizeObserver, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SharedResizeObserver };\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n","import * as i0 from '@angular/core';\nimport { Directive, InjectionToken, Attribute, Input, inject, NgZone, Component, ChangeDetectionStrategy, ViewEncapsulation, ViewChild, contentChild, Injector, computed, afterRender, ANIMATION_MODULE_TYPE, Optional, Inject, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/platform';\nimport { DOCUMENT, NgTemplateOutlet, CommonModule } from '@angular/common';\nimport { Subscription, Subject, merge } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { SharedResizeObserver } from '@angular/cdk/observers/private';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** The floating label for a `mat-form-field`. */\nclass MatLabel {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatLabel, isStandalone: true, selector: \"mat-label\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-label',\n                    standalone: true,\n                }]\n        }] });\n\nlet nextUniqueId$2 = 0;\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_ERROR = new InjectionToken('MatError');\n/** Single error message to be shown underneath the form-field. */\nclass MatError {\n    constructor(ariaLive, elementRef) {\n        this.id = `mat-mdc-error-${nextUniqueId$2++}`;\n        // If no aria-live value is set add 'polite' as a default. This is preferred over setting\n        // role='alert' so that screen readers do not interrupt the current task to read this aloud.\n        if (!ariaLive) {\n            elementRef.nativeElement.setAttribute('aria-live', 'polite');\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatError, deps: [{ token: 'aria-live', attribute: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatError, isStandalone: true, selector: \"mat-error, [matError]\", inputs: { id: \"id\" }, host: { attributes: { \"aria-atomic\": \"true\" }, properties: { \"id\": \"id\" }, classAttribute: \"mat-mdc-form-field-error mat-mdc-form-field-bottom-align\" }, providers: [{ provide: MAT_ERROR, useExisting: MatError }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatError, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-error, [matError]',\n                    host: {\n                        'class': 'mat-mdc-form-field-error mat-mdc-form-field-bottom-align',\n                        'aria-atomic': 'true',\n                        '[id]': 'id',\n                    },\n                    providers: [{ provide: MAT_ERROR, useExisting: MatError }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['aria-live']\n                }] }, { type: i0.ElementRef }], propDecorators: { id: [{\n                type: Input\n            }] } });\n\nlet nextUniqueId$1 = 0;\n/** Hint text to be shown underneath the form field control. */\nclass MatHint {\n    constructor() {\n        /** Whether to align the hint label at the start or end of the line. */\n        this.align = 'start';\n        /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n        this.id = `mat-mdc-hint-${nextUniqueId$1++}`;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHint, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatHint, isStandalone: true, selector: \"mat-hint\", inputs: { align: \"align\", id: \"id\" }, host: { properties: { \"class.mat-mdc-form-field-hint-end\": \"align === \\\"end\\\"\", \"id\": \"id\", \"attr.align\": \"null\" }, classAttribute: \"mat-mdc-form-field-hint mat-mdc-form-field-bottom-align\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHint, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-hint',\n                    host: {\n                        'class': 'mat-mdc-form-field-hint mat-mdc-form-field-bottom-align',\n                        '[class.mat-mdc-form-field-hint-end]': 'align === \"end\"',\n                        '[id]': 'id',\n                        // Remove align attribute to prevent it from interfering with layout.\n                        '[attr.align]': 'null',\n                    },\n                    standalone: true,\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_PREFIX = new InjectionToken('MatPrefix');\n/** Prefix to be placed in front of the form field. */\nclass MatPrefix {\n    constructor() {\n        this._isText = false;\n    }\n    set _isTextSelector(value) {\n        this._isText = true;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatPrefix, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatPrefix, isStandalone: true, selector: \"[matPrefix], [matIconPrefix], [matTextPrefix]\", inputs: { _isTextSelector: [\"matTextPrefix\", \"_isTextSelector\"] }, providers: [{ provide: MAT_PREFIX, useExisting: MatPrefix }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatPrefix, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matPrefix], [matIconPrefix], [matTextPrefix]',\n                    providers: [{ provide: MAT_PREFIX, useExisting: MatPrefix }],\n                    standalone: true,\n                }]\n        }], propDecorators: { _isTextSelector: [{\n                type: Input,\n                args: ['matTextPrefix']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SUFFIX = new InjectionToken('MatSuffix');\n/** Suffix to be placed at the end of the form field. */\nclass MatSuffix {\n    constructor() {\n        this._isText = false;\n    }\n    set _isTextSelector(value) {\n        this._isText = true;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSuffix, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatSuffix, isStandalone: true, selector: \"[matSuffix], [matIconSuffix], [matTextSuffix]\", inputs: { _isTextSelector: [\"matTextSuffix\", \"_isTextSelector\"] }, providers: [{ provide: MAT_SUFFIX, useExisting: MatSuffix }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSuffix, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matSuffix], [matIconSuffix], [matTextSuffix]',\n                    providers: [{ provide: MAT_SUFFIX, useExisting: MatSuffix }],\n                    standalone: true,\n                }]\n        }], propDecorators: { _isTextSelector: [{\n                type: Input,\n                args: ['matTextSuffix']\n            }] } });\n\n/** An injion token for the parent form-field. */\nconst FLOATING_LABEL_PARENT = new InjectionToken('FloatingLabelParent');\n/**\n * Internal directive that maintains a MDC floating label. This directive does not\n * use the `MDCFloatingLabelFoundation` class, as it is not worth the size cost of\n * including it just to measure the label width and toggle some classes.\n *\n * The use of a directive allows us to conditionally render a floating label in the\n * template without having to manually manage instantiation and destruction of the\n * floating label component based on.\n *\n * The component is responsible for setting up the floating label styles, measuring label\n * width for the outline notch, and providing inputs that can be used to toggle the\n * label's floating or required state.\n */\nclass MatFormFieldFloatingLabel {\n    /** Whether the label is floating. */\n    get floating() {\n        return this._floating;\n    }\n    set floating(value) {\n        this._floating = value;\n        if (this.monitorResize) {\n            this._handleResize();\n        }\n    }\n    /** Whether to monitor for resize events on the floating label. */\n    get monitorResize() {\n        return this._monitorResize;\n    }\n    set monitorResize(value) {\n        this._monitorResize = value;\n        if (this._monitorResize) {\n            this._subscribeToResize();\n        }\n        else {\n            this._resizeSubscription.unsubscribe();\n        }\n    }\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n        this._floating = false;\n        this._monitorResize = false;\n        /** The shared ResizeObserver. */\n        this._resizeObserver = inject(SharedResizeObserver);\n        /** The Angular zone. */\n        this._ngZone = inject(NgZone);\n        /** The parent form-field. */\n        this._parent = inject(FLOATING_LABEL_PARENT);\n        /** The current resize event subscription. */\n        this._resizeSubscription = new Subscription();\n    }\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Gets the width of the label. Used for the outline notch. */\n    getWidth() {\n        return estimateScrollWidth(this._elementRef.nativeElement);\n    }\n    /** Gets the HTML element for the floating label. */\n    get element() {\n        return this._elementRef.nativeElement;\n    }\n    /** Handles resize events from the ResizeObserver. */\n    _handleResize() {\n        // In the case where the label grows in size, the following sequence of events occurs:\n        // 1. The label grows by 1px triggering the ResizeObserver\n        // 2. The notch is expanded to accommodate the entire label\n        // 3. The label expands to its full width, triggering the ResizeObserver again\n        //\n        // This is expected, but If we allow this to all happen within the same macro task it causes an\n        // error: `ResizeObserver loop limit exceeded`. Therefore we push the notch resize out until\n        // the next macro task.\n        setTimeout(() => this._parent._handleLabelResized());\n    }\n    /** Subscribes to resize events. */\n    _subscribeToResize() {\n        this._resizeSubscription.unsubscribe();\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeSubscription = this._resizeObserver\n                .observe(this._elementRef.nativeElement, { box: 'border-box' })\n                .subscribe(() => this._handleResize());\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormFieldFloatingLabel, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatFormFieldFloatingLabel, isStandalone: true, selector: \"label[matFormFieldFloatingLabel]\", inputs: { floating: \"floating\", monitorResize: \"monitorResize\" }, host: { properties: { \"class.mdc-floating-label--float-above\": \"floating\" }, classAttribute: \"mdc-floating-label mat-mdc-floating-label\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormFieldFloatingLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'label[matFormFieldFloatingLabel]',\n                    host: {\n                        'class': 'mdc-floating-label mat-mdc-floating-label',\n                        '[class.mdc-floating-label--float-above]': 'floating',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { floating: [{\n                type: Input\n            }], monitorResize: [{\n                type: Input\n            }] } });\n/**\n * Estimates the scroll width of an element.\n * via https://github.com/material-components/material-components-web/blob/c0a11ef0d000a098fd0c372be8f12d6a99302855/packages/mdc-dom/ponyfill.ts\n */\nfunction estimateScrollWidth(element) {\n    // Check the offsetParent. If the element inherits display: none from any\n    // parent, the offsetParent property will be null (see\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).\n    // This check ensures we only clone the node when necessary.\n    const htmlEl = element;\n    if (htmlEl.offsetParent !== null) {\n        return htmlEl.scrollWidth;\n    }\n    const clone = htmlEl.cloneNode(true);\n    clone.style.setProperty('position', 'absolute');\n    clone.style.setProperty('transform', 'translate(-9999px, -9999px)');\n    document.documentElement.appendChild(clone);\n    const scrollWidth = clone.scrollWidth;\n    clone.remove();\n    return scrollWidth;\n}\n\n/** Class added when the line ripple is active. */\nconst ACTIVATE_CLASS = 'mdc-line-ripple--active';\n/** Class added when the line ripple is being deactivated. */\nconst DEACTIVATING_CLASS = 'mdc-line-ripple--deactivating';\n/**\n * Internal directive that creates an instance of the MDC line-ripple component. Using a\n * directive allows us to conditionally render a line-ripple in the template without having\n * to manually create and destroy the `MDCLineRipple` component whenever the condition changes.\n *\n * The directive sets up the styles for the line-ripple and provides an API for activating\n * and deactivating the line-ripple.\n */\nclass MatFormFieldLineRipple {\n    constructor(_elementRef, ngZone) {\n        this._elementRef = _elementRef;\n        this._handleTransitionEnd = (event) => {\n            const classList = this._elementRef.nativeElement.classList;\n            const isDeactivating = classList.contains(DEACTIVATING_CLASS);\n            if (event.propertyName === 'opacity' && isDeactivating) {\n                classList.remove(ACTIVATE_CLASS, DEACTIVATING_CLASS);\n            }\n        };\n        ngZone.runOutsideAngular(() => {\n            _elementRef.nativeElement.addEventListener('transitionend', this._handleTransitionEnd);\n        });\n    }\n    activate() {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(DEACTIVATING_CLASS);\n        classList.add(ACTIVATE_CLASS);\n    }\n    deactivate() {\n        this._elementRef.nativeElement.classList.add(DEACTIVATING_CLASS);\n    }\n    ngOnDestroy() {\n        this._elementRef.nativeElement.removeEventListener('transitionend', this._handleTransitionEnd);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormFieldLineRipple, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatFormFieldLineRipple, isStandalone: true, selector: \"div[matFormFieldLineRipple]\", host: { classAttribute: \"mdc-line-ripple\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormFieldLineRipple, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'div[matFormFieldLineRipple]',\n                    host: {\n                        'class': 'mdc-line-ripple',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }] });\n\n/**\n * Internal component that creates an instance of the MDC notched-outline component.\n *\n * The component sets up the HTML structure and styles for the notched-outline. It provides\n * inputs to toggle the notch state and width.\n */\nclass MatFormFieldNotchedOutline {\n    constructor(_elementRef, _ngZone) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /** Whether the notch should be opened. */\n        this.open = false;\n    }\n    ngAfterViewInit() {\n        const label = this._elementRef.nativeElement.querySelector('.mdc-floating-label');\n        if (label) {\n            this._elementRef.nativeElement.classList.add('mdc-notched-outline--upgraded');\n            if (typeof requestAnimationFrame === 'function') {\n                label.style.transitionDuration = '0s';\n                this._ngZone.runOutsideAngular(() => {\n                    requestAnimationFrame(() => (label.style.transitionDuration = ''));\n                });\n            }\n        }\n        else {\n            this._elementRef.nativeElement.classList.add('mdc-notched-outline--no-label');\n        }\n    }\n    _setNotchWidth(labelWidth) {\n        if (!this.open || !labelWidth) {\n            this._notch.nativeElement.style.width = '';\n        }\n        else {\n            const NOTCH_ELEMENT_PADDING = 8;\n            const NOTCH_ELEMENT_BORDER = 1;\n            this._notch.nativeElement.style.width = `calc(${labelWidth}px * var(--mat-mdc-form-field-floating-label-scale, 0.75) + ${NOTCH_ELEMENT_PADDING + NOTCH_ELEMENT_BORDER}px)`;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormFieldNotchedOutline, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatFormFieldNotchedOutline, isStandalone: true, selector: \"div[matFormFieldNotchedOutline]\", inputs: { open: [\"matFormFieldNotchedOutlineOpen\", \"open\"] }, host: { properties: { \"class.mdc-notched-outline--notched\": \"open\" }, classAttribute: \"mdc-notched-outline\" }, viewQueries: [{ propertyName: \"_notch\", first: true, predicate: [\"notch\"], descendants: true }], ngImport: i0, template: \"<div class=\\\"mat-mdc-notch-piece mdc-notched-outline__leading\\\"></div>\\n<div class=\\\"mat-mdc-notch-piece mdc-notched-outline__notch\\\" #notch>\\n  <ng-content></ng-content>\\n</div>\\n<div class=\\\"mat-mdc-notch-piece mdc-notched-outline__trailing\\\"></div>\\n\", changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormFieldNotchedOutline, decorators: [{\n            type: Component,\n            args: [{ selector: 'div[matFormFieldNotchedOutline]', host: {\n                        'class': 'mdc-notched-outline',\n                        // Besides updating the notch state through the MDC component, we toggle this class through\n                        // a host binding in order to ensure that the notched-outline renders correctly on the server.\n                        '[class.mdc-notched-outline--notched]': 'open',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, template: \"<div class=\\\"mat-mdc-notch-piece mdc-notched-outline__leading\\\"></div>\\n<div class=\\\"mat-mdc-notch-piece mdc-notched-outline__notch\\\" #notch>\\n  <ng-content></ng-content>\\n</div>\\n<div class=\\\"mat-mdc-notch-piece mdc-notched-outline__trailing\\\"></div>\\n\" }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { open: [{\n                type: Input,\n                args: ['matFormFieldNotchedOutlineOpen']\n            }], _notch: [{\n                type: ViewChild,\n                args: ['notch']\n            }] } });\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nconst matFormFieldAnimations = {\n    /** Animation that transitions the form field's error and hint messages. */\n    transitionMessages: trigger('transitionMessages', [\n        // TODO(mmalerba): Use angular animations for label animation as well.\n        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n        transition('void => enter', [\n            style({ opacity: 0, transform: 'translateY(-5px)' }),\n            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nclass MatFormFieldControl {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormFieldControl, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatFormFieldControl, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormFieldControl, decorators: [{\n            type: Directive\n        }] });\n\n/** @docs-private */\nfunction getMatFormFieldPlaceholderConflictError() {\n    return Error('Placeholder attribute and child element were both specified.');\n}\n/** @docs-private */\nfunction getMatFormFieldDuplicatedHintError(align) {\n    return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/** @docs-private */\nfunction getMatFormFieldMissingControlError() {\n    return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nconst MAT_FORM_FIELD = new InjectionToken('MatFormField');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\nlet nextUniqueId = 0;\n/** Default appearance used by the form field. */\nconst DEFAULT_APPEARANCE = 'fill';\n/**\n * Whether the label for form fields should by default float `always`,\n * `never`, or `auto`.\n */\nconst DEFAULT_FLOAT_LABEL = 'auto';\n/** Default way that the subscript element height is set. */\nconst DEFAULT_SUBSCRIPT_SIZING = 'fixed';\n/**\n * Default transform for docked floating labels in a MDC text-field. This value has been\n * extracted from the MDC text-field styles because we programmatically modify the docked\n * label transform, but do not want to accidentally discard the default label transform.\n */\nconst FLOATING_LABEL_DEFAULT_DOCKED_TRANSFORM = `translateY(-50%)`;\n/** Container for form controls that applies Material Design styling and behavior. */\nclass MatFormField {\n    /** Whether the required marker should be hidden. */\n    get hideRequiredMarker() {\n        return this._hideRequiredMarker;\n    }\n    set hideRequiredMarker(value) {\n        this._hideRequiredMarker = coerceBooleanProperty(value);\n    }\n    /** Whether the label should always float or float as the user types. */\n    get floatLabel() {\n        return this._floatLabel || this._defaults?.floatLabel || DEFAULT_FLOAT_LABEL;\n    }\n    set floatLabel(value) {\n        if (value !== this._floatLabel) {\n            this._floatLabel = value;\n            // For backwards compatibility. Custom form field controls or directives might set\n            // the \"floatLabel\" input and expect the form field view to be updated automatically.\n            // e.g. autocomplete trigger. Ideally we'd get rid of this and the consumers would just\n            // emit the \"stateChanges\" observable. TODO(devversion): consider removing.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** The form field appearance style. */\n    get appearance() {\n        return this._appearance;\n    }\n    set appearance(value) {\n        const oldValue = this._appearance;\n        const newAppearance = value || this._defaults?.appearance || DEFAULT_APPEARANCE;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (newAppearance !== 'fill' && newAppearance !== 'outline') {\n                throw new Error(`MatFormField: Invalid appearance \"${newAppearance}\", valid values are \"fill\" or \"outline\".`);\n            }\n        }\n        this._appearance = newAppearance;\n        if (this._appearance === 'outline' && this._appearance !== oldValue) {\n            // If the appearance has been switched to `outline`, the label offset needs to be updated.\n            // The update can happen once the view has been re-checked, but not immediately because\n            // the view has not been updated and the notched-outline floating label is not present.\n            this._needsOutlineLabelOffsetUpdate = true;\n        }\n    }\n    /**\n     * Whether the form field should reserve space for one line of hint/error text (default)\n     * or to have the spacing grow from 0px as needed based on the size of the hint/error content.\n     * Note that when using dynamic sizing, layout shifts will occur when hint/error text changes.\n     */\n    get subscriptSizing() {\n        return this._subscriptSizing || this._defaults?.subscriptSizing || DEFAULT_SUBSCRIPT_SIZING;\n    }\n    set subscriptSizing(value) {\n        this._subscriptSizing = value || this._defaults?.subscriptSizing || DEFAULT_SUBSCRIPT_SIZING;\n    }\n    /** Text for the form field hint. */\n    get hintLabel() {\n        return this._hintLabel;\n    }\n    set hintLabel(value) {\n        this._hintLabel = value;\n        this._processHints();\n    }\n    /** Gets the current form field control */\n    get _control() {\n        return this._explicitFormFieldControl || this._formFieldControl;\n    }\n    set _control(value) {\n        this._explicitFormFieldControl = value;\n    }\n    constructor(_elementRef, _changeDetectorRef, \n    /**\n     * @deprecated not needed, to be removed.\n     * @breaking-change 19.0.0 remove this param\n     */\n    _unusedNgZone, _dir, _platform, _defaults, _animationMode, \n    /**\n     * @deprecated not needed, to be removed.\n     * @breaking-change 17.0.0 remove this param\n     */\n    _unusedDocument) {\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._defaults = _defaults;\n        this._animationMode = _animationMode;\n        this._labelChild = contentChild(MatLabel);\n        this._hideRequiredMarker = false;\n        /**\n         * Theme color of the form field. This API is supported in M2 themes only, it\n         * has no effect in M3 themes.\n         *\n         * For information on applying color variants in M3, see\n         * https://material.angular.io/guide/theming#using-component-color-variants.\n         */\n        this.color = 'primary';\n        this._appearance = DEFAULT_APPEARANCE;\n        this._subscriptSizing = null;\n        this._hintLabel = '';\n        this._hasIconPrefix = false;\n        this._hasTextPrefix = false;\n        this._hasIconSuffix = false;\n        this._hasTextSuffix = false;\n        // Unique id for the internal form field label.\n        this._labelId = `mat-mdc-form-field-label-${nextUniqueId++}`;\n        // Unique id for the hint label.\n        this._hintLabelId = `mat-mdc-hint-${nextUniqueId++}`;\n        /** State of the mat-hint and mat-error animations. */\n        this._subscriptAnimationState = '';\n        this._destroyed = new Subject();\n        this._isFocused = null;\n        this._needsOutlineLabelOffsetUpdate = false;\n        this._previousControl = null;\n        this._injector = inject(Injector);\n        /**\n         * Gets the id of the label element. If no label is present, returns `null`.\n         */\n        this.getLabelId = computed(() => (this._hasFloatingLabel() ? this._labelId : null));\n        this._hasFloatingLabel = computed(() => !!this._labelChild());\n        if (_defaults) {\n            if (_defaults.appearance) {\n                this.appearance = _defaults.appearance;\n            }\n            this._hideRequiredMarker = Boolean(_defaults?.hideRequiredMarker);\n            if (_defaults.color) {\n                this.color = _defaults.color;\n            }\n        }\n    }\n    ngAfterViewInit() {\n        // Initial focus state sync. This happens rarely, but we want to account for\n        // it in case the form field control has \"focused\" set to true on init.\n        this._updateFocusState();\n        // Enable animations now. This ensures we don't animate on initial render.\n        this._subscriptAnimationState = 'enter';\n        // Because the above changes a value used in the template after it was checked, we need\n        // to trigger CD or the change might not be reflected if there is no other CD scheduled.\n        this._changeDetectorRef.detectChanges();\n    }\n    ngAfterContentInit() {\n        this._assertFormFieldControl();\n        this._initializeSubscript();\n        this._initializePrefixAndSuffix();\n        this._initializeOutlineLabelOffsetSubscriptions();\n    }\n    ngAfterContentChecked() {\n        this._assertFormFieldControl();\n        if (this._control !== this._previousControl) {\n            this._initializeControl(this._previousControl);\n            this._previousControl = this._control;\n        }\n    }\n    ngOnDestroy() {\n        this._stateChanges?.unsubscribe();\n        this._valueChanges?.unsubscribe();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form field\n     * should be positioned relative to.\n     */\n    getConnectedOverlayOrigin() {\n        return this._textField || this._elementRef;\n    }\n    /** Animates the placeholder up and locks it in position. */\n    _animateAndLockLabel() {\n        // This is for backwards compatibility only. Consumers of the form field might use\n        // this method. e.g. the autocomplete trigger. This method has been added to the non-MDC\n        // form field because setting \"floatLabel\" to \"always\" caused the label to float without\n        // animation. This is different in MDC where the label always animates, so this method\n        // is no longer necessary. There doesn't seem any benefit in adding logic to allow changing\n        // the floating label state without animations. The non-MDC implementation was inconsistent\n        // because it always animates if \"floatLabel\" is set away from \"always\".\n        // TODO(devversion): consider removing this method when releasing the MDC form field.\n        if (this._hasFloatingLabel()) {\n            this.floatLabel = 'always';\n        }\n    }\n    /** Initializes the registered form field control. */\n    _initializeControl(previousControl) {\n        const control = this._control;\n        const classPrefix = 'mat-mdc-form-field-type-';\n        if (previousControl) {\n            this._elementRef.nativeElement.classList.remove(classPrefix + previousControl.controlType);\n        }\n        if (control.controlType) {\n            this._elementRef.nativeElement.classList.add(classPrefix + control.controlType);\n        }\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._stateChanges?.unsubscribe();\n        this._stateChanges = control.stateChanges.subscribe(() => {\n            this._updateFocusState();\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        this._valueChanges?.unsubscribe();\n        // Run change detection if the value changes.\n        if (control.ngControl && control.ngControl.valueChanges) {\n            this._valueChanges = control.ngControl.valueChanges\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => this._changeDetectorRef.markForCheck());\n        }\n    }\n    _checkPrefixAndSuffixTypes() {\n        this._hasIconPrefix = !!this._prefixChildren.find(p => !p._isText);\n        this._hasTextPrefix = !!this._prefixChildren.find(p => p._isText);\n        this._hasIconSuffix = !!this._suffixChildren.find(s => !s._isText);\n        this._hasTextSuffix = !!this._suffixChildren.find(s => s._isText);\n    }\n    /** Initializes the prefix and suffix containers. */\n    _initializePrefixAndSuffix() {\n        this._checkPrefixAndSuffixTypes();\n        // Mark the form field as dirty whenever the prefix or suffix children change. This\n        // is necessary because we conditionally display the prefix/suffix containers based\n        // on whether there is projected content.\n        merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n            this._checkPrefixAndSuffixTypes();\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /**\n     * Initializes the subscript by validating hints and synchronizing \"aria-describedby\" ids\n     * with the custom form field control. Also subscribes to hint and error changes in order\n     * to be able to validate and synchronize ids on change.\n     */\n    _initializeSubscript() {\n        // Re-validate when the number of hints changes.\n        this._hintChildren.changes.subscribe(() => {\n            this._processHints();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Update the aria-described by when the number of errors changes.\n        this._errorChildren.changes.subscribe(() => {\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Initial mat-hint validation and subscript describedByIds sync.\n        this._validateHints();\n        this._syncDescribedByIds();\n    }\n    /** Throws an error if the form field's control is missing. */\n    _assertFormFieldControl() {\n        if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatFormFieldMissingControlError();\n        }\n    }\n    _updateFocusState() {\n        // Usually the MDC foundation would call \"activateFocus\" and \"deactivateFocus\" whenever\n        // certain DOM events are emitted. This is not possible in our implementation of the\n        // form field because we support abstract form field controls which are not necessarily\n        // of type input, nor do we have a reference to a native form field control element. Instead\n        // we handle the focus by checking if the abstract form field control focused state changes.\n        if (this._control.focused && !this._isFocused) {\n            this._isFocused = true;\n            this._lineRipple?.activate();\n        }\n        else if (!this._control.focused && (this._isFocused || this._isFocused === null)) {\n            this._isFocused = false;\n            this._lineRipple?.deactivate();\n        }\n        this._textField?.nativeElement.classList.toggle('mdc-text-field--focused', this._control.focused);\n    }\n    /**\n     * The floating label in the docked state needs to account for prefixes. The horizontal offset\n     * is calculated whenever the appearance changes to `outline`, the prefixes change, or when the\n     * form field is added to the DOM. This method sets up all subscriptions which are needed to\n     * trigger the label offset update.\n     */\n    _initializeOutlineLabelOffsetSubscriptions() {\n        // Whenever the prefix changes, schedule an update of the label offset.\n        // TODO(mmalerba): Use ResizeObserver to better support dynamically changing prefix content.\n        this._prefixChildren.changes.subscribe(() => (this._needsOutlineLabelOffsetUpdate = true));\n        // TODO(mmalerba): Split this into separate `afterRender` calls using the `EarlyRead` and\n        //  `Write` phases.\n        afterRender(() => {\n            if (this._needsOutlineLabelOffsetUpdate) {\n                this._needsOutlineLabelOffsetUpdate = false;\n                this._updateOutlineLabelOffset();\n            }\n        }, {\n            injector: this._injector,\n        });\n        this._dir.change\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => (this._needsOutlineLabelOffsetUpdate = true));\n    }\n    /** Whether the floating label should always float or not. */\n    _shouldAlwaysFloat() {\n        return this.floatLabel === 'always';\n    }\n    _hasOutline() {\n        return this.appearance === 'outline';\n    }\n    /**\n     * Whether the label should display in the infix. Labels in the outline appearance are\n     * displayed as part of the notched-outline and are horizontally offset to account for\n     * form field prefix content. This won't work in server side rendering since we cannot\n     * measure the width of the prefix container. To make the docked label appear as if the\n     * right offset has been calculated, we forcibly render the label inside the infix. Since\n     * the label is part of the infix, the label cannot overflow the prefix content.\n     */\n    _forceDisplayInfixLabel() {\n        return !this._platform.isBrowser && this._prefixChildren.length && !this._shouldLabelFloat();\n    }\n    _shouldLabelFloat() {\n        if (!this._hasFloatingLabel()) {\n            return false;\n        }\n        return this._control.shouldLabelFloat || this._shouldAlwaysFloat();\n    }\n    /**\n     * Determines whether a class from the AbstractControlDirective\n     * should be forwarded to the host element.\n     */\n    _shouldForward(prop) {\n        const control = this._control ? this._control.ngControl : null;\n        return control && control[prop];\n    }\n    /** Determines whether to display hints or errors. */\n    _getDisplayedMessages() {\n        return this._errorChildren && this._errorChildren.length > 0 && this._control.errorState\n            ? 'error'\n            : 'hint';\n    }\n    /** Handle label resize events. */\n    _handleLabelResized() {\n        this._refreshOutlineNotchWidth();\n    }\n    /** Refreshes the width of the outline-notch, if present. */\n    _refreshOutlineNotchWidth() {\n        if (!this._hasOutline() || !this._floatingLabel || !this._shouldLabelFloat()) {\n            this._notchedOutline?._setNotchWidth(0);\n        }\n        else {\n            this._notchedOutline?._setNotchWidth(this._floatingLabel.getWidth());\n        }\n    }\n    /** Does any extra processing that is required when handling the hints. */\n    _processHints() {\n        this._validateHints();\n        this._syncDescribedByIds();\n    }\n    /**\n     * Ensure that there is a maximum of one of each \"mat-hint\" alignment specified. The hint\n     * label specified set through the input is being considered as \"start\" aligned.\n     *\n     * This method is a noop if Angular runs in production mode.\n     */\n    _validateHints() {\n        if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            let startHint;\n            let endHint;\n            this._hintChildren.forEach((hint) => {\n                if (hint.align === 'start') {\n                    if (startHint || this.hintLabel) {\n                        throw getMatFormFieldDuplicatedHintError('start');\n                    }\n                    startHint = hint;\n                }\n                else if (hint.align === 'end') {\n                    if (endHint) {\n                        throw getMatFormFieldDuplicatedHintError('end');\n                    }\n                    endHint = hint;\n                }\n            });\n        }\n    }\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     */\n    _syncDescribedByIds() {\n        if (this._control) {\n            let ids = [];\n            // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n            if (this._control.userAriaDescribedBy &&\n                typeof this._control.userAriaDescribedBy === 'string') {\n                ids.push(...this._control.userAriaDescribedBy.split(' '));\n            }\n            if (this._getDisplayedMessages() === 'hint') {\n                const startHint = this._hintChildren\n                    ? this._hintChildren.find(hint => hint.align === 'start')\n                    : null;\n                const endHint = this._hintChildren\n                    ? this._hintChildren.find(hint => hint.align === 'end')\n                    : null;\n                if (startHint) {\n                    ids.push(startHint.id);\n                }\n                else if (this._hintLabel) {\n                    ids.push(this._hintLabelId);\n                }\n                if (endHint) {\n                    ids.push(endHint.id);\n                }\n            }\n            else if (this._errorChildren) {\n                ids.push(...this._errorChildren.map(error => error.id));\n            }\n            this._control.setDescribedByIds(ids);\n        }\n    }\n    /**\n     * Updates the horizontal offset of the label in the outline appearance. In the outline\n     * appearance, the notched-outline and label are not relative to the infix container because\n     * the outline intends to surround prefixes, suffixes and the infix. This means that the\n     * floating label by default overlaps prefixes in the docked state. To avoid this, we need to\n     * horizontally offset the label by the width of the prefix container. The MDC text-field does\n     * not need to do this because they use a fixed width for prefixes. Hence, they can simply\n     * incorporate the horizontal offset into their default text-field styles.\n     */\n    _updateOutlineLabelOffset() {\n        if (!this._hasOutline() || !this._floatingLabel) {\n            return;\n        }\n        const floatingLabel = this._floatingLabel.element;\n        // If no prefix is displayed, reset the outline label offset from potential\n        // previous label offset updates.\n        if (!(this._iconPrefixContainer || this._textPrefixContainer)) {\n            floatingLabel.style.transform = '';\n            return;\n        }\n        // If the form field is not attached to the DOM yet (e.g. in a tab), we defer\n        // the label offset update until the zone stabilizes.\n        if (!this._isAttachedToDom()) {\n            this._needsOutlineLabelOffsetUpdate = true;\n            return;\n        }\n        const iconPrefixContainer = this._iconPrefixContainer?.nativeElement;\n        const textPrefixContainer = this._textPrefixContainer?.nativeElement;\n        const iconPrefixContainerWidth = iconPrefixContainer?.getBoundingClientRect().width ?? 0;\n        const textPrefixContainerWidth = textPrefixContainer?.getBoundingClientRect().width ?? 0;\n        // If the directionality is RTL, the x-axis transform needs to be inverted. This\n        // is because `transformX` does not change based on the page directionality.\n        const negate = this._dir.value === 'rtl' ? '-1' : '1';\n        const prefixWidth = `${iconPrefixContainerWidth + textPrefixContainerWidth}px`;\n        const labelOffset = `var(--mat-mdc-form-field-label-offset-x, 0px)`;\n        const labelHorizontalOffset = `calc(${negate} * (${prefixWidth} + ${labelOffset}))`;\n        // Update the translateX of the floating label to account for the prefix container,\n        // but allow the CSS to override this setting via a CSS variable when the label is\n        // floating.\n        floatingLabel.style.transform = `var(\n        --mat-mdc-form-field-label-transform,\n        ${FLOATING_LABEL_DEFAULT_DOCKED_TRANSFORM} translateX(${labelHorizontalOffset})\n    )`;\n    }\n    /** Checks whether the form field is attached to the DOM. */\n    _isAttachedToDom() {\n        const element = this._elementRef.nativeElement;\n        if (element.getRootNode) {\n            const rootNode = element.getRootNode();\n            // If the element is inside the DOM the root node will be either the document\n            // or the closest shadow root, otherwise it'll be the element itself.\n            return rootNode && rootNode !== element;\n        }\n        // Otherwise fall back to checking if it's in the document. This doesn't account for\n        // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n        return document.documentElement.contains(element);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormField, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i1.Directionality }, { token: i2.Platform }, { token: MAT_FORM_FIELD_DEFAULT_OPTIONS, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: MatFormField, isStandalone: true, selector: \"mat-form-field\", inputs: { hideRequiredMarker: \"hideRequiredMarker\", color: \"color\", floatLabel: \"floatLabel\", appearance: \"appearance\", subscriptSizing: \"subscriptSizing\", hintLabel: \"hintLabel\" }, host: { properties: { \"class.mat-mdc-form-field-label-always-float\": \"_shouldAlwaysFloat()\", \"class.mat-mdc-form-field-has-icon-prefix\": \"_hasIconPrefix\", \"class.mat-mdc-form-field-has-icon-suffix\": \"_hasIconSuffix\", \"class.mat-form-field-invalid\": \"_control.errorState\", \"class.mat-form-field-disabled\": \"_control.disabled\", \"class.mat-form-field-autofilled\": \"_control.autofilled\", \"class.mat-form-field-no-animations\": \"_animationMode === \\\"NoopAnimations\\\"\", \"class.mat-form-field-appearance-fill\": \"appearance == \\\"fill\\\"\", \"class.mat-form-field-appearance-outline\": \"appearance == \\\"outline\\\"\", \"class.mat-form-field-hide-placeholder\": \"_hasFloatingLabel() && !_shouldLabelFloat()\", \"class.mat-focused\": \"_control.focused\", \"class.mat-primary\": \"color !== \\\"accent\\\" && color !== \\\"warn\\\"\", \"class.mat-accent\": \"color === \\\"accent\\\"\", \"class.mat-warn\": \"color === \\\"warn\\\"\", \"class.ng-untouched\": \"_shouldForward(\\\"untouched\\\")\", \"class.ng-touched\": \"_shouldForward(\\\"touched\\\")\", \"class.ng-pristine\": \"_shouldForward(\\\"pristine\\\")\", \"class.ng-dirty\": \"_shouldForward(\\\"dirty\\\")\", \"class.ng-valid\": \"_shouldForward(\\\"valid\\\")\", \"class.ng-invalid\": \"_shouldForward(\\\"invalid\\\")\", \"class.ng-pending\": \"_shouldForward(\\\"pending\\\")\" }, classAttribute: \"mat-mdc-form-field\" }, providers: [\n            { provide: MAT_FORM_FIELD, useExisting: MatFormField },\n            { provide: FLOATING_LABEL_PARENT, useExisting: MatFormField },\n        ], queries: [{ propertyName: \"_labelChild\", first: true, predicate: MatLabel, descendants: true, isSignal: true }, { propertyName: \"_formFieldControl\", first: true, predicate: MatFormFieldControl, descendants: true }, { propertyName: \"_prefixChildren\", predicate: MAT_PREFIX, descendants: true }, { propertyName: \"_suffixChildren\", predicate: MAT_SUFFIX, descendants: true }, { propertyName: \"_errorChildren\", predicate: MAT_ERROR, descendants: true }, { propertyName: \"_hintChildren\", predicate: MatHint, descendants: true }], viewQueries: [{ propertyName: \"_textField\", first: true, predicate: [\"textField\"], descendants: true }, { propertyName: \"_iconPrefixContainer\", first: true, predicate: [\"iconPrefixContainer\"], descendants: true }, { propertyName: \"_textPrefixContainer\", first: true, predicate: [\"textPrefixContainer\"], descendants: true }, { propertyName: \"_floatingLabel\", first: true, predicate: MatFormFieldFloatingLabel, descendants: true }, { propertyName: \"_notchedOutline\", first: true, predicate: MatFormFieldNotchedOutline, descendants: true }, { propertyName: \"_lineRipple\", first: true, predicate: MatFormFieldLineRipple, descendants: true }], exportAs: [\"matFormField\"], ngImport: i0, template: \"<ng-template #labelTemplate>\\n  <!--\\n    MDC recommends that the text-field is a `<label>` element. This rather complicates the\\n    setup because it would require every form-field control to explicitly set `aria-labelledby`.\\n    This is because the `<label>` itself contains more than the actual label (e.g. prefix, suffix\\n    or other projected content), and screen readers could potentially read out undesired content.\\n    Excluding elements from being printed out requires them to be marked with `aria-hidden`, or\\n    the form control is set to a scoped element for the label (using `aria-labelledby`). Both of\\n    these options seem to complicate the setup because we know exactly what content is rendered\\n    as part of the label, and we don't want to spend resources on walking through projected content\\n    to set `aria-hidden`. Nor do we want to set `aria-labelledby` on every form control if we could\\n    simply link the label to the control using the label `for` attribute.\\n  -->\\n  @if (_hasFloatingLabel()) {\\n    <label matFormFieldFloatingLabel\\n           [floating]=\\\"_shouldLabelFloat()\\\"\\n           [monitorResize]=\\\"_hasOutline()\\\"\\n           [id]=\\\"_labelId\\\"\\n           [attr.for]=\\\"_control.disableAutomaticLabeling ? null : _control.id\\\">\\n      <ng-content select=\\\"mat-label\\\"></ng-content>\\n      <!--\\n        We set the required marker as a separate element, in order to make it easier to target if\\n        apps want to override it and to be able to set `aria-hidden` so that screen readers don't\\n        pick it up.\\n       -->\\n       @if (!hideRequiredMarker && _control.required) {\\n         <span\\n           aria-hidden=\\\"true\\\"\\n           class=\\\"mat-mdc-form-field-required-marker mdc-floating-label--required\\\"></span>\\n       }\\n    </label>\\n  }\\n</ng-template>\\n\\n<div class=\\\"mat-mdc-text-field-wrapper mdc-text-field\\\" #textField\\n     [class.mdc-text-field--filled]=\\\"!_hasOutline()\\\"\\n     [class.mdc-text-field--outlined]=\\\"_hasOutline()\\\"\\n     [class.mdc-text-field--no-label]=\\\"!_hasFloatingLabel()\\\"\\n     [class.mdc-text-field--disabled]=\\\"_control.disabled\\\"\\n     [class.mdc-text-field--invalid]=\\\"_control.errorState\\\"\\n     (click)=\\\"_control.onContainerClick($event)\\\">\\n  @if (!_hasOutline() && !_control.disabled) {\\n    <div class=\\\"mat-mdc-form-field-focus-overlay\\\"></div>\\n  }\\n  <div class=\\\"mat-mdc-form-field-flex\\\">\\n    @if (_hasOutline()) {\\n      <div matFormFieldNotchedOutline [matFormFieldNotchedOutlineOpen]=\\\"_shouldLabelFloat()\\\">\\n        @if (!_forceDisplayInfixLabel()) {\\n          <ng-template [ngTemplateOutlet]=\\\"labelTemplate\\\"></ng-template>\\n        }\\n      </div>\\n    }\\n\\n    @if (_hasIconPrefix) {\\n      <div class=\\\"mat-mdc-form-field-icon-prefix\\\" #iconPrefixContainer>\\n        <ng-content select=\\\"[matPrefix], [matIconPrefix]\\\"></ng-content>\\n      </div>\\n    }\\n\\n    @if (_hasTextPrefix) {\\n      <div class=\\\"mat-mdc-form-field-text-prefix\\\" #textPrefixContainer>\\n        <ng-content select=\\\"[matTextPrefix]\\\"></ng-content>\\n      </div>\\n    }\\n\\n    <div class=\\\"mat-mdc-form-field-infix\\\">\\n      @if (!_hasOutline() || _forceDisplayInfixLabel()) {\\n        <ng-template [ngTemplateOutlet]=\\\"labelTemplate\\\"></ng-template>\\n      }\\n\\n      <ng-content></ng-content>\\n    </div>\\n\\n    @if (_hasTextSuffix) {\\n      <div class=\\\"mat-mdc-form-field-text-suffix\\\">\\n        <ng-content select=\\\"[matTextSuffix]\\\"></ng-content>\\n      </div>\\n    }\\n\\n    @if (_hasIconSuffix) {\\n      <div class=\\\"mat-mdc-form-field-icon-suffix\\\">\\n        <ng-content select=\\\"[matSuffix], [matIconSuffix]\\\"></ng-content>\\n      </div>\\n    }\\n  </div>\\n\\n  @if (!_hasOutline()) {\\n    <div matFormFieldLineRipple></div>\\n  }\\n</div>\\n\\n<div class=\\\"mat-mdc-form-field-subscript-wrapper mat-mdc-form-field-bottom-align\\\"\\n     [class.mat-mdc-form-field-subscript-dynamic-size]=\\\"subscriptSizing === 'dynamic'\\\">\\n\\n  @switch (_getDisplayedMessages()) {\\n    @case ('error') {\\n      <div class=\\\"mat-mdc-form-field-error-wrapper\\\"\\n           [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n        <ng-content select=\\\"mat-error, [matError]\\\"></ng-content>\\n      </div>\\n    }\\n\\n    @case ('hint') {\\n      <div class=\\\"mat-mdc-form-field-hint-wrapper\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n        @if (hintLabel) {\\n          <mat-hint [id]=\\\"_hintLabelId\\\">{{hintLabel}}</mat-hint>\\n        }\\n        <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n        <div class=\\\"mat-mdc-form-field-hint-spacer\\\"></div>\\n        <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n      </div>\\n    }\\n  }\\n</div>\\n\", styles: [\".mdc-text-field{display:inline-flex;align-items:baseline;padding:0 16px;position:relative;box-sizing:border-box;overflow:hidden;will-change:opacity,transform,color;border-top-left-radius:4px;border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.mdc-text-field__input{width:100%;min-width:0;border:none;border-radius:0;background:none;padding:0;-moz-appearance:none;-webkit-appearance:none;height:28px}.mdc-text-field__input::-webkit-calendar-picker-indicator{display:none}.mdc-text-field__input::-ms-clear{display:none}.mdc-text-field__input:focus{outline:none}.mdc-text-field__input:invalid{box-shadow:none}.mdc-text-field__input::placeholder{opacity:0}.mdc-text-field__input::-moz-placeholder{opacity:0}.mdc-text-field__input::-webkit-input-placeholder{opacity:0}.mdc-text-field__input:-ms-input-placeholder{opacity:0}.mdc-text-field--no-label .mdc-text-field__input::placeholder,.mdc-text-field--focused .mdc-text-field__input::placeholder{opacity:1}.mdc-text-field--no-label .mdc-text-field__input::-moz-placeholder,.mdc-text-field--focused .mdc-text-field__input::-moz-placeholder{opacity:1}.mdc-text-field--no-label .mdc-text-field__input::-webkit-input-placeholder,.mdc-text-field--focused .mdc-text-field__input::-webkit-input-placeholder{opacity:1}.mdc-text-field--no-label .mdc-text-field__input:-ms-input-placeholder,.mdc-text-field--focused .mdc-text-field__input:-ms-input-placeholder{opacity:1}.mdc-text-field--outlined .mdc-text-field__input,.mdc-text-field--filled.mdc-text-field--no-label .mdc-text-field__input{height:100%}.mdc-text-field--outlined .mdc-text-field__input{display:flex;border:none !important;background-color:rgba(0,0,0,0)}.mdc-text-field--disabled .mdc-text-field__input{pointer-events:auto}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input{color:var(--mdc-filled-text-field-input-text-color, var(--mat-app-on-surface));caret-color:var(--mdc-filled-text-field-caret-color, var(--mat-app-primary))}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input::placeholder{color:var(--mdc-filled-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input::-moz-placeholder{color:var(--mdc-filled-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input::-webkit-input-placeholder{color:var(--mdc-filled-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input:-ms-input-placeholder{color:var(--mdc-filled-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__input{caret-color:var(--mdc-filled-text-field-error-caret-color)}.mdc-text-field--filled.mdc-text-field--disabled .mdc-text-field__input{color:var(--mdc-filled-text-field-disabled-input-text-color)}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input{color:var(--mdc-outlined-text-field-input-text-color, var(--mat-app-on-surface));caret-color:var(--mdc-outlined-text-field-caret-color, var(--mat-app-primary))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input::placeholder{color:var(--mdc-outlined-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input::-moz-placeholder{color:var(--mdc-outlined-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input::-webkit-input-placeholder{color:var(--mdc-outlined-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input:-ms-input-placeholder{color:var(--mdc-outlined-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__input{caret-color:var(--mdc-outlined-text-field-error-caret-color)}.mdc-text-field--outlined.mdc-text-field--disabled .mdc-text-field__input{color:var(--mdc-outlined-text-field-disabled-input-text-color)}.mdc-text-field--disabled .cdk-high-contrast-active .mdc-text-field__input{background-color:Window}.mdc-text-field--filled{height:56px;border-bottom-right-radius:0;border-bottom-left-radius:0;border-top-left-radius:var(--mdc-filled-text-field-container-shape, var(--mat-app-corner-extra-small-top));border-top-right-radius:var(--mdc-filled-text-field-container-shape, var(--mat-app-corner-extra-small-top))}.mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:var(--mdc-filled-text-field-container-color, var(--mat-app-surface-variant))}.mdc-text-field--filled.mdc-text-field--disabled{background-color:var(--mdc-filled-text-field-disabled-container-color)}.mdc-text-field--outlined{height:56px;overflow:visible;padding-left:16px;padding-right:16px}@supports(top: max(0%)){.mdc-text-field--outlined{padding-right:max(16px,var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small)));padding-left:max(16px,var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small)) + 4px)}[dir=rtl] .mdc-text-field--outlined{padding-right:max(16px,var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small)) + 4px);padding-left:max(16px,var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small)))}}.mdc-floating-label{position:absolute;left:0;transform-origin:left top;line-height:1.15rem;text-align:left;text-overflow:ellipsis;white-space:nowrap;cursor:text;overflow:hidden;will-change:transform}[dir=rtl] .mdc-floating-label{right:0;left:auto;transform-origin:right top;text-align:right}.mdc-text-field .mdc-floating-label{top:50%;transform:translateY(-50%);pointer-events:none}.mdc-notched-outline .mdc-floating-label{display:inline-block;position:relative;max-width:100%}.mdc-text-field--outlined .mdc-floating-label{left:4px;right:auto}[dir=rtl] .mdc-text-field--outlined .mdc-floating-label{left:auto;right:4px}.mdc-text-field--filled .mdc-floating-label{left:16px;right:auto}[dir=rtl] .mdc-text-field--filled .mdc-floating-label{left:auto;right:16px}.mdc-text-field--disabled .mdc-floating-label{cursor:default}.cdk-high-contrast-active .mdc-text-field--disabled .mdc-floating-label{z-index:1}.mdc-text-field--filled.mdc-text-field--no-label .mdc-floating-label{display:none}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-floating-label{color:var(--mdc-filled-text-field-label-text-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-floating-label{color:var(--mdc-filled-text-field-focus-label-text-color, var(--mat-app-primary))}.mdc-text-field--filled:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-floating-label{color:var(--mdc-filled-text-field-hover-label-text-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled.mdc-text-field--disabled .mdc-floating-label{color:var(--mdc-filled-text-field-disabled-label-text-color)}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid .mdc-floating-label{color:var(--mdc-filled-text-field-error-label-text-color, var(--mat-app-error))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid.mdc-text-field--focused .mdc-floating-label{color:var(--mdc-filled-text-field-error-focus-label-text-color, var(--mat-app-error))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid:not(.mdc-text-field--disabled):hover .mdc-floating-label{color:var(--mdc-filled-text-field-error-hover-label-text-color, var(--mat-app-on-error-container))}.mdc-text-field--filled .mdc-floating-label{font-family:var(--mdc-filled-text-field-label-text-font, var(--mat-app-body-large-font));font-size:var(--mdc-filled-text-field-label-text-size, var(--mat-app-body-large-size));font-weight:var(--mdc-filled-text-field-label-text-weight, var(--mat-app-body-large-weight));letter-spacing:var(--mdc-filled-text-field-label-text-tracking, var(--mat-app-body-large-tracking))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-floating-label{color:var(--mdc-outlined-text-field-label-text-color, var(--mat-app-on-surface-variant))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-floating-label{color:var(--mdc-outlined-text-field-focus-label-text-color, var(--mat-app-primary))}.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-floating-label{color:var(--mdc-outlined-text-field-hover-label-text-color, var(--mat-app-on-surface))}.mdc-text-field--outlined.mdc-text-field--disabled .mdc-floating-label{color:var(--mdc-outlined-text-field-disabled-label-text-color)}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid .mdc-floating-label{color:var(--mdc-outlined-text-field-error-label-text-color, var(--mat-app-error))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid.mdc-text-field--focused .mdc-floating-label{color:var(--mdc-outlined-text-field-error-focus-label-text-color, var(--mat-app-error))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid:not(.mdc-text-field--disabled):hover .mdc-floating-label{color:var(--mdc-outlined-text-field-error-hover-label-text-color, var(--mat-app-on-error-container))}.mdc-text-field--outlined .mdc-floating-label{font-family:var(--mdc-outlined-text-field-label-text-font, var(--mat-app-body-large-font));font-size:var(--mdc-outlined-text-field-label-text-size, var(--mat-app-body-large-size));font-weight:var(--mdc-outlined-text-field-label-text-weight, var(--mat-app-body-large-weight));letter-spacing:var(--mdc-outlined-text-field-label-text-tracking, var(--mat-app-body-large-tracking))}.mdc-floating-label--float-above{cursor:auto;transform:translateY(-106%) scale(0.75)}.mdc-text-field--filled .mdc-floating-label--float-above{transform:translateY(-106%) scale(0.75)}.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) scale(1);font-size:.75rem}.mdc-notched-outline .mdc-floating-label--float-above{text-overflow:clip}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:133.3333333333%}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) scale(0.75)}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-floating-label--required:not(.mdc-floating-label--hide-required-marker)::after{margin-left:1px;margin-right:0;content:\\\"*\\\"}[dir=rtl] .mdc-floating-label--required:not(.mdc-floating-label--hide-required-marker)::after{margin-left:0;margin-right:1px}.mdc-notched-outline{display:flex;position:absolute;top:0;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] .mdc-notched-outline{text-align:right}.mdc-text-field--outlined .mdc-notched-outline{z-index:1}.mat-mdc-notch-piece{box-sizing:border-box;height:100%;pointer-events:none;border-top:1px solid;border-bottom:1px solid}.mdc-text-field--focused .mat-mdc-notch-piece{border-width:2px}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-outline-color, var(--mat-app-outline));border-width:var(--mdc-outlined-text-field-outline-width)}.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-hover-outline-color, var(--mat-app-on-surface))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-focus-outline-color, var(--mat-app-primary))}.mdc-text-field--outlined.mdc-text-field--disabled .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-disabled-outline-color)}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-error-outline-color, var(--mat-app-error))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid:not(.mdc-text-field--focused):hover .mdc-notched-outline .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-error-hover-outline-color, var(--mat-app-on-error-container))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid.mdc-text-field--focused .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-error-focus-outline-color, var(--mat-app-error))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline .mat-mdc-notch-piece{border-width:var(--mdc-outlined-text-field-focus-outline-width)}.mdc-notched-outline__leading{border-left:1px solid;border-right:none;border-top-right-radius:0;border-bottom-right-radius:0;width:12px;border-top-left-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small));border-bottom-left-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small))}@supports(top: max(0%)){.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading{width:max(12px,var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small)))}}[dir=rtl] .mdc-notched-outline__leading{border-left:none;border-right:1px solid;border-bottom-left-radius:0;border-top-left-radius:0;border-top-right-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small));border-bottom-right-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small))}.mdc-notched-outline__trailing{flex-grow:1;border-left:none;border-right:1px solid;border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small));border-bottom-right-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small))}[dir=rtl] .mdc-notched-outline__trailing{border-left:1px solid;border-right:none;border-top-right-radius:0;border-bottom-right-radius:0;border-top-left-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small));border-bottom-left-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small))}.mdc-notched-outline__notch{flex:0 0 auto;width:auto;max-width:calc(100% - 24px)}@supports(top: max(0%)){.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__notch{max-width:calc(100% - max(12px,var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small)))*2)}}.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:1px}.mdc-text-field--focused.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:2px}.mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:0;padding-right:8px;border-top:none}[dir=rtl] .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:8px;padding-right:0}.mdc-notched-outline--no-label .mdc-notched-outline__notch{display:none}.mdc-line-ripple::before,.mdc-line-ripple::after{position:absolute;bottom:0;left:0;width:100%;border-bottom-style:solid;content:\\\"\\\"}.mdc-line-ripple::before{z-index:1;border-bottom-width:var(--mdc-filled-text-field-active-indicator-height)}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-active-indicator-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-hover-active-indicator-color, var(--mat-app-on-surface))}.mdc-text-field--filled.mdc-text-field--disabled .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-disabled-active-indicator-color)}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-error-active-indicator-color, var(--mat-app-error))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid:not(.mdc-text-field--focused):hover .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-error-hover-active-indicator-color, var(--mat-app-on-error-container))}.mdc-line-ripple::after{transform:scaleX(0);opacity:0;z-index:2}.mdc-text-field--filled .mdc-line-ripple::after{border-bottom-width:var(--mdc-filled-text-field-focus-active-indicator-height)}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-line-ripple::after{border-bottom-color:var(--mdc-filled-text-field-focus-active-indicator-color, var(--mat-app-primary))}.mdc-text-field--filled.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple::after{border-bottom-color:var(--mdc-filled-text-field-error-focus-active-indicator-color, var(--mat-app-error))}.mdc-line-ripple--active::after{transform:scaleX(1);opacity:1}.mdc-line-ripple--deactivating::after{opacity:0}.mdc-text-field--disabled{pointer-events:none}.mat-mdc-form-field-textarea-control{vertical-align:middle;resize:vertical;box-sizing:border-box;height:auto;margin:0;padding:0;border:none;overflow:auto}.mat-mdc-form-field-input-control.mat-mdc-form-field-input-control{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font:inherit;letter-spacing:inherit;text-decoration:inherit;text-transform:inherit;border:none}.mat-mdc-form-field .mat-mdc-floating-label.mdc-floating-label{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;line-height:normal;pointer-events:all;will-change:auto}.mat-mdc-form-field:not(.mat-form-field-disabled) .mat-mdc-floating-label.mdc-floating-label{cursor:inherit}.mdc-text-field--no-label:not(.mdc-text-field--textarea) .mat-mdc-form-field-input-control.mdc-text-field__input,.mat-mdc-text-field-wrapper .mat-mdc-form-field-input-control{height:auto}.mat-mdc-text-field-wrapper .mat-mdc-form-field-input-control.mdc-text-field__input[type=color]{height:23px}.mat-mdc-text-field-wrapper{height:auto;flex:auto;will-change:auto}.mat-mdc-form-field-has-icon-prefix .mat-mdc-text-field-wrapper{padding-left:0;--mat-mdc-form-field-label-offset-x: -16px}.mat-mdc-form-field-has-icon-suffix .mat-mdc-text-field-wrapper{padding-right:0}[dir=rtl] .mat-mdc-text-field-wrapper{padding-left:16px;padding-right:16px}[dir=rtl] .mat-mdc-form-field-has-icon-suffix .mat-mdc-text-field-wrapper{padding-left:0}[dir=rtl] .mat-mdc-form-field-has-icon-prefix .mat-mdc-text-field-wrapper{padding-right:0}.mat-form-field-disabled .mdc-text-field__input::placeholder{color:var(--mat-form-field-disabled-input-text-placeholder-color)}.mat-form-field-disabled .mdc-text-field__input::-moz-placeholder{color:var(--mat-form-field-disabled-input-text-placeholder-color)}.mat-form-field-disabled .mdc-text-field__input::-webkit-input-placeholder{color:var(--mat-form-field-disabled-input-text-placeholder-color)}.mat-form-field-disabled .mdc-text-field__input:-ms-input-placeholder{color:var(--mat-form-field-disabled-input-text-placeholder-color)}.mat-mdc-form-field-label-always-float .mdc-text-field__input::placeholder{transition-delay:40ms;transition-duration:110ms;opacity:1}.mat-mdc-text-field-wrapper .mat-mdc-form-field-infix .mat-mdc-floating-label{left:auto;right:auto}.mat-mdc-text-field-wrapper.mdc-text-field--outlined .mdc-text-field__input{display:inline-block}.mat-mdc-form-field .mat-mdc-text-field-wrapper.mdc-text-field .mdc-notched-outline__notch{padding-top:0}.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field .mdc-notched-outline__notch{border-left:1px solid rgba(0,0,0,0)}[dir=rtl] .mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field .mdc-notched-outline__notch{border-left:none;border-right:1px solid rgba(0,0,0,0)}.mat-mdc-form-field-infix{min-height:var(--mat-form-field-container-height);padding-top:var(--mat-form-field-filled-with-label-container-padding-top);padding-bottom:var(--mat-form-field-filled-with-label-container-padding-bottom)}.mdc-text-field--outlined .mat-mdc-form-field-infix,.mdc-text-field--no-label .mat-mdc-form-field-infix{padding-top:var(--mat-form-field-container-vertical-padding);padding-bottom:var(--mat-form-field-container-vertical-padding)}.mat-mdc-text-field-wrapper .mat-mdc-form-field-flex .mat-mdc-floating-label{top:calc(var(--mat-form-field-container-height)/2)}.mdc-text-field--filled .mat-mdc-floating-label{display:var(--mat-form-field-filled-label-display, block)}.mat-mdc-text-field-wrapper.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{--mat-mdc-form-field-label-transform: translateY(calc(calc(6.75px + var(--mat-form-field-container-height) / 2) * -1)) scale(var(--mat-mdc-form-field-floating-label-scale, 0.75));transform:var(--mat-mdc-form-field-label-transform)}.mat-mdc-form-field-subscript-wrapper{box-sizing:border-box;width:100%;position:relative}.mat-mdc-form-field-hint-wrapper,.mat-mdc-form-field-error-wrapper{position:absolute;top:0;left:0;right:0;padding:0 16px}.mat-mdc-form-field-subscript-dynamic-size .mat-mdc-form-field-hint-wrapper,.mat-mdc-form-field-subscript-dynamic-size .mat-mdc-form-field-error-wrapper{position:static}.mat-mdc-form-field-bottom-align::before{content:\\\"\\\";display:inline-block;height:16px}.mat-mdc-form-field-bottom-align.mat-mdc-form-field-subscript-dynamic-size::before{content:unset}.mat-mdc-form-field-hint-end{order:1}.mat-mdc-form-field-hint-wrapper{display:flex}.mat-mdc-form-field-hint-spacer{flex:1 0 1em}.mat-mdc-form-field-error{display:block;color:var(--mat-form-field-error-text-color, var(--mat-app-error))}.mat-mdc-form-field-subscript-wrapper,.mat-mdc-form-field-bottom-align::before{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-form-field-subscript-text-font, var(--mat-app-body-small-font));line-height:var(--mat-form-field-subscript-text-line-height, var(--mat-app-body-small-line-height));font-size:var(--mat-form-field-subscript-text-size, var(--mat-app-body-small-size));letter-spacing:var(--mat-form-field-subscript-text-tracking, var(--mat-app-body-small-tracking));font-weight:var(--mat-form-field-subscript-text-weight, var(--mat-app-body-small-weight))}.mat-mdc-form-field-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;opacity:0;pointer-events:none;background-color:var(--mat-form-field-state-layer-color, var(--mat-app-on-surface))}.mat-mdc-text-field-wrapper:hover .mat-mdc-form-field-focus-overlay{opacity:var(--mat-form-field-hover-state-layer-opacity, var(--mat-app-hover-state-layer-opacity))}.mat-mdc-form-field.mat-focused .mat-mdc-form-field-focus-overlay{opacity:var(--mat-form-field-focus-state-layer-opacity)}select.mat-mdc-form-field-input-control{-moz-appearance:none;-webkit-appearance:none;background-color:rgba(0,0,0,0);display:inline-flex;box-sizing:border-box}select.mat-mdc-form-field-input-control:not(:disabled){cursor:pointer}select.mat-mdc-form-field-input-control:not(.mat-mdc-native-select-inline) option{color:var(--mat-form-field-select-option-text-color)}select.mat-mdc-form-field-input-control:not(.mat-mdc-native-select-inline) option:disabled{color:var(--mat-form-field-select-disabled-option-text-color)}.mat-mdc-form-field-type-mat-native-select .mat-mdc-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid rgba(0,0,0,0);border-right:5px solid rgba(0,0,0,0);border-top:5px solid;position:absolute;right:0;top:50%;margin-top:-2.5px;pointer-events:none;color:var(--mat-form-field-enabled-select-arrow-color, var(--mat-app-on-surface-variant))}[dir=rtl] .mat-mdc-form-field-type-mat-native-select .mat-mdc-form-field-infix::after{right:auto;left:0}.mat-mdc-form-field-type-mat-native-select.mat-focused .mat-mdc-form-field-infix::after{color:var(--mat-form-field-focus-select-arrow-color, var(--mat-app-primary))}.mat-mdc-form-field-type-mat-native-select.mat-form-field-disabled .mat-mdc-form-field-infix::after{color:var(--mat-form-field-disabled-select-arrow-color)}.mat-mdc-form-field-type-mat-native-select .mat-mdc-form-field-input-control{padding-right:15px}[dir=rtl] .mat-mdc-form-field-type-mat-native-select .mat-mdc-form-field-input-control{padding-right:0;padding-left:15px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-mdc-text-field-wrapper{outline:solid 1px}.cdk-high-contrast-active .mat-form-field-appearance-fill.mat-form-field-disabled .mat-mdc-text-field-wrapper{outline-color:GrayText}.cdk-high-contrast-active .mat-form-field-appearance-fill.mat-focused .mat-mdc-text-field-wrapper{outline:dashed 3px}.cdk-high-contrast-active .mat-mdc-form-field.mat-focused .mdc-notched-outline{border:dashed 3px}.mat-mdc-form-field-input-control[type=date],.mat-mdc-form-field-input-control[type=datetime],.mat-mdc-form-field-input-control[type=datetime-local],.mat-mdc-form-field-input-control[type=month],.mat-mdc-form-field-input-control[type=week],.mat-mdc-form-field-input-control[type=time]{line-height:1}.mat-mdc-form-field-input-control::-webkit-datetime-edit{line-height:1;padding:0;margin-bottom:-2px}.mat-mdc-form-field{--mat-mdc-form-field-floating-label-scale: 0.75;display:inline-flex;flex-direction:column;min-width:0;text-align:left;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-form-field-container-text-font, var(--mat-app-body-large-font));line-height:var(--mat-form-field-container-text-line-height, var(--mat-app-body-large-line-height));font-size:var(--mat-form-field-container-text-size, var(--mat-app-body-large-size));letter-spacing:var(--mat-form-field-container-text-tracking, var(--mat-app-body-large-tracking));font-weight:var(--mat-form-field-container-text-weight, var(--mat-app-body-large-weight))}[dir=rtl] .mat-mdc-form-field{text-align:right}.mat-mdc-form-field .mdc-text-field--outlined .mdc-floating-label--float-above{font-size:calc(var(--mat-form-field-outlined-label-text-populated-size)*var(--mat-mdc-form-field-floating-label-scale))}.mat-mdc-form-field .mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:var(--mat-form-field-outlined-label-text-populated-size)}.mat-mdc-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-mdc-text-field-wrapper{width:100%;z-index:0}.mat-mdc-form-field-icon-prefix,.mat-mdc-form-field-icon-suffix{align-self:center;line-height:0;pointer-events:auto;position:relative;z-index:1}.mat-mdc-form-field-icon-prefix>.mat-icon,.mat-mdc-form-field-icon-suffix>.mat-icon{padding:0 12px;box-sizing:content-box}.mat-mdc-form-field-icon-prefix{color:var(--mat-form-field-leading-icon-color, var(--mat-app-on-surface-variant))}.mat-form-field-disabled .mat-mdc-form-field-icon-prefix{color:var(--mat-form-field-disabled-leading-icon-color)}.mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-trailing-icon-color, var(--mat-app-on-surface-variant))}.mat-form-field-disabled .mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-disabled-trailing-icon-color)}.mat-form-field-invalid .mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-error-trailing-icon-color, var(--mat-app-error))}.mat-form-field-invalid:not(.mat-focused):not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper:hover .mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-error-hover-trailing-icon-color, var(--mat-app-on-error-container))}.mat-form-field-invalid.mat-focused .mat-mdc-text-field-wrapper .mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-error-focus-trailing-icon-color, var(--mat-app-error))}.mat-mdc-form-field-icon-prefix,[dir=rtl] .mat-mdc-form-field-icon-suffix{padding:0 4px 0 0}.mat-mdc-form-field-icon-suffix,[dir=rtl] .mat-mdc-form-field-icon-prefix{padding:0 0 0 4px}.mat-mdc-form-field-subscript-wrapper .mat-icon,.mat-mdc-form-field label .mat-icon{width:1em;height:1em;font-size:inherit}.mat-mdc-form-field-infix{flex:auto;min-width:0;width:180px;position:relative;box-sizing:border-box}.mat-mdc-form-field .mdc-notched-outline__notch{margin-left:-1px;-webkit-clip-path:inset(-9em -999em -9em 1px);clip-path:inset(-9em -999em -9em 1px)}[dir=rtl] .mat-mdc-form-field .mdc-notched-outline__notch{margin-left:0;margin-right:-1px;-webkit-clip-path:inset(-9em 1px -9em -999em);clip-path:inset(-9em 1px -9em -999em)}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-floating-label{transition:transform 150ms cubic-bezier(0.4, 0, 0.2, 1),color 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-text-field__input{transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-text-field__input::placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-text-field__input::-moz-placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-text-field__input::-webkit-input-placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-text-field__input:-ms-input-placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--no-label .mdc-text-field__input::placeholder,.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--focused .mdc-text-field__input::placeholder{transition-delay:40ms;transition-duration:110ms}.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--no-label .mdc-text-field__input::-moz-placeholder,.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--focused .mdc-text-field__input::-moz-placeholder{transition-delay:40ms;transition-duration:110ms}.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--no-label .mdc-text-field__input::-webkit-input-placeholder,.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--focused .mdc-text-field__input::-webkit-input-placeholder{transition-delay:40ms;transition-duration:110ms}.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--no-label .mdc-text-field__input:-ms-input-placeholder,.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--focused .mdc-text-field__input:-ms-input-placeholder{transition-delay:40ms;transition-duration:110ms}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-text-field--filled:not(.mdc-ripple-upgraded):focus .mdc-text-field__ripple::before{transition-duration:75ms}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-line-ripple::after{transition:transform 180ms cubic-bezier(0.4, 0, 0.2, 1),opacity 180ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-notched-outline .mdc-floating-label{max-width:calc(100% + 1px)}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:calc(133.3333333333% + 1px)}\"], dependencies: [{ kind: \"directive\", type: MatFormFieldFloatingLabel, selector: \"label[matFormFieldFloatingLabel]\", inputs: [\"floating\", \"monitorResize\"] }, { kind: \"component\", type: MatFormFieldNotchedOutline, selector: \"div[matFormFieldNotchedOutline]\", inputs: [\"matFormFieldNotchedOutlineOpen\"] }, { kind: \"directive\", type: NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: MatFormFieldLineRipple, selector: \"div[matFormFieldLineRipple]\" }, { kind: \"directive\", type: MatHint, selector: \"mat-hint\", inputs: [\"align\", \"id\"] }], animations: [matFormFieldAnimations.transitionMessages], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormField, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-form-field', exportAs: 'matFormField', animations: [matFormFieldAnimations.transitionMessages], host: {\n                        'class': 'mat-mdc-form-field',\n                        '[class.mat-mdc-form-field-label-always-float]': '_shouldAlwaysFloat()',\n                        '[class.mat-mdc-form-field-has-icon-prefix]': '_hasIconPrefix',\n                        '[class.mat-mdc-form-field-has-icon-suffix]': '_hasIconSuffix',\n                        // Note that these classes reuse the same names as the non-MDC version, because they can be\n                        // considered a public API since custom form controls may use them to style themselves.\n                        // See https://github.com/angular/components/pull/20502#discussion_r486124901.\n                        '[class.mat-form-field-invalid]': '_control.errorState',\n                        '[class.mat-form-field-disabled]': '_control.disabled',\n                        '[class.mat-form-field-autofilled]': '_control.autofilled',\n                        '[class.mat-form-field-no-animations]': '_animationMode === \"NoopAnimations\"',\n                        '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n                        '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n                        '[class.mat-form-field-hide-placeholder]': '_hasFloatingLabel() && !_shouldLabelFloat()',\n                        '[class.mat-focused]': '_control.focused',\n                        '[class.mat-primary]': 'color !== \"accent\" && color !== \"warn\"',\n                        '[class.mat-accent]': 'color === \"accent\"',\n                        '[class.mat-warn]': 'color === \"warn\"',\n                        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                        '[class.ng-touched]': '_shouldForward(\"touched\")',\n                        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                        '[class.ng-valid]': '_shouldForward(\"valid\")',\n                        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                        '[class.ng-pending]': '_shouldForward(\"pending\")',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [\n                        { provide: MAT_FORM_FIELD, useExisting: MatFormField },\n                        { provide: FLOATING_LABEL_PARENT, useExisting: MatFormField },\n                    ], standalone: true, imports: [\n                        MatFormFieldFloatingLabel,\n                        MatFormFieldNotchedOutline,\n                        NgTemplateOutlet,\n                        MatFormFieldLineRipple,\n                        MatHint,\n                    ], template: \"<ng-template #labelTemplate>\\n  <!--\\n    MDC recommends that the text-field is a `<label>` element. This rather complicates the\\n    setup because it would require every form-field control to explicitly set `aria-labelledby`.\\n    This is because the `<label>` itself contains more than the actual label (e.g. prefix, suffix\\n    or other projected content), and screen readers could potentially read out undesired content.\\n    Excluding elements from being printed out requires them to be marked with `aria-hidden`, or\\n    the form control is set to a scoped element for the label (using `aria-labelledby`). Both of\\n    these options seem to complicate the setup because we know exactly what content is rendered\\n    as part of the label, and we don't want to spend resources on walking through projected content\\n    to set `aria-hidden`. Nor do we want to set `aria-labelledby` on every form control if we could\\n    simply link the label to the control using the label `for` attribute.\\n  -->\\n  @if (_hasFloatingLabel()) {\\n    <label matFormFieldFloatingLabel\\n           [floating]=\\\"_shouldLabelFloat()\\\"\\n           [monitorResize]=\\\"_hasOutline()\\\"\\n           [id]=\\\"_labelId\\\"\\n           [attr.for]=\\\"_control.disableAutomaticLabeling ? null : _control.id\\\">\\n      <ng-content select=\\\"mat-label\\\"></ng-content>\\n      <!--\\n        We set the required marker as a separate element, in order to make it easier to target if\\n        apps want to override it and to be able to set `aria-hidden` so that screen readers don't\\n        pick it up.\\n       -->\\n       @if (!hideRequiredMarker && _control.required) {\\n         <span\\n           aria-hidden=\\\"true\\\"\\n           class=\\\"mat-mdc-form-field-required-marker mdc-floating-label--required\\\"></span>\\n       }\\n    </label>\\n  }\\n</ng-template>\\n\\n<div class=\\\"mat-mdc-text-field-wrapper mdc-text-field\\\" #textField\\n     [class.mdc-text-field--filled]=\\\"!_hasOutline()\\\"\\n     [class.mdc-text-field--outlined]=\\\"_hasOutline()\\\"\\n     [class.mdc-text-field--no-label]=\\\"!_hasFloatingLabel()\\\"\\n     [class.mdc-text-field--disabled]=\\\"_control.disabled\\\"\\n     [class.mdc-text-field--invalid]=\\\"_control.errorState\\\"\\n     (click)=\\\"_control.onContainerClick($event)\\\">\\n  @if (!_hasOutline() && !_control.disabled) {\\n    <div class=\\\"mat-mdc-form-field-focus-overlay\\\"></div>\\n  }\\n  <div class=\\\"mat-mdc-form-field-flex\\\">\\n    @if (_hasOutline()) {\\n      <div matFormFieldNotchedOutline [matFormFieldNotchedOutlineOpen]=\\\"_shouldLabelFloat()\\\">\\n        @if (!_forceDisplayInfixLabel()) {\\n          <ng-template [ngTemplateOutlet]=\\\"labelTemplate\\\"></ng-template>\\n        }\\n      </div>\\n    }\\n\\n    @if (_hasIconPrefix) {\\n      <div class=\\\"mat-mdc-form-field-icon-prefix\\\" #iconPrefixContainer>\\n        <ng-content select=\\\"[matPrefix], [matIconPrefix]\\\"></ng-content>\\n      </div>\\n    }\\n\\n    @if (_hasTextPrefix) {\\n      <div class=\\\"mat-mdc-form-field-text-prefix\\\" #textPrefixContainer>\\n        <ng-content select=\\\"[matTextPrefix]\\\"></ng-content>\\n      </div>\\n    }\\n\\n    <div class=\\\"mat-mdc-form-field-infix\\\">\\n      @if (!_hasOutline() || _forceDisplayInfixLabel()) {\\n        <ng-template [ngTemplateOutlet]=\\\"labelTemplate\\\"></ng-template>\\n      }\\n\\n      <ng-content></ng-content>\\n    </div>\\n\\n    @if (_hasTextSuffix) {\\n      <div class=\\\"mat-mdc-form-field-text-suffix\\\">\\n        <ng-content select=\\\"[matTextSuffix]\\\"></ng-content>\\n      </div>\\n    }\\n\\n    @if (_hasIconSuffix) {\\n      <div class=\\\"mat-mdc-form-field-icon-suffix\\\">\\n        <ng-content select=\\\"[matSuffix], [matIconSuffix]\\\"></ng-content>\\n      </div>\\n    }\\n  </div>\\n\\n  @if (!_hasOutline()) {\\n    <div matFormFieldLineRipple></div>\\n  }\\n</div>\\n\\n<div class=\\\"mat-mdc-form-field-subscript-wrapper mat-mdc-form-field-bottom-align\\\"\\n     [class.mat-mdc-form-field-subscript-dynamic-size]=\\\"subscriptSizing === 'dynamic'\\\">\\n\\n  @switch (_getDisplayedMessages()) {\\n    @case ('error') {\\n      <div class=\\\"mat-mdc-form-field-error-wrapper\\\"\\n           [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n        <ng-content select=\\\"mat-error, [matError]\\\"></ng-content>\\n      </div>\\n    }\\n\\n    @case ('hint') {\\n      <div class=\\\"mat-mdc-form-field-hint-wrapper\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n        @if (hintLabel) {\\n          <mat-hint [id]=\\\"_hintLabelId\\\">{{hintLabel}}</mat-hint>\\n        }\\n        <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n        <div class=\\\"mat-mdc-form-field-hint-spacer\\\"></div>\\n        <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n      </div>\\n    }\\n  }\\n</div>\\n\", styles: [\".mdc-text-field{display:inline-flex;align-items:baseline;padding:0 16px;position:relative;box-sizing:border-box;overflow:hidden;will-change:opacity,transform,color;border-top-left-radius:4px;border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.mdc-text-field__input{width:100%;min-width:0;border:none;border-radius:0;background:none;padding:0;-moz-appearance:none;-webkit-appearance:none;height:28px}.mdc-text-field__input::-webkit-calendar-picker-indicator{display:none}.mdc-text-field__input::-ms-clear{display:none}.mdc-text-field__input:focus{outline:none}.mdc-text-field__input:invalid{box-shadow:none}.mdc-text-field__input::placeholder{opacity:0}.mdc-text-field__input::-moz-placeholder{opacity:0}.mdc-text-field__input::-webkit-input-placeholder{opacity:0}.mdc-text-field__input:-ms-input-placeholder{opacity:0}.mdc-text-field--no-label .mdc-text-field__input::placeholder,.mdc-text-field--focused .mdc-text-field__input::placeholder{opacity:1}.mdc-text-field--no-label .mdc-text-field__input::-moz-placeholder,.mdc-text-field--focused .mdc-text-field__input::-moz-placeholder{opacity:1}.mdc-text-field--no-label .mdc-text-field__input::-webkit-input-placeholder,.mdc-text-field--focused .mdc-text-field__input::-webkit-input-placeholder{opacity:1}.mdc-text-field--no-label .mdc-text-field__input:-ms-input-placeholder,.mdc-text-field--focused .mdc-text-field__input:-ms-input-placeholder{opacity:1}.mdc-text-field--outlined .mdc-text-field__input,.mdc-text-field--filled.mdc-text-field--no-label .mdc-text-field__input{height:100%}.mdc-text-field--outlined .mdc-text-field__input{display:flex;border:none !important;background-color:rgba(0,0,0,0)}.mdc-text-field--disabled .mdc-text-field__input{pointer-events:auto}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input{color:var(--mdc-filled-text-field-input-text-color, var(--mat-app-on-surface));caret-color:var(--mdc-filled-text-field-caret-color, var(--mat-app-primary))}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input::placeholder{color:var(--mdc-filled-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input::-moz-placeholder{color:var(--mdc-filled-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input::-webkit-input-placeholder{color:var(--mdc-filled-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-text-field__input:-ms-input-placeholder{color:var(--mdc-filled-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__input{caret-color:var(--mdc-filled-text-field-error-caret-color)}.mdc-text-field--filled.mdc-text-field--disabled .mdc-text-field__input{color:var(--mdc-filled-text-field-disabled-input-text-color)}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input{color:var(--mdc-outlined-text-field-input-text-color, var(--mat-app-on-surface));caret-color:var(--mdc-outlined-text-field-caret-color, var(--mat-app-primary))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input::placeholder{color:var(--mdc-outlined-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input::-moz-placeholder{color:var(--mdc-outlined-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input::-webkit-input-placeholder{color:var(--mdc-outlined-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-text-field__input:-ms-input-placeholder{color:var(--mdc-outlined-text-field-input-text-placeholder-color, var(--mat-app-on-surface-variant))}.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__input{caret-color:var(--mdc-outlined-text-field-error-caret-color)}.mdc-text-field--outlined.mdc-text-field--disabled .mdc-text-field__input{color:var(--mdc-outlined-text-field-disabled-input-text-color)}.mdc-text-field--disabled .cdk-high-contrast-active .mdc-text-field__input{background-color:Window}.mdc-text-field--filled{height:56px;border-bottom-right-radius:0;border-bottom-left-radius:0;border-top-left-radius:var(--mdc-filled-text-field-container-shape, var(--mat-app-corner-extra-small-top));border-top-right-radius:var(--mdc-filled-text-field-container-shape, var(--mat-app-corner-extra-small-top))}.mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:var(--mdc-filled-text-field-container-color, var(--mat-app-surface-variant))}.mdc-text-field--filled.mdc-text-field--disabled{background-color:var(--mdc-filled-text-field-disabled-container-color)}.mdc-text-field--outlined{height:56px;overflow:visible;padding-left:16px;padding-right:16px}@supports(top: max(0%)){.mdc-text-field--outlined{padding-right:max(16px,var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small)));padding-left:max(16px,var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small)) + 4px)}[dir=rtl] .mdc-text-field--outlined{padding-right:max(16px,var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small)) + 4px);padding-left:max(16px,var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small)))}}.mdc-floating-label{position:absolute;left:0;transform-origin:left top;line-height:1.15rem;text-align:left;text-overflow:ellipsis;white-space:nowrap;cursor:text;overflow:hidden;will-change:transform}[dir=rtl] .mdc-floating-label{right:0;left:auto;transform-origin:right top;text-align:right}.mdc-text-field .mdc-floating-label{top:50%;transform:translateY(-50%);pointer-events:none}.mdc-notched-outline .mdc-floating-label{display:inline-block;position:relative;max-width:100%}.mdc-text-field--outlined .mdc-floating-label{left:4px;right:auto}[dir=rtl] .mdc-text-field--outlined .mdc-floating-label{left:auto;right:4px}.mdc-text-field--filled .mdc-floating-label{left:16px;right:auto}[dir=rtl] .mdc-text-field--filled .mdc-floating-label{left:auto;right:16px}.mdc-text-field--disabled .mdc-floating-label{cursor:default}.cdk-high-contrast-active .mdc-text-field--disabled .mdc-floating-label{z-index:1}.mdc-text-field--filled.mdc-text-field--no-label .mdc-floating-label{display:none}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-floating-label{color:var(--mdc-filled-text-field-label-text-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-floating-label{color:var(--mdc-filled-text-field-focus-label-text-color, var(--mat-app-primary))}.mdc-text-field--filled:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-floating-label{color:var(--mdc-filled-text-field-hover-label-text-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled.mdc-text-field--disabled .mdc-floating-label{color:var(--mdc-filled-text-field-disabled-label-text-color)}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid .mdc-floating-label{color:var(--mdc-filled-text-field-error-label-text-color, var(--mat-app-error))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid.mdc-text-field--focused .mdc-floating-label{color:var(--mdc-filled-text-field-error-focus-label-text-color, var(--mat-app-error))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid:not(.mdc-text-field--disabled):hover .mdc-floating-label{color:var(--mdc-filled-text-field-error-hover-label-text-color, var(--mat-app-on-error-container))}.mdc-text-field--filled .mdc-floating-label{font-family:var(--mdc-filled-text-field-label-text-font, var(--mat-app-body-large-font));font-size:var(--mdc-filled-text-field-label-text-size, var(--mat-app-body-large-size));font-weight:var(--mdc-filled-text-field-label-text-weight, var(--mat-app-body-large-weight));letter-spacing:var(--mdc-filled-text-field-label-text-tracking, var(--mat-app-body-large-tracking))}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-floating-label{color:var(--mdc-outlined-text-field-label-text-color, var(--mat-app-on-surface-variant))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-floating-label{color:var(--mdc-outlined-text-field-focus-label-text-color, var(--mat-app-primary))}.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-floating-label{color:var(--mdc-outlined-text-field-hover-label-text-color, var(--mat-app-on-surface))}.mdc-text-field--outlined.mdc-text-field--disabled .mdc-floating-label{color:var(--mdc-outlined-text-field-disabled-label-text-color)}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid .mdc-floating-label{color:var(--mdc-outlined-text-field-error-label-text-color, var(--mat-app-error))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid.mdc-text-field--focused .mdc-floating-label{color:var(--mdc-outlined-text-field-error-focus-label-text-color, var(--mat-app-error))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid:not(.mdc-text-field--disabled):hover .mdc-floating-label{color:var(--mdc-outlined-text-field-error-hover-label-text-color, var(--mat-app-on-error-container))}.mdc-text-field--outlined .mdc-floating-label{font-family:var(--mdc-outlined-text-field-label-text-font, var(--mat-app-body-large-font));font-size:var(--mdc-outlined-text-field-label-text-size, var(--mat-app-body-large-size));font-weight:var(--mdc-outlined-text-field-label-text-weight, var(--mat-app-body-large-weight));letter-spacing:var(--mdc-outlined-text-field-label-text-tracking, var(--mat-app-body-large-tracking))}.mdc-floating-label--float-above{cursor:auto;transform:translateY(-106%) scale(0.75)}.mdc-text-field--filled .mdc-floating-label--float-above{transform:translateY(-106%) scale(0.75)}.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) scale(1);font-size:.75rem}.mdc-notched-outline .mdc-floating-label--float-above{text-overflow:clip}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:133.3333333333%}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) scale(0.75)}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-floating-label--required:not(.mdc-floating-label--hide-required-marker)::after{margin-left:1px;margin-right:0;content:\\\"*\\\"}[dir=rtl] .mdc-floating-label--required:not(.mdc-floating-label--hide-required-marker)::after{margin-left:0;margin-right:1px}.mdc-notched-outline{display:flex;position:absolute;top:0;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] .mdc-notched-outline{text-align:right}.mdc-text-field--outlined .mdc-notched-outline{z-index:1}.mat-mdc-notch-piece{box-sizing:border-box;height:100%;pointer-events:none;border-top:1px solid;border-bottom:1px solid}.mdc-text-field--focused .mat-mdc-notch-piece{border-width:2px}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-outline-color, var(--mat-app-outline));border-width:var(--mdc-outlined-text-field-outline-width)}.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-hover-outline-color, var(--mat-app-on-surface))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-focus-outline-color, var(--mat-app-primary))}.mdc-text-field--outlined.mdc-text-field--disabled .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-disabled-outline-color)}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-error-outline-color, var(--mat-app-error))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid:not(.mdc-text-field--focused):hover .mdc-notched-outline .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-error-hover-outline-color, var(--mat-app-on-error-container))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--invalid.mdc-text-field--focused .mat-mdc-notch-piece{border-color:var(--mdc-outlined-text-field-error-focus-outline-color, var(--mat-app-error))}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline .mat-mdc-notch-piece{border-width:var(--mdc-outlined-text-field-focus-outline-width)}.mdc-notched-outline__leading{border-left:1px solid;border-right:none;border-top-right-radius:0;border-bottom-right-radius:0;width:12px;border-top-left-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small));border-bottom-left-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small))}@supports(top: max(0%)){.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading{width:max(12px,var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small)))}}[dir=rtl] .mdc-notched-outline__leading{border-left:none;border-right:1px solid;border-bottom-left-radius:0;border-top-left-radius:0;border-top-right-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small));border-bottom-right-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small))}.mdc-notched-outline__trailing{flex-grow:1;border-left:none;border-right:1px solid;border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small));border-bottom-right-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small))}[dir=rtl] .mdc-notched-outline__trailing{border-left:1px solid;border-right:none;border-top-right-radius:0;border-bottom-right-radius:0;border-top-left-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small));border-bottom-left-radius:var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small))}.mdc-notched-outline__notch{flex:0 0 auto;width:auto;max-width:calc(100% - 24px)}@supports(top: max(0%)){.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__notch{max-width:calc(100% - max(12px,var(--mdc-outlined-text-field-container-shape, var(--mat-app-corner-extra-small)))*2)}}.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:1px}.mdc-text-field--focused.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:2px}.mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:0;padding-right:8px;border-top:none}[dir=rtl] .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:8px;padding-right:0}.mdc-notched-outline--no-label .mdc-notched-outline__notch{display:none}.mdc-line-ripple::before,.mdc-line-ripple::after{position:absolute;bottom:0;left:0;width:100%;border-bottom-style:solid;content:\\\"\\\"}.mdc-line-ripple::before{z-index:1;border-bottom-width:var(--mdc-filled-text-field-active-indicator-height)}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-active-indicator-color, var(--mat-app-on-surface-variant))}.mdc-text-field--filled:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-hover-active-indicator-color, var(--mat-app-on-surface))}.mdc-text-field--filled.mdc-text-field--disabled .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-disabled-active-indicator-color)}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-error-active-indicator-color, var(--mat-app-error))}.mdc-text-field--filled:not(.mdc-text-field--disabled).mdc-text-field--invalid:not(.mdc-text-field--focused):hover .mdc-line-ripple::before{border-bottom-color:var(--mdc-filled-text-field-error-hover-active-indicator-color, var(--mat-app-on-error-container))}.mdc-line-ripple::after{transform:scaleX(0);opacity:0;z-index:2}.mdc-text-field--filled .mdc-line-ripple::after{border-bottom-width:var(--mdc-filled-text-field-focus-active-indicator-height)}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-line-ripple::after{border-bottom-color:var(--mdc-filled-text-field-focus-active-indicator-color, var(--mat-app-primary))}.mdc-text-field--filled.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple::after{border-bottom-color:var(--mdc-filled-text-field-error-focus-active-indicator-color, var(--mat-app-error))}.mdc-line-ripple--active::after{transform:scaleX(1);opacity:1}.mdc-line-ripple--deactivating::after{opacity:0}.mdc-text-field--disabled{pointer-events:none}.mat-mdc-form-field-textarea-control{vertical-align:middle;resize:vertical;box-sizing:border-box;height:auto;margin:0;padding:0;border:none;overflow:auto}.mat-mdc-form-field-input-control.mat-mdc-form-field-input-control{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font:inherit;letter-spacing:inherit;text-decoration:inherit;text-transform:inherit;border:none}.mat-mdc-form-field .mat-mdc-floating-label.mdc-floating-label{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;line-height:normal;pointer-events:all;will-change:auto}.mat-mdc-form-field:not(.mat-form-field-disabled) .mat-mdc-floating-label.mdc-floating-label{cursor:inherit}.mdc-text-field--no-label:not(.mdc-text-field--textarea) .mat-mdc-form-field-input-control.mdc-text-field__input,.mat-mdc-text-field-wrapper .mat-mdc-form-field-input-control{height:auto}.mat-mdc-text-field-wrapper .mat-mdc-form-field-input-control.mdc-text-field__input[type=color]{height:23px}.mat-mdc-text-field-wrapper{height:auto;flex:auto;will-change:auto}.mat-mdc-form-field-has-icon-prefix .mat-mdc-text-field-wrapper{padding-left:0;--mat-mdc-form-field-label-offset-x: -16px}.mat-mdc-form-field-has-icon-suffix .mat-mdc-text-field-wrapper{padding-right:0}[dir=rtl] .mat-mdc-text-field-wrapper{padding-left:16px;padding-right:16px}[dir=rtl] .mat-mdc-form-field-has-icon-suffix .mat-mdc-text-field-wrapper{padding-left:0}[dir=rtl] .mat-mdc-form-field-has-icon-prefix .mat-mdc-text-field-wrapper{padding-right:0}.mat-form-field-disabled .mdc-text-field__input::placeholder{color:var(--mat-form-field-disabled-input-text-placeholder-color)}.mat-form-field-disabled .mdc-text-field__input::-moz-placeholder{color:var(--mat-form-field-disabled-input-text-placeholder-color)}.mat-form-field-disabled .mdc-text-field__input::-webkit-input-placeholder{color:var(--mat-form-field-disabled-input-text-placeholder-color)}.mat-form-field-disabled .mdc-text-field__input:-ms-input-placeholder{color:var(--mat-form-field-disabled-input-text-placeholder-color)}.mat-mdc-form-field-label-always-float .mdc-text-field__input::placeholder{transition-delay:40ms;transition-duration:110ms;opacity:1}.mat-mdc-text-field-wrapper .mat-mdc-form-field-infix .mat-mdc-floating-label{left:auto;right:auto}.mat-mdc-text-field-wrapper.mdc-text-field--outlined .mdc-text-field__input{display:inline-block}.mat-mdc-form-field .mat-mdc-text-field-wrapper.mdc-text-field .mdc-notched-outline__notch{padding-top:0}.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field .mdc-notched-outline__notch{border-left:1px solid rgba(0,0,0,0)}[dir=rtl] .mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field.mat-mdc-form-field .mdc-notched-outline__notch{border-left:none;border-right:1px solid rgba(0,0,0,0)}.mat-mdc-form-field-infix{min-height:var(--mat-form-field-container-height);padding-top:var(--mat-form-field-filled-with-label-container-padding-top);padding-bottom:var(--mat-form-field-filled-with-label-container-padding-bottom)}.mdc-text-field--outlined .mat-mdc-form-field-infix,.mdc-text-field--no-label .mat-mdc-form-field-infix{padding-top:var(--mat-form-field-container-vertical-padding);padding-bottom:var(--mat-form-field-container-vertical-padding)}.mat-mdc-text-field-wrapper .mat-mdc-form-field-flex .mat-mdc-floating-label{top:calc(var(--mat-form-field-container-height)/2)}.mdc-text-field--filled .mat-mdc-floating-label{display:var(--mat-form-field-filled-label-display, block)}.mat-mdc-text-field-wrapper.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{--mat-mdc-form-field-label-transform: translateY(calc(calc(6.75px + var(--mat-form-field-container-height) / 2) * -1)) scale(var(--mat-mdc-form-field-floating-label-scale, 0.75));transform:var(--mat-mdc-form-field-label-transform)}.mat-mdc-form-field-subscript-wrapper{box-sizing:border-box;width:100%;position:relative}.mat-mdc-form-field-hint-wrapper,.mat-mdc-form-field-error-wrapper{position:absolute;top:0;left:0;right:0;padding:0 16px}.mat-mdc-form-field-subscript-dynamic-size .mat-mdc-form-field-hint-wrapper,.mat-mdc-form-field-subscript-dynamic-size .mat-mdc-form-field-error-wrapper{position:static}.mat-mdc-form-field-bottom-align::before{content:\\\"\\\";display:inline-block;height:16px}.mat-mdc-form-field-bottom-align.mat-mdc-form-field-subscript-dynamic-size::before{content:unset}.mat-mdc-form-field-hint-end{order:1}.mat-mdc-form-field-hint-wrapper{display:flex}.mat-mdc-form-field-hint-spacer{flex:1 0 1em}.mat-mdc-form-field-error{display:block;color:var(--mat-form-field-error-text-color, var(--mat-app-error))}.mat-mdc-form-field-subscript-wrapper,.mat-mdc-form-field-bottom-align::before{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-form-field-subscript-text-font, var(--mat-app-body-small-font));line-height:var(--mat-form-field-subscript-text-line-height, var(--mat-app-body-small-line-height));font-size:var(--mat-form-field-subscript-text-size, var(--mat-app-body-small-size));letter-spacing:var(--mat-form-field-subscript-text-tracking, var(--mat-app-body-small-tracking));font-weight:var(--mat-form-field-subscript-text-weight, var(--mat-app-body-small-weight))}.mat-mdc-form-field-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;opacity:0;pointer-events:none;background-color:var(--mat-form-field-state-layer-color, var(--mat-app-on-surface))}.mat-mdc-text-field-wrapper:hover .mat-mdc-form-field-focus-overlay{opacity:var(--mat-form-field-hover-state-layer-opacity, var(--mat-app-hover-state-layer-opacity))}.mat-mdc-form-field.mat-focused .mat-mdc-form-field-focus-overlay{opacity:var(--mat-form-field-focus-state-layer-opacity)}select.mat-mdc-form-field-input-control{-moz-appearance:none;-webkit-appearance:none;background-color:rgba(0,0,0,0);display:inline-flex;box-sizing:border-box}select.mat-mdc-form-field-input-control:not(:disabled){cursor:pointer}select.mat-mdc-form-field-input-control:not(.mat-mdc-native-select-inline) option{color:var(--mat-form-field-select-option-text-color)}select.mat-mdc-form-field-input-control:not(.mat-mdc-native-select-inline) option:disabled{color:var(--mat-form-field-select-disabled-option-text-color)}.mat-mdc-form-field-type-mat-native-select .mat-mdc-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid rgba(0,0,0,0);border-right:5px solid rgba(0,0,0,0);border-top:5px solid;position:absolute;right:0;top:50%;margin-top:-2.5px;pointer-events:none;color:var(--mat-form-field-enabled-select-arrow-color, var(--mat-app-on-surface-variant))}[dir=rtl] .mat-mdc-form-field-type-mat-native-select .mat-mdc-form-field-infix::after{right:auto;left:0}.mat-mdc-form-field-type-mat-native-select.mat-focused .mat-mdc-form-field-infix::after{color:var(--mat-form-field-focus-select-arrow-color, var(--mat-app-primary))}.mat-mdc-form-field-type-mat-native-select.mat-form-field-disabled .mat-mdc-form-field-infix::after{color:var(--mat-form-field-disabled-select-arrow-color)}.mat-mdc-form-field-type-mat-native-select .mat-mdc-form-field-input-control{padding-right:15px}[dir=rtl] .mat-mdc-form-field-type-mat-native-select .mat-mdc-form-field-input-control{padding-right:0;padding-left:15px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-mdc-text-field-wrapper{outline:solid 1px}.cdk-high-contrast-active .mat-form-field-appearance-fill.mat-form-field-disabled .mat-mdc-text-field-wrapper{outline-color:GrayText}.cdk-high-contrast-active .mat-form-field-appearance-fill.mat-focused .mat-mdc-text-field-wrapper{outline:dashed 3px}.cdk-high-contrast-active .mat-mdc-form-field.mat-focused .mdc-notched-outline{border:dashed 3px}.mat-mdc-form-field-input-control[type=date],.mat-mdc-form-field-input-control[type=datetime],.mat-mdc-form-field-input-control[type=datetime-local],.mat-mdc-form-field-input-control[type=month],.mat-mdc-form-field-input-control[type=week],.mat-mdc-form-field-input-control[type=time]{line-height:1}.mat-mdc-form-field-input-control::-webkit-datetime-edit{line-height:1;padding:0;margin-bottom:-2px}.mat-mdc-form-field{--mat-mdc-form-field-floating-label-scale: 0.75;display:inline-flex;flex-direction:column;min-width:0;text-align:left;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-form-field-container-text-font, var(--mat-app-body-large-font));line-height:var(--mat-form-field-container-text-line-height, var(--mat-app-body-large-line-height));font-size:var(--mat-form-field-container-text-size, var(--mat-app-body-large-size));letter-spacing:var(--mat-form-field-container-text-tracking, var(--mat-app-body-large-tracking));font-weight:var(--mat-form-field-container-text-weight, var(--mat-app-body-large-weight))}[dir=rtl] .mat-mdc-form-field{text-align:right}.mat-mdc-form-field .mdc-text-field--outlined .mdc-floating-label--float-above{font-size:calc(var(--mat-form-field-outlined-label-text-populated-size)*var(--mat-mdc-form-field-floating-label-scale))}.mat-mdc-form-field .mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:var(--mat-form-field-outlined-label-text-populated-size)}.mat-mdc-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-mdc-text-field-wrapper{width:100%;z-index:0}.mat-mdc-form-field-icon-prefix,.mat-mdc-form-field-icon-suffix{align-self:center;line-height:0;pointer-events:auto;position:relative;z-index:1}.mat-mdc-form-field-icon-prefix>.mat-icon,.mat-mdc-form-field-icon-suffix>.mat-icon{padding:0 12px;box-sizing:content-box}.mat-mdc-form-field-icon-prefix{color:var(--mat-form-field-leading-icon-color, var(--mat-app-on-surface-variant))}.mat-form-field-disabled .mat-mdc-form-field-icon-prefix{color:var(--mat-form-field-disabled-leading-icon-color)}.mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-trailing-icon-color, var(--mat-app-on-surface-variant))}.mat-form-field-disabled .mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-disabled-trailing-icon-color)}.mat-form-field-invalid .mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-error-trailing-icon-color, var(--mat-app-error))}.mat-form-field-invalid:not(.mat-focused):not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper:hover .mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-error-hover-trailing-icon-color, var(--mat-app-on-error-container))}.mat-form-field-invalid.mat-focused .mat-mdc-text-field-wrapper .mat-mdc-form-field-icon-suffix{color:var(--mat-form-field-error-focus-trailing-icon-color, var(--mat-app-error))}.mat-mdc-form-field-icon-prefix,[dir=rtl] .mat-mdc-form-field-icon-suffix{padding:0 4px 0 0}.mat-mdc-form-field-icon-suffix,[dir=rtl] .mat-mdc-form-field-icon-prefix{padding:0 0 0 4px}.mat-mdc-form-field-subscript-wrapper .mat-icon,.mat-mdc-form-field label .mat-icon{width:1em;height:1em;font-size:inherit}.mat-mdc-form-field-infix{flex:auto;min-width:0;width:180px;position:relative;box-sizing:border-box}.mat-mdc-form-field .mdc-notched-outline__notch{margin-left:-1px;-webkit-clip-path:inset(-9em -999em -9em 1px);clip-path:inset(-9em -999em -9em 1px)}[dir=rtl] .mat-mdc-form-field .mdc-notched-outline__notch{margin-left:0;margin-right:-1px;-webkit-clip-path:inset(-9em 1px -9em -999em);clip-path:inset(-9em 1px -9em -999em)}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-floating-label{transition:transform 150ms cubic-bezier(0.4, 0, 0.2, 1),color 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-text-field__input{transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-text-field__input::placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-text-field__input::-moz-placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-text-field__input::-webkit-input-placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-text-field__input:-ms-input-placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--no-label .mdc-text-field__input::placeholder,.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--focused .mdc-text-field__input::placeholder{transition-delay:40ms;transition-duration:110ms}.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--no-label .mdc-text-field__input::-moz-placeholder,.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--focused .mdc-text-field__input::-moz-placeholder{transition-delay:40ms;transition-duration:110ms}.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--no-label .mdc-text-field__input::-webkit-input-placeholder,.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--focused .mdc-text-field__input::-webkit-input-placeholder{transition-delay:40ms;transition-duration:110ms}.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--no-label .mdc-text-field__input:-ms-input-placeholder,.mat-mdc-form-field:not(.mat-form-field-no-animations).mdc-text-field--focused .mdc-text-field__input:-ms-input-placeholder{transition-delay:40ms;transition-duration:110ms}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-text-field--filled:not(.mdc-ripple-upgraded):focus .mdc-text-field__ripple::before{transition-duration:75ms}.mat-mdc-form-field:not(.mat-form-field-no-animations) .mdc-line-ripple::after{transition:transform 180ms cubic-bezier(0.4, 0, 0.2, 1),opacity 180ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-notched-outline .mdc-floating-label{max-width:calc(100% + 1px)}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:calc(133.3333333333% + 1px)}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i1.Directionality }, { type: i2.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { _textField: [{\n                type: ViewChild,\n                args: ['textField']\n            }], _iconPrefixContainer: [{\n                type: ViewChild,\n                args: ['iconPrefixContainer']\n            }], _textPrefixContainer: [{\n                type: ViewChild,\n                args: ['textPrefixContainer']\n            }], _floatingLabel: [{\n                type: ViewChild,\n                args: [MatFormFieldFloatingLabel]\n            }], _notchedOutline: [{\n                type: ViewChild,\n                args: [MatFormFieldNotchedOutline]\n            }], _lineRipple: [{\n                type: ViewChild,\n                args: [MatFormFieldLineRipple]\n            }], _formFieldControl: [{\n                type: ContentChild,\n                args: [MatFormFieldControl]\n            }], _prefixChildren: [{\n                type: ContentChildren,\n                args: [MAT_PREFIX, { descendants: true }]\n            }], _suffixChildren: [{\n                type: ContentChildren,\n                args: [MAT_SUFFIX, { descendants: true }]\n            }], _errorChildren: [{\n                type: ContentChildren,\n                args: [MAT_ERROR, { descendants: true }]\n            }], _hintChildren: [{\n                type: ContentChildren,\n                args: [MatHint, { descendants: true }]\n            }], hideRequiredMarker: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], floatLabel: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }], subscriptSizing: [{\n                type: Input\n            }], hintLabel: [{\n                type: Input\n            }] } });\n\nclass MatFormFieldModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            CommonModule,\n            ObserversModule,\n            MatFormField,\n            MatLabel,\n            MatError,\n            MatHint,\n            MatPrefix,\n            MatSuffix], exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            CommonModule,\n            ObserversModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFormFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        CommonModule,\n                        ObserversModule,\n                        MatFormField,\n                        MatLabel,\n                        MatError,\n                        MatHint,\n                        MatPrefix,\n                        MatSuffix,\n                    ],\n                    exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_ERROR, MAT_FORM_FIELD, MAT_FORM_FIELD_DEFAULT_OPTIONS, MAT_PREFIX, MAT_SUFFIX, MatError, MatFormField, MatFormFieldControl, MatFormFieldModule, MatHint, MatLabel, MatPrefix, MatSuffix, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, getMatFormFieldPlaceholderConflictError, matFormFieldAnimations };\n","import { Overlay, CdkOverlayOrigin, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { NgClass, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, booleanAttribute, numberAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Self, Attribute, ContentChildren, ContentChild, Input, ViewChild, Output, Directive, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, _ErrorStateTracker, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nexport { MatOptgroup, MatOption } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, filter, map, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nclass MatSelect {\n    /** Scrolls a particular option into the view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    /** Called when the panel has been opened and the overlay has settled on its final position. */\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    /** Creates a change event object that should be emitted by the select. */\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = value;\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = value;\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    /** Whether the select is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    constructor(_viewportRuler, _changeDetectorRef, \n    /**\n     * @deprecated Unused param, will be removed.\n     * @breaking-change 19.0.0\n     */\n    _unusedNgZone, defaultErrorStateMatcher, _elementRef, _dir, parentForm, parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n        ];\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `aria-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Disable the automatic labeling to avoid issues like #27241.\n         * @docs-private\n         */\n        this.disableAutomaticLabeling = true;\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        /** Whether the select is disabled. */\n        this.disabled = false;\n        /** Whether ripples in the select are disabled. */\n        this.disableRipple = false;\n        /** Tab index of the select. */\n        this.tabIndex = 0;\n        this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n        this._multiple = false;\n        /** Whether to center the active option over the trigger. */\n        this.disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /**\n         * Width of the panel. If set to `auto`, the panel will match the trigger width.\n         * If set to null or an empty string, the panel will grow to match the longest option's text.\n         */\n        this.panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n            ? this._defaultOptions.panelWidth\n            : 'auto';\n        this._initialized = new Subject();\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._initialized.pipe(switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n        // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n        // recommendation.\n        //\n        // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n        // makes a few exceptions for compound widgets.\n        //\n        // From [Developing a Keyboard Interface](\n        // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n        //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n        //   Listbox...\"\n        //\n        // The user can focus disabled options using the keyboard, but the user cannot click disabled\n        // options.\n        this._skipPredicate = (option) => {\n            if (this.panelOpen) {\n                // Support keyboard focusing disabled options in an ARIA listbox.\n                return false;\n            }\n            // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n            // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n            // closed.\n            return option.disabled;\n        };\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this.typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initialized.next();\n        this._initialized.complete();\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by the input, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n        this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (!this._canOpen()) {\n            return;\n        }\n        // It's important that we read this as late as possible, because doing so earlier will\n        // return a different element since it's based on queries in the form field which may\n        // not have run yet. Also this needs to be assigned before we measure the overlay width.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n        this._applyModalPanelOwnership();\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (!this._trackedModal) {\n            // Most commonly, the autocomplete trigger is not used inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n            // Required for the MDC form field to pick up when the overlay has been closed.\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Refreshes the error state of the select. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n        if (this.panelWidth === 'auto') {\n            const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin\n                ? preferredOrigin.elementRef\n                : preferredOrigin || this._elementRef;\n            return refToMeasure.nativeElement.getBoundingClientRect().width;\n        }\n        return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this.typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSelect, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: MatSelect, isStandalone: true, selector: \"mat-select\", inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute], placeholder: \"placeholder\", required: [\"required\", \"required\", booleanAttribute], multiple: [\"multiple\", \"multiple\", booleanAttribute], disableOptionCentering: [\"disableOptionCentering\", \"disableOptionCentering\", booleanAttribute], compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: [\"typeaheadDebounceInterval\", \"typeaheadDebounceInterval\", numberAttribute], sortComparator: \"sortComparator\", id: \"id\", panelWidth: \"panelWidth\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"listbox\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], exportAs: [\"matSelect\"], usesOnChanges: true, ngImport: i0, template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color, var(--mat-app-on-surface));font-family:var(--mat-select-trigger-text-font, var(--mat-app-body-large-font));line-height:var(--mat-select-trigger-text-line-height, var(--mat-app-body-large-line-height));font-size:var(--mat-select-trigger-text-size, var(--mat-app-body-large-size));font-weight:var(--mat-select-trigger-text-weight, var(--mat-app-body-large-weight));letter-spacing:var(--mat-select-trigger-text-tracking, var(--mat-app-body-large-tracking))}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color, var(--mat-app-error))}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color, var(--mat-app-on-surface-variant))}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color, var(--mat-app-primary))}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color, var(--mat-app-surface-container))}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color, var(--mat-app-on-surface-variant))}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform)}\"], dependencies: [{ kind: \"directive\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { kind: \"directive\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\", \"cdkConnectedOverlayDisposeOnNavigation\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], standalone: true, imports: [CdkOverlayOrigin, CdkConnectedOverlay, NgClass], template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color, var(--mat-app-on-surface));font-family:var(--mat-select-trigger-text-font, var(--mat-app-body-large-font));line-height:var(--mat-select-trigger-text-line-height, var(--mat-app-body-large-line-height));font-size:var(--mat-select-trigger-text-size, var(--mat-app-body-large-size));font-weight:var(--mat-select-trigger-text-weight, var(--mat-app-body-large-weight));letter-spacing:var(--mat-select-trigger-text-tracking, var(--mat-app-body-large-tracking))}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color, var(--mat-app-error))}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color, var(--mat-app-on-surface-variant))}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color, var(--mat-app-primary))}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color, var(--mat-app-surface-container))}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color, var(--mat-app-on-surface-variant))}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform)}\"] }]\n        }], ctorParameters: () => [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i6.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], multiple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableOptionCentering: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatSelectTrigger, isStandalone: true, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                    standalone: true,\n                }]\n        }] });\n\nclass MatSelectModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSelectModule, imports: [CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            MatSelect,\n            MatSelectTrigger], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        OverlayModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, matSelectAnimations };\n","import { takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, Injector, ElementRef, afterNextRender, Directive, Inject, Optional, Input, ANIMATION_MODULE_TYPE, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { DOCUMENT, NgClass, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\nimport * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n    },\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-mdc-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// These constants were taken from MDC's `numbers` object. We can't import them from MDC,\n// because they have some top-level references to `window` which break during SSR.\nconst MIN_VIEWPORT_TOOLTIP_THRESHOLD = 8;\nconst UNBOUNDED_ANCHOR_GAP = 8;\nconst MIN_HEIGHT = 24;\nconst MAX_WIDTH = 200;\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                this._tooltipInstance?.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /**\n     * Whether tooltip should be relative to the click or touch origin\n     * instead of outside the element bounding box.\n     */\n    get positionAtOrigin() {\n        return this._positionAtOrigin;\n    }\n    set positionAtOrigin(value) {\n        this._positionAtOrigin = coerceBooleanProperty(value);\n        this._detach();\n        this._overlayRef = null;\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        const isDisabled = coerceBooleanProperty(value);\n        if (this._disabled !== isDisabled) {\n            this._disabled = isDisabled;\n            // If tooltip is disabled, hide immediately.\n            if (isDisabled) {\n                this.hide(0);\n            }\n            else {\n                this._setupPointerEnterEventsIfNeeded();\n            }\n            this._syncAriaDescription(this.message);\n        }\n    }\n    /** The default delay in ms before showing the tooltip after show is called */\n    get showDelay() {\n        return this._showDelay;\n    }\n    set showDelay(value) {\n        this._showDelay = coerceNumberProperty(value);\n    }\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    get hideDelay() {\n        return this._hideDelay;\n    }\n    set hideDelay(value) {\n        this._hideDelay = coerceNumberProperty(value);\n        if (this._tooltipInstance) {\n            this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() {\n        return this._message;\n    }\n    set message(value) {\n        const oldMessage = this._message;\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n        }\n        this._syncAriaDescription(oldMessage);\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() {\n        return this._tooltipClass;\n    }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._positionAtOrigin = false;\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._tooltipComponent = TooltipComponent;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat-mdc';\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        this._injector = inject(Injector);\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            this._showDelay = _defaultOptions.showDelay;\n            this._hideDelay = _defaultOptions.hideDelay;\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.positionAtOrigin) {\n                this.positionAtOrigin = _defaultOptions.positionAtOrigin;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n            if (_defaultOptions.tooltipClass) {\n                this.tooltipClass = _defaultOptions.tooltipClass;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n        this._viewportMargin = MIN_VIEWPORT_TOOLTIP_THRESHOLD;\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor\n            .monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay, origin) {\n        if (this.disabled || !this.message || this._isTooltipVisible()) {\n            this._tooltipInstance?._cancelPendingAnimations();\n            return;\n        }\n        const overlayRef = this._createOverlay(origin);\n        this._detach();\n        this._portal =\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        const instance = (this._tooltipInstance = overlayRef.attach(this._portal).instance);\n        instance._triggerElement = this._elementRef.nativeElement;\n        instance._mouseLeaveHideDelay = this._hideDelay;\n        instance\n            .afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        instance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        const instance = this._tooltipInstance;\n        if (instance) {\n            if (instance.isVisible()) {\n                instance.hide(delay);\n            }\n            else {\n                instance._cancelPendingAnimations();\n                this._detach();\n            }\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle(origin) {\n        this._isTooltipVisible() ? this.hide() : this.show(undefined, origin);\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay(origin) {\n        if (this._overlayRef) {\n            const existingStrategy = this._overlayRef.getConfig()\n                .positionStrategy;\n            if ((!this.positionAtOrigin || !origin) && existingStrategy._origin instanceof ElementRef) {\n                return this._overlayRef;\n            }\n            this._detach();\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this.positionAtOrigin ? origin || this._elementRef : this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy(),\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef\n            .detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef\n            .outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._tooltipInstance?._handleBodyInteraction());\n        this._overlayRef\n            .keydownEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        });\n        if (this._defaultOptions?.disableTooltipInteractivity) {\n            this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n        }\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset({ ...origin.main, ...overlay.main }),\n            this._addOffset({ ...origin.fallback, ...overlay.fallback }),\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        const offset = UNBOUNDED_ANCHOR_GAP;\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        if (position.originY === 'top') {\n            position.offsetY = -offset;\n        }\n        else if (position.originY === 'bottom') {\n            position.offsetY = offset;\n        }\n        else if (position.originX === 'start') {\n            position.offsetX = isLtr ? -offset : offset;\n        }\n        else if (position.originX === 'end') {\n            position.offsetX = isLtr ? offset : -offset;\n        }\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y },\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y },\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            afterNextRender(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            }, {\n                injector: this._injector,\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled ||\n            !this.message ||\n            !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners.push([\n                'mouseenter',\n                event => {\n                    this._setupPointerExitEventsIfNeeded();\n                    let point = undefined;\n                    if (event.x !== undefined && event.y !== undefined) {\n                        point = event;\n                    }\n                    this.show(undefined, point);\n                },\n            ]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners.push([\n                'touchstart',\n                event => {\n                    const touch = event.targetTouches?.[0];\n                    const origin = touch ? { x: touch.clientX, y: touch.clientY } : undefined;\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    const DEFAULT_LONGPRESS_DELAY = 500;\n                    this._touchstartTimeout = setTimeout(() => this.show(undefined, origin), this._defaultOptions.touchLongPressShowDelay ?? DEFAULT_LONGPRESS_DELAY);\n                },\n            ]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push([\n                'mouseleave',\n                event => {\n                    const newTarget = event.relatedTarget;\n                    if (!newTarget || !this._overlayRef?.overlayElement.contains(newTarget)) {\n                        this.hide();\n                    }\n                },\n            ], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect =\n                    style.msUserSelect =\n                        style.webkitUserSelect =\n                            style.MozUserSelect =\n                                'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n    /** Updates the tooltip's ARIA description based on it current state. */\n    _syncAriaDescription(oldMessage) {\n        if (this._ariaDescriptionPending) {\n            return;\n        }\n        this._ariaDescriptionPending = true;\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, oldMessage, 'tooltip');\n        this._ngZone.runOutsideAngular(() => {\n            // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n            // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n            // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n            // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n            Promise.resolve().then(() => {\n                this._ariaDescriptionPending = false;\n                if (this.message && !this.disabled) {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                }\n            });\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTooltip, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i2.Platform }, { token: i3.AriaDescriber }, { token: i3.FocusMonitor }, { token: MAT_TOOLTIP_SCROLL_STRATEGY }, { token: i4.Directionality }, { token: MAT_TOOLTIP_DEFAULT_OPTIONS, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatTooltip, isStandalone: true, selector: \"[matTooltip]\", inputs: { position: [\"matTooltipPosition\", \"position\"], positionAtOrigin: [\"matTooltipPositionAtOrigin\", \"positionAtOrigin\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, host: { properties: { \"class.mat-mdc-tooltip-disabled\": \"disabled\" }, classAttribute: \"mat-mdc-tooltip-trigger\" }, exportAs: [\"matTooltip\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        'class': 'mat-mdc-tooltip-trigger',\n                        '[class.mat-mdc-tooltip-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i2.Platform }, { type: i3.AriaDescriber }, { type: i3.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n                }] }, { type: i4.Directionality }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { position: [{\n                type: Input,\n                args: ['matTooltipPosition']\n            }], positionAtOrigin: [{\n                type: Input,\n                args: ['matTooltipPositionAtOrigin']\n            }], disabled: [{\n                type: Input,\n                args: ['matTooltipDisabled']\n            }], showDelay: [{\n                type: Input,\n                args: ['matTooltipShowDelay']\n            }], hideDelay: [{\n                type: Input,\n                args: ['matTooltipHideDelay']\n            }], touchGestures: [{\n                type: Input,\n                args: ['matTooltipTouchGestures']\n            }], message: [{\n                type: Input,\n                args: ['matTooltip']\n            }], tooltipClass: [{\n                type: Input,\n                args: ['matTooltipClass']\n            }] } });\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent {\n    constructor(_changeDetectorRef, _elementRef, animationMode) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /* Whether the tooltip text overflows to multiple lines */\n        this._isMultiline = false;\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Whether the tooltip is currently visible. */\n        this._isVisible = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        /** Name of the show animation and the class that toggles it. */\n        this._showAnimation = 'mat-mdc-tooltip-show';\n        /** Name of the hide animation and the class that toggles it. */\n        this._hideAnimation = 'mat-mdc-tooltip-hide';\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId != null) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        this._showTimeoutId = setTimeout(() => {\n            this._toggleVisibility(true);\n            this._showTimeoutId = undefined;\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId != null) {\n            clearTimeout(this._showTimeoutId);\n        }\n        this._hideTimeoutId = setTimeout(() => {\n            this._toggleVisibility(false);\n            this._hideTimeoutId = undefined;\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._isVisible;\n    }\n    ngOnDestroy() {\n        this._cancelPendingAnimations();\n        this._onHide.complete();\n        this._triggerElement = null;\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    _handleMouseLeave({ relatedTarget }) {\n        if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n            if (this.isVisible()) {\n                this.hide(this._mouseLeaveHideDelay);\n            }\n            else {\n                this._finalizeAnimation(false);\n            }\n        }\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() {\n        this._isMultiline = this._isTooltipMultiline();\n        this._markForCheck();\n    }\n    /** Whether the tooltip text has overflown to the next line */\n    _isTooltipMultiline() {\n        const rect = this._elementRef.nativeElement.getBoundingClientRect();\n        return rect.height > MIN_HEIGHT && rect.width >= MAX_WIDTH;\n    }\n    /** Event listener dispatched when an animation on the tooltip finishes. */\n    _handleAnimationEnd({ animationName }) {\n        if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n            this._finalizeAnimation(animationName === this._showAnimation);\n        }\n    }\n    /** Cancels any pending animation sequences. */\n    _cancelPendingAnimations() {\n        if (this._showTimeoutId != null) {\n            clearTimeout(this._showTimeoutId);\n        }\n        if (this._hideTimeoutId != null) {\n            clearTimeout(this._hideTimeoutId);\n        }\n        this._showTimeoutId = this._hideTimeoutId = undefined;\n    }\n    /** Handles the cleanup after an animation has finished. */\n    _finalizeAnimation(toVisible) {\n        if (toVisible) {\n            this._closeOnInteraction = true;\n        }\n        else if (!this.isVisible()) {\n            this._onHide.next();\n        }\n    }\n    /** Toggles the visibility of the tooltip element. */\n    _toggleVisibility(isVisible) {\n        // We set the classes directly here ourselves so that toggling the tooltip state\n        // isn't bound by change detection. This allows us to hide it even if the\n        // view ref has been detached from the CD tree.\n        const tooltip = this._tooltip.nativeElement;\n        const showClass = this._showAnimation;\n        const hideClass = this._hideAnimation;\n        tooltip.classList.remove(isVisible ? hideClass : showClass);\n        tooltip.classList.add(isVisible ? showClass : hideClass);\n        if (this._isVisible !== isVisible) {\n            this._isVisible = isVisible;\n            this._changeDetectorRef.markForCheck();\n        }\n        // It's common for internal apps to disable animations using `* { animation: none !important }`\n        // which can break the opening sequence. Try to detect such cases and work around them.\n        if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n            const styles = getComputedStyle(tooltip);\n            // Use `getPropertyValue` to avoid issues with property renaming.\n            if (styles.getPropertyValue('animation-duration') === '0s' ||\n                styles.getPropertyValue('animation-name') === 'none') {\n                this._animationsDisabled = true;\n            }\n        }\n        if (isVisible) {\n            this._onShow();\n        }\n        if (this._animationsDisabled) {\n            tooltip.classList.add('_mat-animation-noopable');\n            this._finalizeAnimation(isVisible);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: TooltipComponent, isStandalone: true, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, listeners: { \"mouseleave\": \"_handleMouseLeave($event)\" }, properties: { \"style.zoom\": \"isVisible() ? 1 : null\" } }, viewQueries: [{ propertyName: \"_tooltip\", first: true, predicate: [\"tooltip\"], descendants: true, static: true }], ngImport: i0, template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mat-mdc-tooltip-surface mdc-tooltip__surface\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mat-mdc-tooltip{position:relative;transform:scale(0);display:inline-flex}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-surface{word-break:normal;overflow-wrap:anywhere;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center;will-change:transform,opacity;background-color:var(--mdc-plain-tooltip-container-color, var(--mat-app-inverse-surface));color:var(--mdc-plain-tooltip-supporting-text-color, var(--mat-app-inverse-on-surface));border-radius:var(--mdc-plain-tooltip-container-shape, var(--mat-app-corner-extra-small));font-family:var(--mdc-plain-tooltip-supporting-text-font, var(--mat-app-body-small-font));font-size:var(--mdc-plain-tooltip-supporting-text-size, var(--mat-app-body-small-size));font-weight:var(--mdc-plain-tooltip-supporting-text-weight, var(--mat-app-body-small-weight));line-height:var(--mdc-plain-tooltip-supporting-text-line-height, var(--mat-app-body-small-line-height));letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, var(--mat-app-body-small-tracking))}.mat-mdc-tooltip-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:right}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"], dependencies: [{ kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                        '[style.zoom]': 'isVisible() ? 1 : null',\n                        '(mouseleave)': '_handleMouseLeave($event)',\n                        'aria-hidden': 'true',\n                    }, standalone: true, imports: [NgClass], template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mat-mdc-tooltip-surface mdc-tooltip__surface\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mat-mdc-tooltip{position:relative;transform:scale(0);display:inline-flex}.mat-mdc-tooltip::before{content:\\\"\\\";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-surface{word-break:normal;overflow-wrap:anywhere;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center;will-change:transform,opacity;background-color:var(--mdc-plain-tooltip-container-color, var(--mat-app-inverse-surface));color:var(--mdc-plain-tooltip-supporting-text-color, var(--mat-app-inverse-on-surface));border-radius:var(--mdc-plain-tooltip-container-shape, var(--mat-app-corner-extra-small));font-family:var(--mdc-plain-tooltip-supporting-text-font, var(--mat-app-body-small-font));font-size:var(--mdc-plain-tooltip-supporting-text-size, var(--mat-app-body-small-size));font-weight:var(--mdc-plain-tooltip-supporting-text-weight, var(--mat-app-body-small-weight));line-height:var(--mdc-plain-tooltip-supporting-text-line-height, var(--mat-app-body-small-line-height));letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, var(--mat-app-body-small-tracking))}.mat-mdc-tooltip-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mat-mdc-tooltip-surface{text-align:right}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"] }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { _tooltip: [{\n                type: ViewChild,\n                args: ['tooltip', {\n                        // Use a static query here since we interact directly with\n                        // the DOM which can happen before `ngAfterViewInit`.\n                        static: true,\n                    }]\n            }] } });\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        // TODO(crisbeto): these values are based on MDC's CSS.\n        // We should be able to use their styles directly once we land #19432.\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0.8)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => hidden', animate('75ms cubic-bezier(0.4, 0, 1, 1)')),\n    ]),\n};\n\nclass MatTooltipModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTooltipModule, imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatTooltip, TooltipComponent], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatTooltip, TooltipComponent],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };\n","import * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, numberAttribute, EventEmitter, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, Output, NgModule } from '@angular/core';\nimport { Subject, ReplaySubject } from 'rxjs';\nimport { MatIconButton, MatButtonModule } from '@angular/material/button';\nimport { MatSelect, MatSelectModule } from '@angular/material/select';\nimport { MatTooltip, MatTooltipModule } from '@angular/material/tooltip';\nimport { MatOption } from '@angular/material/core';\nimport { MatFormField } from '@angular/material/form-field';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /** A label for the page size selector. */\n        this.itemsPerPageLabel = 'Items per page:';\n        /** A label for the button that increments the current page. */\n        this.nextPageLabel = 'Next page';\n        /** A label for the button that decrements the current page. */\n        this.previousPageLabel = 'Previous page';\n        /** A label for the button that moves to the first page. */\n        this.firstPageLabel = 'First page';\n        /** A label for the button that moves to the last page. */\n        this.lastPageLabel = 'Last page';\n        /** A label for the range of items within the current page and the length of the whole list. */\n        this.getRangeLabel = (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatPaginatorIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatPaginatorIntl, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatPaginatorIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY,\n};\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\nlet nextUniqueId = 0;\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator {\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    get pageIndex() {\n        return this._pageIndex;\n    }\n    set pageIndex(value) {\n        this._pageIndex = Math.max(value || 0, 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    get length() {\n        return this._length;\n    }\n    set length(value) {\n        this._length = value || 0;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Number of items to display on a page. By default set to 50. */\n    get pageSize() {\n        return this._pageSize;\n    }\n    set pageSize(value) {\n        this._pageSize = Math.max(value || 0, 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** The set of provided page size options to display to the user. */\n    get pageSizeOptions() {\n        return this._pageSizeOptions;\n    }\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map(p => numberAttribute(p, 0));\n        this._updateDisplayedPageSizeOptions();\n    }\n    constructor(_intl, _changeDetectorRef, defaults) {\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ID for the DOM node containing the paginator's items per page label. */\n        this._pageSizeLabelId = `mat-paginator-page-size-label-${nextUniqueId++}`;\n        this._isInitialized = false;\n        this._initializedStream = new ReplaySubject(1);\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        /** Whether to hide the page size selection UI from the user. */\n        this.hidePageSize = false;\n        /** Whether to show the first/last buttons UI to the user. */\n        this.showFirstLastButtons = false;\n        /** Used to configure the underlying `MatSelect` inside the paginator. */\n        this.selectConfig = {};\n        /** Whether the paginator is disabled. */\n        this.disabled = false;\n        /** Event emitted when the paginator changes the page size or page index. */\n        this.page = new EventEmitter();\n        /** Emits when the paginator is initialized. */\n        this.initialized = this._initializedStream;\n        this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n        if (defaults) {\n            const { pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons } = defaults;\n            if (pageSize != null) {\n                this._pageSize = pageSize;\n            }\n            if (pageSizeOptions != null) {\n                this._pageSizeOptions = pageSizeOptions;\n            }\n            if (hidePageSize != null) {\n                this.hidePageSize = hidePageSize;\n            }\n            if (showFirstLastButtons != null) {\n                this.showFirstLastButtons = showFirstLastButtons;\n            }\n        }\n        this._formFieldAppearance = defaults?.formFieldAppearance || 'outline';\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._initializedStream.next();\n    }\n    ngOnDestroy() {\n        this._initializedStream.complete();\n        this._intlChanges.unsubscribe();\n    }\n    /** Advances to the next page if it exists. */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex + 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move back to the previous page if it exists. */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the first page if not already there. */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the last page if not already there. */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Whether there is a previous page. */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /** Whether there is a next page. */\n    hasNextPage() {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /** Calculate the number of pages */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        const startIndex = this.pageIndex * this.pageSize;\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._isInitialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize =\n                this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((a, b) => a - b);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length,\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatPaginator, deps: [{ token: MatPaginatorIntl }, { token: i0.ChangeDetectorRef }, { token: MAT_PAGINATOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: MatPaginator, isStandalone: true, selector: \"mat-paginator\", inputs: { color: \"color\", pageIndex: [\"pageIndex\", \"pageIndex\", numberAttribute], length: [\"length\", \"length\", numberAttribute], pageSize: [\"pageSize\", \"pageSize\", numberAttribute], pageSizeOptions: \"pageSizeOptions\", hidePageSize: [\"hidePageSize\", \"hidePageSize\", booleanAttribute], showFirstLastButtons: [\"showFirstLastButtons\", \"showFirstLastButtons\", booleanAttribute], selectConfig: \"selectConfig\", disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { page: \"page\" }, host: { attributes: { \"role\": \"group\" }, classAttribute: \"mat-mdc-paginator\" }, exportAs: [\"matPaginator\"], ngImport: i0, template: \"<div class=\\\"mat-mdc-paginator-outer-container\\\">\\n  <div class=\\\"mat-mdc-paginator-container\\\">\\n    @if (!hidePageSize) {\\n      <div class=\\\"mat-mdc-paginator-page-size\\\">\\n        <div class=\\\"mat-mdc-paginator-page-size-label\\\" [attr.id]=\\\"_pageSizeLabelId\\\">\\n          {{_intl.itemsPerPageLabel}}\\n        </div>\\n\\n        @if (_displayedPageSizeOptions.length > 1) {\\n          <mat-form-field\\n            [appearance]=\\\"_formFieldAppearance!\\\"\\n            [color]=\\\"color\\\"\\n            class=\\\"mat-mdc-paginator-page-size-select\\\">\\n            <mat-select\\n              #selectRef\\n              [value]=\\\"pageSize\\\"\\n              [disabled]=\\\"disabled\\\"\\n              [aria-labelledby]=\\\"_pageSizeLabelId\\\"\\n              [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n              [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n              (selectionChange)=\\\"_changePageSize($event.value)\\\"\\n              hideSingleSelectionIndicator>\\n              @for (pageSizeOption of _displayedPageSizeOptions; track pageSizeOption) {\\n                <mat-option [value]=\\\"pageSizeOption\\\">\\n                  {{pageSizeOption}}\\n                </mat-option>\\n              }\\n            </mat-select>\\n          <div class=\\\"mat-mdc-paginator-touch-target\\\" (click)=\\\"selectRef.open()\\\"></div>\\n          </mat-form-field>\\n        }\\n\\n        @if (_displayedPageSizeOptions.length <= 1) {\\n          <div class=\\\"mat-mdc-paginator-page-size-value\\\">{{pageSize}}</div>\\n        }\\n      </div>\\n    }\\n\\n    <div class=\\\"mat-mdc-paginator-range-actions\\\">\\n      <div class=\\\"mat-mdc-paginator-range-label\\\" aria-live=\\\"polite\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      @if (showFirstLastButtons) {\\n        <button mat-icon-button type=\\\"button\\\"\\n                class=\\\"mat-mdc-paginator-navigation-first\\\"\\n                (click)=\\\"firstPage()\\\"\\n                [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n                [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n                [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n                [matTooltipPosition]=\\\"'above'\\\"\\n                [disabled]=\\\"_previousButtonsDisabled()\\\">\\n          <svg class=\\\"mat-mdc-paginator-icon\\\"\\n              viewBox=\\\"0 0 24 24\\\"\\n              focusable=\\\"false\\\"\\n              aria-hidden=\\\"true\\\">\\n            <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n          </svg>\\n        </button>\\n      }\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\"\\n             viewBox=\\\"0 0 24 24\\\"\\n             focusable=\\\"false\\\"\\n             aria-hidden=\\\"true\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\"\\n             viewBox=\\\"0 0 24 24\\\"\\n             focusable=\\\"false\\\"\\n             aria-hidden=\\\"true\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      @if (showFirstLastButtons) {\\n        <button mat-icon-button type=\\\"button\\\"\\n                class=\\\"mat-mdc-paginator-navigation-last\\\"\\n                (click)=\\\"lastPage()\\\"\\n                [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n                [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n                [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n                [matTooltipPosition]=\\\"'above'\\\"\\n                [disabled]=\\\"_nextButtonsDisabled()\\\">\\n          <svg class=\\\"mat-mdc-paginator-icon\\\"\\n              viewBox=\\\"0 0 24 24\\\"\\n              focusable=\\\"false\\\"\\n              aria-hidden=\\\"true\\\">\\n            <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n          </svg>\\n        </button>\\n      }\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-paginator{display:block;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-paginator-container-text-color, var(--mat-app-on-surface));background-color:var(--mat-paginator-container-background-color, var(--mat-app-surface));font-family:var(--mat-paginator-container-text-font, var(--mat-app-body-small-font));line-height:var(--mat-paginator-container-text-line-height, var(--mat-app-body-small-line-height));font-size:var(--mat-paginator-container-text-size, var(--mat-app-body-small-size));font-weight:var(--mat-paginator-container-text-weight, var(--mat-app-body-small-weight));letter-spacing:var(--mat-paginator-container-text-tracking, var(--mat-app-body-small-tracking));--mat-form-field-container-height:var(--mat-paginator-form-field-container-height);--mat-form-field-container-vertical-padding:var(--mat-paginator-form-field-container-vertical-padding)}.mat-mdc-paginator .mat-mdc-select-value{font-size:var(--mat-paginator-select-trigger-text-size, var(--mat-app-body-small-size))}.mat-mdc-paginator .mat-mdc-form-field-subscript-wrapper{display:none}.mat-mdc-paginator .mat-mdc-select{line-height:1.5}.mat-mdc-paginator-outer-container{display:flex}.mat-mdc-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap;width:100%;min-height:var(--mat-paginator-container-size)}.mat-mdc-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-mdc-paginator-page-size{margin-right:0;margin-left:8px}.mat-mdc-paginator-page-size-label{margin:0 4px}.mat-mdc-paginator-page-size-select{margin:0 4px;width:84px}.mat-mdc-paginator-range-label{margin:0 32px 0 24px}.mat-mdc-paginator-range-actions{display:flex;align-items:center}.mat-mdc-paginator-icon{display:inline-block;width:28px;fill:var(--mat-paginator-enabled-icon-color, var(--mat-app-on-surface-variant))}.mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon{fill:var(--mat-paginator-disabled-icon-color)}[dir=rtl] .mat-mdc-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon,.cdk-high-contrast-active .mat-mdc-paginator-icon{fill:currentColor;fill:CanvasText}.cdk-high-contrast-active .mat-mdc-paginator-range-actions .mat-mdc-icon-button{outline:solid 1px}.mat-mdc-paginator-touch-target{display:var(--mat-paginator-touch-target-display);position:absolute;top:50%;left:50%;width:84px;height:48px;background-color:rgba(0,0,0,0);transform:translate(-50%, -50%);cursor:pointer}\"], dependencies: [{ kind: \"component\", type: MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"component\", type: MatSelect, selector: \"mat-select\", inputs: [\"aria-describedby\", \"panelClass\", \"disabled\", \"disableRipple\", \"tabIndex\", \"hideSingleSelectionIndicator\", \"placeholder\", \"required\", \"multiple\", \"disableOptionCentering\", \"compareWith\", \"value\", \"aria-label\", \"aria-labelledby\", \"errorStateMatcher\", \"typeaheadDebounceInterval\", \"sortComparator\", \"id\", \"panelWidth\"], outputs: [\"openedChange\", \"opened\", \"closed\", \"selectionChange\", \"valueChange\"], exportAs: [\"matSelect\"] }, { kind: \"component\", type: MatOption, selector: \"mat-option\", inputs: [\"value\", \"id\", \"disabled\"], outputs: [\"onSelectionChange\"], exportAs: [\"matOption\"] }, { kind: \"component\", type: MatIconButton, selector: \"button[mat-icon-button]\", exportAs: [\"matButton\"] }, { kind: \"directive\", type: MatTooltip, selector: \"[matTooltip]\", inputs: [\"matTooltipPosition\", \"matTooltipPositionAtOrigin\", \"matTooltipDisabled\", \"matTooltipShowDelay\", \"matTooltipHideDelay\", \"matTooltipTouchGestures\", \"matTooltip\", \"matTooltipClass\"], exportAs: [\"matTooltip\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatPaginator, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-paginator', exportAs: 'matPaginator', host: {\n                        'class': 'mat-mdc-paginator',\n                        'role': 'group',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [MatFormField, MatSelect, MatOption, MatIconButton, MatTooltip], template: \"<div class=\\\"mat-mdc-paginator-outer-container\\\">\\n  <div class=\\\"mat-mdc-paginator-container\\\">\\n    @if (!hidePageSize) {\\n      <div class=\\\"mat-mdc-paginator-page-size\\\">\\n        <div class=\\\"mat-mdc-paginator-page-size-label\\\" [attr.id]=\\\"_pageSizeLabelId\\\">\\n          {{_intl.itemsPerPageLabel}}\\n        </div>\\n\\n        @if (_displayedPageSizeOptions.length > 1) {\\n          <mat-form-field\\n            [appearance]=\\\"_formFieldAppearance!\\\"\\n            [color]=\\\"color\\\"\\n            class=\\\"mat-mdc-paginator-page-size-select\\\">\\n            <mat-select\\n              #selectRef\\n              [value]=\\\"pageSize\\\"\\n              [disabled]=\\\"disabled\\\"\\n              [aria-labelledby]=\\\"_pageSizeLabelId\\\"\\n              [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n              [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n              (selectionChange)=\\\"_changePageSize($event.value)\\\"\\n              hideSingleSelectionIndicator>\\n              @for (pageSizeOption of _displayedPageSizeOptions; track pageSizeOption) {\\n                <mat-option [value]=\\\"pageSizeOption\\\">\\n                  {{pageSizeOption}}\\n                </mat-option>\\n              }\\n            </mat-select>\\n          <div class=\\\"mat-mdc-paginator-touch-target\\\" (click)=\\\"selectRef.open()\\\"></div>\\n          </mat-form-field>\\n        }\\n\\n        @if (_displayedPageSizeOptions.length <= 1) {\\n          <div class=\\\"mat-mdc-paginator-page-size-value\\\">{{pageSize}}</div>\\n        }\\n      </div>\\n    }\\n\\n    <div class=\\\"mat-mdc-paginator-range-actions\\\">\\n      <div class=\\\"mat-mdc-paginator-range-label\\\" aria-live=\\\"polite\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      @if (showFirstLastButtons) {\\n        <button mat-icon-button type=\\\"button\\\"\\n                class=\\\"mat-mdc-paginator-navigation-first\\\"\\n                (click)=\\\"firstPage()\\\"\\n                [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n                [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n                [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n                [matTooltipPosition]=\\\"'above'\\\"\\n                [disabled]=\\\"_previousButtonsDisabled()\\\">\\n          <svg class=\\\"mat-mdc-paginator-icon\\\"\\n              viewBox=\\\"0 0 24 24\\\"\\n              focusable=\\\"false\\\"\\n              aria-hidden=\\\"true\\\">\\n            <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n          </svg>\\n        </button>\\n      }\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\"\\n             viewBox=\\\"0 0 24 24\\\"\\n             focusable=\\\"false\\\"\\n             aria-hidden=\\\"true\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\"\\n             viewBox=\\\"0 0 24 24\\\"\\n             focusable=\\\"false\\\"\\n             aria-hidden=\\\"true\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      @if (showFirstLastButtons) {\\n        <button mat-icon-button type=\\\"button\\\"\\n                class=\\\"mat-mdc-paginator-navigation-last\\\"\\n                (click)=\\\"lastPage()\\\"\\n                [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n                [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n                [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n                [matTooltipPosition]=\\\"'above'\\\"\\n                [disabled]=\\\"_nextButtonsDisabled()\\\">\\n          <svg class=\\\"mat-mdc-paginator-icon\\\"\\n              viewBox=\\\"0 0 24 24\\\"\\n              focusable=\\\"false\\\"\\n              aria-hidden=\\\"true\\\">\\n            <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n          </svg>\\n        </button>\\n      }\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-paginator{display:block;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-paginator-container-text-color, var(--mat-app-on-surface));background-color:var(--mat-paginator-container-background-color, var(--mat-app-surface));font-family:var(--mat-paginator-container-text-font, var(--mat-app-body-small-font));line-height:var(--mat-paginator-container-text-line-height, var(--mat-app-body-small-line-height));font-size:var(--mat-paginator-container-text-size, var(--mat-app-body-small-size));font-weight:var(--mat-paginator-container-text-weight, var(--mat-app-body-small-weight));letter-spacing:var(--mat-paginator-container-text-tracking, var(--mat-app-body-small-tracking));--mat-form-field-container-height:var(--mat-paginator-form-field-container-height);--mat-form-field-container-vertical-padding:var(--mat-paginator-form-field-container-vertical-padding)}.mat-mdc-paginator .mat-mdc-select-value{font-size:var(--mat-paginator-select-trigger-text-size, var(--mat-app-body-small-size))}.mat-mdc-paginator .mat-mdc-form-field-subscript-wrapper{display:none}.mat-mdc-paginator .mat-mdc-select{line-height:1.5}.mat-mdc-paginator-outer-container{display:flex}.mat-mdc-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap;width:100%;min-height:var(--mat-paginator-container-size)}.mat-mdc-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-mdc-paginator-page-size{margin-right:0;margin-left:8px}.mat-mdc-paginator-page-size-label{margin:0 4px}.mat-mdc-paginator-page-size-select{margin:0 4px;width:84px}.mat-mdc-paginator-range-label{margin:0 32px 0 24px}.mat-mdc-paginator-range-actions{display:flex;align-items:center}.mat-mdc-paginator-icon{display:inline-block;width:28px;fill:var(--mat-paginator-enabled-icon-color, var(--mat-app-on-surface-variant))}.mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon{fill:var(--mat-paginator-disabled-icon-color)}[dir=rtl] .mat-mdc-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon,.cdk-high-contrast-active .mat-mdc-paginator-icon{fill:currentColor;fill:CanvasText}.cdk-high-contrast-active .mat-mdc-paginator-range-actions .mat-mdc-icon-button{outline:solid 1px}.mat-mdc-paginator-touch-target{display:var(--mat-paginator-touch-target-display);position:absolute;top:50%;left:50%;width:84px;height:48px;background-color:rgba(0,0,0,0);transform:translate(-50%, -50%);cursor:pointer}\"] }]\n        }], ctorParameters: () => [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n                }] }], propDecorators: { color: [{\n                type: Input\n            }], pageIndex: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], length: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], pageSize: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], pageSizeOptions: [{\n                type: Input\n            }], hidePageSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], showFirstLastButtons: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], selectConfig: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], page: [{\n                type: Output\n            }] } });\n\nclass MatPaginatorModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatPaginatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatPaginatorModule, imports: [MatButtonModule, MatSelectModule, MatTooltipModule, MatPaginator], exports: [MatPaginator] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatPaginatorModule, providers: [MAT_PAGINATOR_INTL_PROVIDER], imports: [MatButtonModule, MatSelectModule, MatTooltipModule, MatPaginator] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatPaginatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatButtonModule, MatSelectModule, MatTooltipModule, MatPaginator],\n                    exports: [MatPaginator],\n                    providers: [MAT_PAGINATOR_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent };\n","import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n         * specified. The default 'material-icons' value assumes that the material icon font has been\n         * loaded as described at https://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * If the registered font is a ligature font, then don't forget to also include the special\n     * class `mat-ligature-font` to allow the usage via attribute. So register like this:\n     *\n     * ```ts\n     * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\n     * ```\n     *\n     * And use like this:\n     *\n     * ```html\n     * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\n     * ```\n     *\n     * @param alias Alias for the font.\n     * @param classNames Class names override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, classNames = alias) {\n        this._fontCssClassesByAlias.set(alias, classNames);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    setDefaultFontSetClass(...classNames) {\n        this._defaultFontSetClass = classNames;\n        return this;\n    }\n    /**\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = options?.withCredentials ?? false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ErrorHandler }] });\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon {\n    /**\n     * Theme color of the icon. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color || this._defaultColor;\n    }\n    set color(value) {\n        this._color = value;\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    constructor(_elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\n        this._elementRef = _elementRef;\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        /**\n         * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n         * the element the icon is contained in.\n         */\n        this.inline = false;\n        this._previousFontSetClass = [];\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this._defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            _elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }, { token: MAT_ICON_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatIcon, isStandalone: true, selector: \"mat-icon\", inputs: { color: \"color\", inline: [\"inline\", \"inline\", booleanAttribute], svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"class\": \"color ? \\\"mat-\\\" + color : \\\"\\\"\", \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[class]': 'color ? \"mat-\" + color : \"\"',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, styles: [\"mat-icon,mat-icon.mat-primary,mat-icon.mat-accent,mat-icon.mat-warn{color:var(--mat-icon-color)}.mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['aria-hidden']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_ICON_LOCATION]\n                }] }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_ICON_DEFAULT_OPTIONS]\n                }] }], propDecorators: { color: [{\n                type: Input\n            }], inline: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\nclass MatIconModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatIcon], exports: [MatIcon, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatIcon],\n                    exports: [MatIcon, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n","import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, booleanAttribute, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            },\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: AutofillMonitor, deps: [{ token: i1.Platform }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.Platform }, { type: i0.NgZone }] });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkAutofill, deps: [{ token: i0.ElementRef }, { token: AutofillMonitor }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkAutofill, isStandalone: true, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: AutofillMonitor }], propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        /** Handles `focus` and `blur` events. */\n        this._handleFocusEvent = (event) => {\n            this._hasFocus = event.type === 'focus';\n        };\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTextareaAutosize, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkTextareaAutosize, isStandalone: true, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\", booleanAttribute], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: [{ alias: 'cdkTextareaAutosize', transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }] } });\n\nclass TextFieldModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TextFieldModule, imports: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TextFieldModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { _ErrorStateTracker, MatCommonModule } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\nlet nextUniqueId = 0;\nclass MatInput {\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n        this._ensureWheelDefaultBehavior();\n    }\n    /** An object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    /** Whether the input is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    constructor(_elementRef, _platform, ngControl, parentForm, parentFormGroup, defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, _ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form field for determining whether the placeholder has been promoted.\n    _formField) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._ngZone = _ngZone;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        this._webkitBlinkWheelListenerAttached = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week',\n        ].filter(t => getSupportedInputTypes().has(t));\n        this._iOSKeyupListener = (event) => {\n            const el = event.target;\n            // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n            // indicate different things. If the value is 0, it means that the caret is at the start\n            // of the input, whereas a value of `null` means that the input doesn't support\n            // manipulating the selection range. Inputs that don't support setting the selection range\n            // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n            // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n            if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                // `1, 1` fixes it for the first time that you type text and\n                // then hold delete. Toggling to `1, 1` and then back to\n                // `0, 0` seems to completely fix it.\n                el.setSelectionRange(1, 1);\n                el.setSelectionRange(0, 0);\n            }\n        };\n        this._webkitBlinkWheelListener = () => {\n            // This is a noop function and is used to enable mouse wheel input\n            // on number inputs\n            // on blink and webkit browsers.\n        };\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            _ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', this._iOSKeyupListener);\n            });\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        if (this._platform.IOS) {\n            this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n        }\n        if (this._webkitBlinkWheelListenerAttached) {\n            this._elementRef.nativeElement.removeEventListener('wheel', this._webkitBlinkWheelListener);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            // Since the input isn't a `ControlValueAccessor`, we don't have a good way of knowing when\n            // the disabled state has changed. We can't use the `ngControl.statusChanges`, because it\n            // won't fire if the input is disabled with `emitEvents = false`, despite the input becoming\n            // disabled.\n            if (this.ngControl.disabled !== null && this.ngControl.disabled !== this.disabled) {\n                this.disabled = this.ngControl.disabled;\n                this.stateChanges.next();\n            }\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Refreshes the error state of the input. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        const placeholder = this._getPlaceholder();\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Gets the current placeholder of the form field. */\n    _getPlaceholder() {\n        return this.placeholder || null;\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n    /**\n     * In blink and webkit browsers a focused number input does not increment or decrement its value\n     * on mouse wheel interaction unless a wheel event listener is attached to it or one of its ancestors or a passive wheel listener is attached somewhere in the DOM.\n     * For example: Hitting a tooltip once enables the mouse wheel input for all number inputs as long as it exists.\n     * In order to get reliable and intuitive behavior we apply a wheel event on our own\n     * thus making sure increment and decrement by mouse wheel works every time.\n     * @docs-private\n     */\n    _ensureWheelDefaultBehavior() {\n        if (!this._webkitBlinkWheelListenerAttached &&\n            this._type === 'number' &&\n            (this._platform.BLINK || this._platform.WEBKIT)) {\n            this._ngZone.runOutsideAngular(() => {\n                this._elementRef.nativeElement.addEventListener('wheel', this._webkitBlinkWheelListener);\n            });\n            this._webkitBlinkWheelListenerAttached = true;\n        }\n        if (this._webkitBlinkWheelListenerAttached && this._type !== 'number') {\n            this._elementRef.nativeElement.removeEventListener('wheel', this._webkitBlinkWheelListener);\n            this._webkitBlinkWheelListenerAttached = true;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatInput, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: MAT_INPUT_VALUE_ACCESSOR, optional: true, self: true }, { token: i4.AutofillMonitor }, { token: i0.NgZone }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatInput, isStandalone: true, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\" }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"class.mat-mdc-form-field-textarea-control\": \"_isInFormField && _isTextarea\", \"class.mat-mdc-form-field-input-control\": \"_isInFormField\", \"class.mdc-text-field__input\": \"_isInFormField\", \"class.mat-mdc-native-select-inline\": \"_isInlineSelect()\", \"id\": \"id\", \"disabled\": \"disabled\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"readonly && !_isNativeSelect || null\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\", \"attr.id\": \"id\" }, classAttribute: \"mat-mdc-input-element\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        'class': 'mat-mdc-input-element',\n                        // The BaseMatInput parent class adds `mat-input-element`, `mat-form-field-control` and\n                        // `mat-form-field-autofill-control` to the CSS class list, but this should not be added for\n                        // this MDC equivalent input.\n                        '[class.mat-input-server]': '_isServer',\n                        '[class.mat-mdc-form-field-textarea-control]': '_isInFormField && _isTextarea',\n                        '[class.mat-mdc-form-field-input-control]': '_isInFormField',\n                        '[class.mdc-text-field__input]': '_isInFormField',\n                        '[class.mat-mdc-native-select-inline]': '_isInlineSelect()',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[id]': 'id',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i2.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i2.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [MAT_INPUT_VALUE_ACCESSOR]\n                }] }, { type: i4.AutofillMonitor }, { type: i0.NgZone }, { type: i5.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }], propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }] } });\n\nclass MatInputModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatInput], exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatFormFieldModule, TextFieldModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatFormFieldModule, MatInput],\n                    exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n","import * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayRef, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform, _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ChangeDetectorRef, Injector, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, InjectionToken, TemplateRef, Injectable, SkipSelf, NgModule } from '@angular/core';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith } from 'rxjs/operators';\n\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Optional CSS class or classes applied to the overlay panel. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Optional CSS class or classes applied to the overlay backdrop. */\n        this.backdropClass = '';\n        /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Dialog label applied via `aria-label` */\n        this.ariaLabel = null;\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the previously-focused element upon closing.\n         * Has the following behavior based on the type that is passed in:\n         * - `boolean` - when true, will return focus to the element that was focused before the dialog\n         *    was opened, otherwise won't restore focus at all.\n         * - `string` - focus will be restored to the first element that matches the CSS selector.\n         * - `HTMLElement` - focus will be restored to the specific element.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user navigates backwards or forwards through browser\n         * history. This does not apply to navigation via anchor element unless using URL-hash based\n         * routing (`HashLocationStrategy` in the Angular router).\n         */\n        this.closeOnNavigation = true;\n        /**\n         * Whether the dialog should close when the dialog service is destroyed. This is useful if\n         * another service is wrapping the dialog and is managing the destruction instead.\n         */\n        this.closeOnDestroy = true;\n        /**\n         * Whether the dialog should close when the underlying overlay is detached. This is useful if\n         * another service is wrapping the dialog and is managing the destruction instead. E.g. an\n         * external detachment can happen as a result of a scroll strategy triggering it or when the\n         * browser location changes.\n         */\n        this.closeOnOverlayDetachments = true;\n    }\n}\n\nfunction throwDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _document, _config, _interactivityChecker, _ngZone, _overlayRef, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._config = _config;\n        this._interactivityChecker = _interactivityChecker;\n        this._ngZone = _ngZone;\n        this._overlayRef = _overlayRef;\n        this._focusMonitor = _focusMonitor;\n        this._platform = inject(Platform);\n        /** The class that traps and manages focus within the dialog. */\n        this._focusTrap = null;\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Queue of the IDs of the dialog's label element, based on their definition order. The first\n         * ID will be used as the `aria-labelledby` value. We use a queue here to handle the case\n         * where there are two or more titles in the DOM at a time and the first one is destroyed while\n         * the rest are present.\n         */\n        this._ariaLabelledByQueue = [];\n        this._changeDetectorRef = inject(ChangeDetectorRef);\n        this._injector = inject(Injector);\n        this._isDestroyed = false;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwDialogContentAlreadyAttachedError();\n            }\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._contentAttached();\n            return result;\n        };\n        this._document = _document;\n        if (this._config.ariaLabelledBy) {\n            this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);\n        }\n    }\n    _addAriaLabelledBy(id) {\n        this._ariaLabelledByQueue.push(id);\n        this._changeDetectorRef.markForCheck();\n    }\n    _removeAriaLabelledBy(id) {\n        const index = this._ariaLabelledByQueue.indexOf(id);\n        if (index > -1) {\n            this._ariaLabelledByQueue.splice(index, 1);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    _contentAttached() {\n        this._initializeFocusTrap();\n        this._handleBackdropClicks();\n        this._captureInitialFocus();\n    }\n    /**\n     * Can be used by child classes to customize the initial focus\n     * capturing behavior (e.g. if it's tied to an animation).\n     */\n    _captureInitialFocus() {\n        this._trapFocus();\n    }\n    ngOnDestroy() {\n        this._isDestroyed = true;\n        this._restoreFocus();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n    /** Captures focus if it isn't already inside the dialog. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        if (this._isDestroyed) {\n            return;\n        }\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait until after the next render.\n        afterNextRender(() => {\n            const element = this._elementRef.nativeElement;\n            switch (this._config.autoFocus) {\n                case false:\n                case 'dialog':\n                    // Ensure that focus is on the dialog container. It's possible that a different\n                    // component tried to move focus while the open animation was running. See:\n                    // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                    // if the focus isn't inside the dialog already, because it's possible that the consumer\n                    // turned off `autoFocus` in order to move focus themselves.\n                    if (!this._containsFocus()) {\n                        element.focus();\n                    }\n                    break;\n                case true:\n                case 'first-tabbable':\n                    const focusedSuccessfully = this._focusTrap?.focusInitialElement();\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                    break;\n                case 'first-heading':\n                    this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                    break;\n                default:\n                    this._focusByCssSelector(this._config.autoFocus);\n                    break;\n            }\n        }, { injector: this._injector });\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const focusConfig = this._config.restoreFocus;\n        let focusTargetElement = null;\n        if (typeof focusConfig === 'string') {\n            focusTargetElement = this._document.querySelector(focusConfig);\n        }\n        else if (typeof focusConfig === 'boolean') {\n            focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n        }\n        else if (focusConfig) {\n            focusTargetElement = focusConfig;\n        }\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            focusTargetElement &&\n            typeof focusTargetElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    focusTargetElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Sets up the focus trap. */\n    _initializeFocusTrap() {\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            // Save the previously focused element. This element will be re-focused\n            // when the dialog closes.\n            if (this._document) {\n                this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n            }\n        }\n    }\n    /** Sets up the listener that handles clicks on the dialog backdrop. */\n    _handleBackdropClicks() {\n        // Clicking on the backdrop will move focus out of dialog.\n        // Recapture it if closing via the backdrop is disabled.\n        this._overlayRef.backdropClick().subscribe(() => {\n            if (this._config.disableClose) {\n                this._recaptureFocus();\n            }\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: DialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkDialogContainer, isStandalone: true, selector: \"cdk-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.id\": \"_config.id || null\", \"attr.role\": \"_config.role\", \"attr.aria-modal\": \"_config.ariaModal\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\" }, classAttribute: \"cdk-dialog-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, standalone: true, imports: [CdkPortalOutlet], host: {\n                        'class': 'cdk-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.id]': '_config.id || null',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    }, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DialogConfig]\n                }] }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i1.FocusMonitor }], propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n    constructor(overlayRef, config) {\n        this.overlayRef = overlayRef;\n        this.config = config;\n        /** Emits when the dialog has been closed. */\n        this.closed = new Subject();\n        this.disableClose = config.disableClose;\n        this.backdropClick = overlayRef.backdropClick();\n        this.keydownEvents = overlayRef.keydownEvents();\n        this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n        this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n        this.keydownEvents.subscribe(event => {\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this.close(undefined, { focusOrigin: 'keyboard' });\n            }\n        });\n        this.backdropClick.subscribe(() => {\n            if (!this.disableClose) {\n                this.close(undefined, { focusOrigin: 'mouse' });\n            }\n        });\n        this._detachSubscription = overlayRef.detachments().subscribe(() => {\n            // Check specifically for `false`, because we want `undefined` to be treated like `true`.\n            if (config.closeOnOverlayDetachments !== false) {\n                this.close();\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param result Optional result to return to the dialog opener.\n     * @param options Additional options to customize the closing behavior.\n     */\n    close(result, options) {\n        if (this.containerInstance) {\n            const closedSubject = this.closed;\n            this.containerInstance._closeInteractionType = options?.focusOrigin || 'program';\n            // Drop the detach subscription first since it can be triggered by the\n            // `dispose` call and override the result of this closing sequence.\n            this._detachSubscription.unsubscribe();\n            this.overlayRef.dispose();\n            closedSubject.next(result);\n            closedSubject.complete();\n            this.componentInstance = this.containerInstance = null;\n        }\n    }\n    /** Updates the position of the dialog based on the current position strategy. */\n    updatePosition() {\n        this.overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this.overlayRef.updateSize({ width, height });\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this.overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this.overlayRef.removePanelClass(classes);\n        return this;\n    }\n}\n\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Unique id for the created dialog. */\nlet uniqueId = 0;\nclass Dialog {\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    open(componentOrTemplateRef, config) {\n        const defaults = (this._defaultOptions || new DialogConfig());\n        config = { ...defaults, ...config };\n        config.id = config.id || `cdk-dialog-${uniqueId++}`;\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayConfig = this._getOverlayConfig(config);\n        const overlayRef = this._overlay.create(overlayConfig);\n        const dialogRef = new DialogRef(overlayRef, config);\n        const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n        dialogRef.containerInstance = dialogContainer;\n        this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        reverseForEach(this.openDialogs, dialog => dialog.close());\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n        // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n        // determines when `aria-hidden` is removed from elements outside the dialog.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => {\n            // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n            if (dialog.config.closeOnDestroy === false) {\n                this._removeOpenDialog(dialog, false);\n            }\n        });\n        // Make a second pass and close the remaining dialogs. We do this second pass in order to\n        // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n        // that should be closed and dialogs that should not.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n        this._openDialogsAtThisLevel = [];\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(config) {\n        const state = new OverlayConfig({\n            positionStrategy: config.positionStrategy ||\n                this._overlay.position().global().centerHorizontally().centerVertically(),\n            scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n            panelClass: config.panelClass,\n            hasBackdrop: config.hasBackdrop,\n            direction: config.direction,\n            minWidth: config.minWidth,\n            minHeight: config.minHeight,\n            maxWidth: config.maxWidth,\n            maxHeight: config.maxHeight,\n            width: config.width,\n            height: config.height,\n            disposeOnNavigation: config.closeOnNavigation,\n        });\n        if (config.backdropClass) {\n            state.backdropClass = config.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachContainer(overlay, dialogRef, config) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DialogConfig, useValue: config },\n            { provide: DialogRef, useValue: dialogRef },\n            { provide: OverlayRef, useValue: overlay },\n        ];\n        let containerType;\n        if (config.container) {\n            if (typeof config.container === 'function') {\n                containerType = config.container;\n            }\n            else {\n                containerType = config.container.type;\n                providers.push(...config.container.providers(config));\n            }\n        }\n        else {\n            containerType = CdkDialogContainer;\n        }\n        const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({ parent: userInjector || this._injector, providers }), config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param config Configuration used to open the dialog.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n            let context = { $implicit: config.data, dialogRef };\n            if (config.templateContext) {\n                context = {\n                    ...context,\n                    ...(typeof config.templateContext === 'function'\n                        ? config.templateContext()\n                        : config.templateContext),\n                };\n            }\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n            dialogRef.componentRef = contentRef;\n            dialogRef.componentInstance = contentRef.instance;\n        }\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n     * dialog injector, if the user didn't provide a custom one.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DIALOG_DATA, useValue: config.data },\n            { provide: DialogRef, useValue: dialogRef },\n        ];\n        if (config.providers) {\n            if (typeof config.providers === 'function') {\n                providers.push(...config.providers(dialogRef, config, dialogContainer));\n            }\n            else {\n                providers.push(...config.providers);\n            }\n        }\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, { optional: true }))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || fallbackInjector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     * @param emitEvent Whether to emit an event if this is the last dialog.\n     */\n    _removeOpenDialog(dialogRef, emitEvent) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                if (emitEvent) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        }\n    }\n    /** Hides all of the content that isn't an overlay from assistive technology. */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                const sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Dialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: DEFAULT_DIALOG_CONFIG, optional: true }, { token: Dialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: DIALOG_SCROLL_STRATEGY }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Dialog, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Dialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: DialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DEFAULT_DIALOG_CONFIG]\n                }] }, { type: Dialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DIALOG_SCROLL_STRATEGY]\n                }] }] });\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n    let i = items.length;\n    while (i--) {\n        callback(items[i]);\n    }\n}\n\nclass DialogModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DialogModule, imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer], exports: [\n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule,\n            CdkDialogContainer] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DialogModule, providers: [Dialog], imports: [OverlayModule, PortalModule, A11yModule, \n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer],\n                    exports: [\n                        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n                        // don't have to remember to import it or be faced with an unhelpful error.\n                        PortalModule,\n                        CdkDialogContainer,\n                    ],\n                    providers: [Dialog],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, ANIMATION_MODULE_TYPE, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, InjectionToken, inject, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollable } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /** Whether to wait for the opening animation to finish before trapping focus. */\n        this.delayFocusTrap = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/** Class added when the dialog is open. */\nconst OPEN_CLASS = 'mdc-dialog--open';\n/** Class added while the dialog is opening. */\nconst OPENING_CLASS = 'mdc-dialog--opening';\n/** Class added while the dialog is closing. */\nconst CLOSING_CLASS = 'mdc-dialog--closing';\n/** Duration of the opening animation in milliseconds. */\nconst OPEN_ANIMATION_DURATION = 150;\n/** Duration of the closing animation in milliseconds. */\nconst CLOSE_ANIMATION_DURATION = 75;\nclass MatDialogContainer extends CdkDialogContainer {\n    constructor(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, _animationMode, focusMonitor) {\n        super(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n        this._animationMode = _animationMode;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Whether animations are enabled. */\n        this._animationsEnabled = this._animationMode !== 'NoopAnimations';\n        /** Number of actions projected in the dialog. */\n        this._actionSectionCount = 0;\n        /** Host element of the dialog container component. */\n        this._hostElement = this._elementRef.nativeElement;\n        /** Duration of the dialog open animation. */\n        this._enterAnimationDuration = this._animationsEnabled\n            ? parseCssTime(this._config.enterAnimationDuration) ?? OPEN_ANIMATION_DURATION\n            : 0;\n        /** Duration of the dialog close animation. */\n        this._exitAnimationDuration = this._animationsEnabled\n            ? parseCssTime(this._config.exitAnimationDuration) ?? CLOSE_ANIMATION_DURATION\n            : 0;\n        /** Current timer for dialog animations. */\n        this._animationTimer = null;\n        /**\n         * Completes the dialog open by clearing potential animation classes, trapping\n         * focus and emitting an opened event.\n         */\n        this._finishDialogOpen = () => {\n            this._clearAnimationClasses();\n            this._openAnimationDone(this._enterAnimationDuration);\n        };\n        /**\n         * Completes the dialog close by clearing potential animation classes, restoring\n         * focus and emitting a closed event.\n         */\n        this._finishDialogClose = () => {\n            this._clearAnimationClasses();\n            this._animationStateChanged.emit({ state: 'closed', totalTime: this._exitAnimationDuration });\n        };\n    }\n    _contentAttached() {\n        // Delegate to the original dialog-container initialization (i.e. saving the\n        // previous element, setting up the focus trap and moving focus to the container).\n        super._contentAttached();\n        // Note: Usually we would be able to use the MDC dialog foundation here to handle\n        // the dialog animation for us, but there are a few reasons why we just leverage\n        // their styles and not use the runtime foundation code:\n        //   1. Foundation does not allow us to disable animations.\n        //   2. Foundation contains unnecessary features we don't need and aren't\n        //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\n        this._startOpenAnimation();\n    }\n    /** Starts the dialog open animation if enabled. */\n    _startOpenAnimation() {\n        this._animationStateChanged.emit({ state: 'opening', totalTime: this._enterAnimationDuration });\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._enterAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            // One would expect that the open class is added once the animation finished, but MDC\n            // uses the open class in combination with the opening class to start the animation.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(OPENING_CLASS, OPEN_CLASS));\n            this._waitForAnimationToComplete(this._enterAnimationDuration, this._finishDialogOpen);\n        }\n        else {\n            this._hostElement.classList.add(OPEN_CLASS);\n            // Note: We could immediately finish the dialog opening here with noop animations,\n            // but we defer until next tick so that consumers can subscribe to `afterOpened`.\n            // Executing this immediately would mean that `afterOpened` emits synchronously\n            // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\n            Promise.resolve().then(() => this._finishDialogOpen());\n        }\n    }\n    /**\n     * Starts the exit animation of the dialog if enabled. This method is\n     * called by the dialog ref.\n     */\n    _startExitAnimation() {\n        this._animationStateChanged.emit({ state: 'closing', totalTime: this._exitAnimationDuration });\n        this._hostElement.classList.remove(OPEN_CLASS);\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._exitAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(CLOSING_CLASS));\n            this._waitForAnimationToComplete(this._exitAnimationDuration, this._finishDialogClose);\n        }\n        else {\n            // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\n            // set up before any user can subscribe to the backdrop click. The subscription triggers\n            // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\n            // animation state event if animations are disabled, the overlay would be disposed\n            // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\n            // skipped. We work around this by waiting with the dialog close until the next tick when\n            // all subscriptions have been fired as expected. This is not an ideal solution, but\n            // there doesn't seem to be any other good way. Alternatives that have been considered:\n            //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\n            //      Also this issue is specific to the MDC implementation where the dialog could\n            //      technically be closed synchronously. In the non-MDC one, Angular animations are used\n            //      and closing always takes at least a tick.\n            //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\n            //      ref are first. This would solve the issue, but has the risk of memory leaks and also\n            //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\n            // Based on the fact that this is specific to the MDC-based implementation of the dialog\n            // animations, the defer is applied here.\n            Promise.resolve().then(() => this._finishDialogClose());\n        }\n    }\n    /**\n     * Updates the number action sections.\n     * @param delta Increase/decrease in the number of sections.\n     */\n    _updateActionSectionCount(delta) {\n        this._actionSectionCount += delta;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Clears all dialog animation classes. */\n    _clearAnimationClasses() {\n        this._hostElement.classList.remove(OPENING_CLASS, CLOSING_CLASS);\n    }\n    _waitForAnimationToComplete(duration, callback) {\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n        // Note that we want this timer to run inside the NgZone, because we want\n        // the related events like `afterClosed` to be inside the zone as well.\n        this._animationTimer = setTimeout(callback, duration);\n    }\n    /** Runs a callback in `requestAnimationFrame`, if available. */\n    _requestAnimationFrame(callback) {\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame === 'function') {\n                requestAnimationFrame(callback);\n            }\n            else {\n                callback();\n            }\n        });\n    }\n    _captureInitialFocus() {\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Callback for when the open dialog animation has finished. Intended to\n     * be called by sub-classes that use different animation implementations.\n     */\n    _openAnimationDone(totalTime) {\n        if (this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n        this._animationStateChanged.next({ state: 'opened', totalTime });\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n    }\n    attachComponentPortal(portal) {\n        // When a component is passed into the dialog, the host element interrupts\n        // the `display:flex` from affecting the dialog title, content, and\n        // actions. To fix this, we make the component host `display: contents` by\n        // marking its host with the `mat-mdc-dialog-component-host` class.\n        //\n        // Note that this problem does not exist when a template ref is used since\n        // the title, contents, and actions are then nested directly under the\n        // dialog surface.\n        const ref = super.attachComponentPortal(portal);\n        ref.location.nativeElement.classList.add('mat-mdc-dialog-component-host');\n        return ref;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogContainer, isStandalone: true, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"class._mat-animation-noopable\": \"!_animationsEnabled\", \"class.mat-mdc-dialog-container-with-actions\": \"_actionSectionCount > 0\" }, classAttribute: \"mat-mdc-dialog-container mdc-dialog\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 80vw);min-width:var(--mat-dialog-container-min-width, 0)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, 80vw)}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12));border-radius:var(--mdc-dialog-container-shape, var(--mat-app-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-app-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 0 24px 9px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-app-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-app-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-app-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-app-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-app-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-app-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-app-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-app-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-app-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-app-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-app-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 8px);justify-content:var(--mat-dialog-actions-alignment, start)}.cdk-high-contrast-active .mat-mdc-dialog-actions{border-top-color:CanvasText}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, standalone: true, imports: [CdkPortalOutlet], host: {\n                        'class': 'mat-mdc-dialog-container mdc-dialog',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[class._mat-animation-noopable]': '!_animationsEnabled',\n                        '[class.mat-mdc-dialog-container-with-actions]': '_actionSectionCount > 0',\n                    }, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 80vw);min-width:var(--mat-dialog-container-min-width, 0)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, 80vw)}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12));border-radius:var(--mdc-dialog-container-shape, var(--mat-app-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-app-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 0 24px 9px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-app-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-app-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-app-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-app-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-app-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-app-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-app-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-app-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-app-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-app-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-app-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 8px);justify-content:var(--mat-dialog-actions-alignment, start)}.cdk-high-contrast-active .mat-mdc-dialog-actions{border-top-color:CanvasText}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: i1.FocusMonitor }] });\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration';\n// TODO(mmalerba): Remove this function after animation durations are required\n//  to be numbers.\n/**\n * Converts a CSS time string to a number in ms. If the given time is already a\n * number, it is assumed to be in ms.\n */\nfunction parseCssTime(time) {\n    if (time == null) {\n        return null;\n    }\n    if (typeof time === 'number') {\n        return time;\n    }\n    if (time.endsWith('ms')) {\n        return coerceNumberProperty(time.substring(0, time.length - 2));\n    }\n    if (time.endsWith('s')) {\n        return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\n    }\n    if (time === '0') {\n        return 0;\n    }\n    return null; // anything else is invalid.\n}\n\nvar MatDialogState;\n(function (MatDialogState) {\n    MatDialogState[MatDialogState[\"OPEN\"] = 0] = \"OPEN\";\n    MatDialogState[MatDialogState[\"CLOSING\"] = 1] = \"CLOSING\";\n    MatDialogState[MatDialogState[\"CLOSED\"] = 2] = \"CLOSED\";\n})(MatDialogState || (MatDialogState = {}));\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_ref, config, _containerInstance) {\n        this._ref = _ref;\n        this._containerInstance = _containerInstance;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = MatDialogState.OPEN;\n        this.disableClose = config.disableClose;\n        this.id = _ref.id;\n        // Used to target panels specifically tied to dialogs.\n        _ref.addPanelClass('mat-mdc-dialog-panel');\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _ref.overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._finishDialogClose();\n        });\n        merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n            if (!this.disableClose) {\n                event.preventDefault();\n                _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._ref.overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = MatDialogState.CLOSING;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._ref.config.positionStrategy;\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._ref.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._ref.updateSize(width, height);\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._ref.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._ref.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = MatDialogState.CLOSED;\n        this._ref.close(this._result, { focusOrigin: this._closeInteractionType });\n        this.componentInstance = null;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    ref._closeInteractionType = interactionType;\n    return ref.close(result);\n}\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatMdcDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-mdc-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-mdc-dialog-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    constructor(_overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, _defaultOptions, _scrollStrategy, _parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    _overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n        this._overlay = _overlay;\n        this._defaultOptions = _defaultOptions;\n        this._scrollStrategy = _scrollStrategy;\n        this._parentDialog = _parentDialog;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this.dialogConfigClass = MatDialogConfig;\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._dialog = injector.get(Dialog);\n        this._dialogRefConstructor = MatDialogRef;\n        this._dialogContainerType = MatDialogContainer;\n        this._dialogDataToken = MAT_DIALOG_DATA;\n    }\n    open(componentOrTemplateRef, config) {\n        let dialogRef;\n        config = { ...(this._defaultOptions || new MatDialogConfig()), ...config };\n        config.id = config.id || `mat-mdc-dialog-${uniqueId++}`;\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n        const cdkRef = this._dialog.open(componentOrTemplateRef, {\n            ...config,\n            positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n            // Disable closing since we need to sync it up to the animation ourselves.\n            disableClose: true,\n            // Disable closing on destroy, because this service cleans up its open dialogs as well.\n            // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n            // the dialogs immediately whereas we want it to wait for the animations to finish.\n            closeOnDestroy: false,\n            // Disable closing on detachments so that we can sync up the animation.\n            // The Material dialog ref handles this manually.\n            closeOnOverlayDetachments: false,\n            container: {\n                type: this._dialogContainerType,\n                providers: () => [\n                    // Provide our config as the CDK config as well since it has the same interface as the\n                    // CDK one, but it contains the actual values passed in by the user for things like\n                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n                    { provide: this.dialogConfigClass, useValue: config },\n                    { provide: DialogConfig, useValue: config },\n                ],\n            },\n            templateContext: () => ({ dialogRef }),\n            providers: (ref, cdkConfig, dialogContainer) => {\n                dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n                dialogRef.updatePosition(config?.position);\n                return [\n                    { provide: this._dialogContainerType, useValue: dialogContainer },\n                    { provide: this._dialogDataToken, useValue: cdkConfig.data },\n                    { provide: this._dialogRefConstructor, useValue: dialogRef },\n                ];\n            },\n        });\n        // This can't be assigned in the `providers` callback, because\n        // the instance hasn't been assigned to the CDK ref yet.\n        dialogRef.componentRef = cdkRef.componentRef;\n        dialogRef.componentInstance = cdkRef.componentInstance;\n        this.openDialogs.push(dialogRef);\n        this.afterOpened.next(dialogRef);\n        dialogRef.afterClosed().subscribe(() => {\n            const index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                if (!this.openDialogs.length) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        });\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            dialogs[i].close();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialog, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                    type: Optional\n                }] }, { type: MatDialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DIALOG_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DIALOG_SCROLL_STRATEGY]\n                }] }, { type: MatDialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }] });\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogClose, isStandalone: true, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    standalone: true,\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }], propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\nclass MatDialogLayoutSection {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                this._onAdd();\n            });\n        }\n    }\n    ngOnDestroy() {\n        // Note: we null check because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        const instance = this._dialogRef?._containerInstance;\n        if (instance) {\n            Promise.resolve().then(() => {\n                this._onRemove();\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogLayoutSection, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogLayoutSection, isStandalone: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogLayoutSection, decorators: [{\n            type: Directive,\n            args: [{ standalone: true }]\n        }], ctorParameters: () => [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }] });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle extends MatDialogLayoutSection {\n    constructor() {\n        super(...arguments);\n        this.id = `mat-mdc-dialog-title-${dialogElementUid++}`;\n    }\n    _onAdd() {\n        // Note: we null check the queue, because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        this._dialogRef._containerInstance?._addAriaLabelledBy?.(this.id);\n    }\n    _onRemove() {\n        this._dialogRef?._containerInstance?._removeAriaLabelledBy?.(this.id);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogTitle, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogTitle, isStandalone: true, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-mdc-dialog-title mdc-dialog__title\" }, exportAs: [\"matDialogTitle\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-dialog-title mdc-dialog__title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogContent, isStandalone: true, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-mdc-dialog-content mdc-dialog__content\" }, hostDirectives: [{ directive: i3.CdkScrollable }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-mdc-dialog-content mdc-dialog__content' },\n                    standalone: true,\n                    hostDirectives: [CdkScrollable],\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions extends MatDialogLayoutSection {\n    _onAdd() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(1);\n    }\n    _onRemove() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(-1);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogActions, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogActions, isStandalone: true, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-mdc-dialog-actions-align-start\": \"align === \\\"start\\\"\", \"class.mat-mdc-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-mdc-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-mdc-dialog-actions mdc-dialog__actions\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\n                        '[class.mat-mdc-dialog-actions-align-start]': 'align === \"start\"',\n                        '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\nconst DIRECTIVES = [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n];\nclass MatDialogModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent], exports: [MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, providers: [MatDialog], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, ...DIRECTIVES],\n                    exports: [MatCommonModule, ...DIRECTIVES],\n                    providers: [MatDialog],\n                }]\n        }] });\n\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\nconst _defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', group([\n            animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n        transition('* => void, * => exit', group([\n            animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n    ]),\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogState, MatDialogTitle, _closeDialogVia, _defaultParams, matDialogAnimations };\n","<mat-card>\n  <mat-card-title>Manage Bingo Options</mat-card-title>\n  <form (ngSubmit)=\"addOption()\" class=\"addNewItem\">\n    <mat-form-field appearance=\"fill\">\n      <mat-label>New Option</mat-label>\n      <input matInput [(ngModel)]=\"newOption\" name=\"option\" placeholder=\"Add new option\">\n    </mat-form-field>\n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"(isLoading$ | async) || !newOption.trim()\">Add Option</button>\n  </form>\n\n  <!-- Search Field and Clear Button -->\n  <div class=\"searchBar\">\n    <mat-form-field appearance=\"fill\" class=\"search-field\">\n      <mat-label>Search Options</mat-label>\n      <input matInput [(ngModel)]=\"searchTerm\" placeholder=\"Search options\" (ngModelChange)=\"applyFilter()\">\n    </mat-form-field>\n    <button mat-raised-button color=\"primary\" (click)=\"searchTerm=''\">Clear</button>\n  </div>\n\n  <!-- Spinner to show loading state -->\n  <mat-progress-spinner *ngIf=\"isLoading$ | async\" mode=\"indeterminate\"></mat-progress-spinner>\n\n  <!-- Paginator -->\n  <mat-paginator [pageSize]=\"10\" showFirstLastButtons></mat-paginator>\n\n  <!-- Options Table -->\n  <mat-table [dataSource]=\"filteredOptions\" matSort matPaginator>\n\n    <!-- Options Column -->\n    <ng-container matColumnDef=\"option\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>\n        Option\n        <button mat-icon-button (click)=\"reverseSort()\" class=\"reverse-sort-button\">\n          <mat-icon>{{ isSortedAscending ? 'arrow_downward' : 'arrow_upward' }}</mat-icon>\n        </button>\n      </th>\n      <td mat-cell *matCellDef=\"let option\">{{ option }}</td>\n    </ng-container>\n\n    <!-- Actions Column -->\n    <ng-container matColumnDef=\"actions\">\n      <th mat-header-cell *matHeaderCellDef>Actions</th>\n      <td mat-cell *matCellDef=\"let option\">\n        <button mat-icon-button (click)=\"removeOption(option)\" [disabled]=\"isLoading$ | async\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </td>\n    </ng-container>\n\n    <!-- Table Header and Rows -->\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </mat-table>\n\n\n</mat-card>\n","import {Component, OnInit, ViewChild} from '@angular/core';\nimport { BingoService } from '../services/bingo.service';\nimport {FormsModule} from \"@angular/forms\";\nimport {MatTableDataSource, MatTableModule} from \"@angular/material/table\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {Observable} from \"rxjs\";\nimport {MatPaginator, MatPaginatorModule} from \"@angular/material/paginator\";\nimport {CommonModule} from \"@angular/common\";\nimport {MatCardModule} from \"@angular/material/card\";\nimport {MatProgressSpinnerModule} from \"@angular/material/progress-spinner\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatButtonModule} from \"@angular/material/button\";\n\n@Component({\n  selector: 'app-options-manager',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatCardModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatTableModule,\n    MatProgressSpinnerModule,\n    MatIconModule,\n    MatPaginatorModule,\n    FormsModule,\n  ],\n  providers: [\n    BingoService\n  ],\n  templateUrl: './options-manager.component.html',\n  styleUrls: ['./options-manager.component.scss']\n})\nexport class OptionsManagerComponent implements OnInit {\n  displayedColumns: string[] = ['option', 'actions'];\n  options: string[] = [];\n  filteredOptions = new MatTableDataSource<string>([]);\n  searchTerm: string = '';\n  newOption: string = '';\n  isSortedAscending: boolean = true;\n  isLoading$!: Observable<boolean>;\n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n\n  constructor(private bingoService: BingoService, private dialog: MatDialog) {}\n\n  ngOnInit(): void {\n    this.isLoading$ = this.bingoService.loading$;\n    this.loadOptions();\n  }\n\n  loadOptions(): void {\n    this.bingoService.getOptions().subscribe(options => {\n      this.options = options;\n      this.applyFilter();\n      this.filteredOptions.paginator = this.paginator;\n    });\n  }\n\n  addOption(): void {\n    if (!this.newOption.trim()) {\n      return;\n    }\n    this.bingoService.addOption(this.newOption.trim()).subscribe(() => {\n      this.loadOptions(); // Refresh options after adding\n      this.newOption = '';\n    });\n  }\n\n  removeOption(option: string): void {\n    this.bingoService.removeOption(option).subscribe(() => {\n      this.loadOptions(); // Refresh options after removing\n    });\n  }\n\n  applyFilter(): void {\n    this.filteredOptions.data = this.options.filter(option =>\n      option.toLowerCase().includes(this.searchTerm.toLowerCase())\n    );\n\n    // this.filteredOptions.filterPredicate = (data: string, filter: string) => {\n    //   return data.toLowerCase().includes(filter.trim().toLowerCase());\n    // };\n    // this.filteredOptions.filter = this.searchTerm.trim().toLowerCase();\n  }\n\n  reverseSort(): void {\n    this.isSortedAscending = !this.isSortedAscending;\n    this.options = this.options.sort((a, b) => {\n      return this.isSortedAscending ? a.localeCompare(b) : b.localeCompare(a);\n    });\n    this.applyFilter();\n    // const sortedData = this.isSortedAscending\n    //   ? this.filteredOptions.data.sort()\n    //   : this.filteredOptions.data.sort().reverse();\n    // this.filteredOptions.data = [...sortedData]; // Trigger change detection\n  }\n\n}\n"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]}